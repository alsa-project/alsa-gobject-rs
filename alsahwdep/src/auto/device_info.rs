// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsahwdep_sys;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use gobject_sys;
use std::fmt;
use IfaceType;

glib_wrapper! {
    pub struct DeviceInfo(Object<alsahwdep_sys::ALSAHwdepDeviceInfo, alsahwdep_sys::ALSAHwdepDeviceInfoClass, DeviceInfoClass>);

    match fn {
        get_type => || alsahwdep_sys::alsahwdep_device_info_get_type(),
    }
}

pub const NONE_DEVICE_INFO: Option<&DeviceInfo> = None;

pub trait DeviceInfoExt: 'static {
    fn get_property_card_id(&self) -> i32;

    fn get_property_device_id(&self) -> u32;

    fn get_property_id(&self) -> Option<GString>;

    fn get_property_iface(&self) -> IfaceType;

    fn get_property_name(&self) -> Option<GString>;
}

impl<O: IsA<DeviceInfo>> DeviceInfoExt for O {
    fn get_property_card_id(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"card-id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `card-id` getter")
                .unwrap()
        }
    }

    fn get_property_device_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"device-id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `device-id` getter")
                .unwrap()
        }
    }

    fn get_property_id(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value.get().expect("Return Value for property `id` getter")
        }
    }

    fn get_property_iface(&self) -> IfaceType {
        unsafe {
            let mut value = Value::from_type(<IfaceType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"iface\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `iface` getter")
                .unwrap()
        }
    }

    fn get_property_name(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"name\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `name` getter")
        }
    }
}

impl fmt::Display for DeviceInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DeviceInfo")
    }
}

<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="ALSATimer" version="0.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="alsaseq"/>
  <c:include name="alsaseq.h"/>
  <namespace name="ALSASeq"
             version="0.0"
             shared-library="libalsaseq.so.0"
             c:identifier-prefixes="ALSASeq"
             c:symbol-prefixes="alsaseq_">
    <record name="Addr"
            c:type="ALSASeqAddr"
            glib:type-name="ALSASeqAddr"
            glib:get-type="alsaseq_addr_get_type"
            c:symbol-prefix="addr">
      <doc xml:space="preserve"
           filename="../src/seq/addr.c"
           line="4">A boxed object to express address in ALSA Sequencer.
A [struct@Addr] is a boxed object to express address in ALSA Sequencer. The address consists
of two parts; the numeric ID of client and port.

The object wraps `struct snd_seq_addr` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/addr.h" line="11"/>
      <constructor name="new" c:identifier="alsaseq_addr_new">
        <doc xml:space="preserve"
             filename="../src/seq/addr.c"
             line="28">Allocate and return an instance of [struct@Addr].</doc>
        <source-position filename="../src/seq/addr.h" line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/addr.c"
               line="35">A [struct@Addr].</doc>
          <type name="Addr" c:type="ALSASeqAddr*"/>
        </return-value>
        <parameters>
          <parameter name="client_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="30">The numeric ID of client to address.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="port_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="31">The numeric ID of port to address.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="equal" c:identifier="alsaseq_addr_equal">
        <source-position filename="../src/seq/addr.h" line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/addr.c"
               line="76">whether the given object indicates the same element.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="73">A [struct@Addr].</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="74">A [struct@Addr] to compare.</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_client_id" c:identifier="alsaseq_addr_get_client_id">
        <doc xml:space="preserve"
             filename="../src/seq/addr.c"
             line="47">Get the numeric ID of client to address.</doc>
        <source-position filename="../src/seq/addr.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="49">A [struct@Addr].</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </instance-parameter>
          <parameter name="client_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="50">The numeric ID of client to address.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_port_id" c:identifier="alsaseq_addr_get_port_id">
        <doc xml:space="preserve"
             filename="../src/seq/addr.c"
             line="59">Get the numeric ID of port to address.</doc>
        <source-position filename="../src/seq/addr.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="61">A [struct@Addr].</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </instance-parameter>
          <parameter name="port_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/addr.c"
                 line="62">The numeric ID of port to address.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="ClientInfo"
           c:symbol-prefix="client_info"
           c:type="ALSASeqClientInfo"
           parent="GObject.Object"
           glib:type-name="ALSASeqClientInfo"
           glib:get-type="alsaseq_client_info_get_type"
           glib:type-struct="ClientInfoClass">
      <doc xml:space="preserve"
           filename="../src/seq/client-info.c"
           line="7">A GObject-derived object to express information of client.
A [class@ClientInfo] is a GObject-derived object to express information of client. The call
of [func@get_client_info] returns the instance of object.  The call of
[method@UserClient.set_info] and [method@UserClient.get_info] require the instance of object.

The object wraps `struct snd_seq_client_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/client-info.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_client_info_new">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="243">Allocate and return an instance of [class@ClientInfo].</doc>
        <source-position filename="../src/seq/client-info.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/client-info.c"
               line="248">An instance of [class@ClientInfo].</doc>
          <type name="ClientInfo" c:type="ALSASeqClientInfo*"/>
        </return-value>
      </constructor>
      <method name="get_event_filter"
              c:identifier="alsaseq_client_info_get_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="294">Get the list of type of events configured to be listen.</doc>
        <source-position filename="../src/seq/client-info.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/client-info.c"
               line="304">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="296">A [class@ClientInfo].</doc>
            <type name="ClientInfo" c:type="ALSASeqClientInfo*"/>
          </instance-parameter>
          <parameter name="event_types"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="297">The array with elements for the type of
              event to listen.</doc>
            <array length="1" zero-terminated="0" c:type="ALSASeqEventType**">
              <type name="EventType" c:type="ALSASeqEventType*"/>
            </array>
          </parameter>
          <parameter name="event_type_count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="299">The number of elements for the type of event.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_event_filter"
              c:identifier="alsaseq_client_info_set_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="255">Set the list of type of events configured to be listen.</doc>
        <source-position filename="../src/seq/client-info.h" line="19"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/client-info.c"
               line="265">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="257">A [class@ClientInfo].</doc>
            <type name="ClientInfo" c:type="ALSASeqClientInfo*"/>
          </instance-parameter>
          <parameter name="event_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="258">The array with elements for the type of event to
              listen.</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const ALSASeqEventType*">
              <type name="EventType" c:type="ALSASeqEventType"/>
            </array>
          </parameter>
          <parameter name="event_type_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/client-info.c"
                 line="260">The number of elements for the type of event.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="card-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="207">The numeric ID of sound card. Available in Linux kernel 4.6.0 or later.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="client-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="123">The numeric ID of client. One of [enum@SpecificClientId] is available as well as any
numeric value.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="filter-attributes"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="160">The attributes for event filter.</doc>
        <type name="FilterAttrFlag"/>
      </property>
      <property name="lost-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="195">The number of lost events.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="149">The name of client.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="183">The number of ports opened by the client.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="process-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="220">The process ID for user client, otherwise -1. Available in Linux kernel 4.6.0 or later.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="137">The type of client, one of [enum@ClientType].</doc>
        <type name="ClientType"/>
      </property>
      <property name="use-filter" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-info.c"
             line="172">Whether using filter to receive event or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ClientInfoClass"
            c:type="ALSASeqClientInfoClass"
            glib:is-gtype-struct-for="ClientInfo">
      <source-position filename="../src/seq/client-info.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ClientPool"
           c:symbol-prefix="client_pool"
           c:type="ALSASeqClientPool"
           parent="GObject.Object"
           glib:type-name="ALSASeqClientPool"
           glib:get-type="alsaseq_client_pool_get_type"
           glib:type-struct="ClientPoolClass">
      <doc xml:space="preserve"
           filename="../src/seq/client-pool.c"
           line="4">A GObject-derived object to express information of pool owned by client.
A [class@ClientPool] is a GObject-derived object to express information of pool owned by
client. The pool consists of a batch of cells to store message contents in kernel space. The
call of [func@get_client_pool] returns the instance of object. The call of
[method@UserClient.set_pool]) and [method@UserClient.get_pool] require the instance of object.

The object wraps `struct snd_seq_client_pool` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/client-pool.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_client_pool_new">
        <source-position filename="../src/seq/client-pool.h" line="17"/>
        <return-value transfer-ownership="full">
          <type name="ClientPool" c:type="ALSASeqClientPool*"/>
        </return-value>
      </constructor>
      <property name="client-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="99">The numeric ID of client. One of [enum@SpecificClientId] is available as well as any
numeric value.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="input-free" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="167">The current number of free cells in memory pool for input direction.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="input-pool" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="127">The total number of cells in memory pool for input direction. The client dequeue any event
from the pool when the event is copied from the output memory pool of source client.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="output-free" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="155">The current number of free cells in memory pool for output direction.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="output-pool" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="113">The total number of cells in memory pool for output direction. The client enqueue any event
into the pool at scheduling, then the event is copied to input memory pool of destination
client.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="output-room" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/client-pool.c"
             line="140">The number of cells in memory pool for output direction as threshold for writable condition
at the result of poll(2). The property is useless for [class@UserClient] since it doesn't
perform poll(2) to check writable or not.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ClientPoolClass"
            c:type="ALSASeqClientPoolClass"
            glib:is-gtype-struct-for="ClientPool">
      <source-position filename="../src/seq/client-pool.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientType"
                 glib:type-name="ALSASeqClientType"
                 glib:get-type="alsaseq_client_type_get_type"
                 c:type="ALSASeqClientType">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="35">A set of enumerations for the type of client.</doc>
      <member name="none"
              value="0"
              c:identifier="ALSASEQ_CLIENT_TYPE_NONE"
              glib:nick="none"
              glib:name="ALSASEQ_CLIENT_TYPE_NONE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="37">The client is invalid.</doc>
      </member>
      <member name="user"
              value="1"
              c:identifier="ALSASEQ_CLIENT_TYPE_USER"
              glib:nick="user"
              glib:name="ALSASEQ_CLIENT_TYPE_USER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="38">The client is userspace application.</doc>
      </member>
      <member name="kernel"
              value="2"
              c:identifier="ALSASEQ_CLIENT_TYPE_KERNEL"
              glib:nick="kernel"
              glib:name="ALSASEQ_CLIENT_TYPE_KERNEL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="39">The client is kernel driver.</doc>
      </member>
    </enumeration>
    <record name="Event"
            c:type="ALSASeqEvent"
            glib:type-name="ALSASeqEvent"
            glib:get-type="alsaseq_event_get_type"
            c:symbol-prefix="event">
      <doc xml:space="preserve"
           filename="../src/seq/event.c"
           line="4">A boxed structure for sequencer event.
A [struct@Event] expresses any type of event in ALSA Sequencer. The event consists of some
product-type propertiess and two variant-type properties.

The instance should be released by call of [func@GObject.boxed_free] since it can point to the
other allocated object for blob data, therefore it's preferable to use [func@GObject.boxed_copy]
to duplicate the instance so that the blob data is going to be duplicated as well.

This is the list of product-type properties:

- the type of event
- the mode of time stamp
- the mode of time
- the mode of length
- the mode of priority
- the numeric value of tag associated to the event
- the numeric identifier of queue to schedule the event
- destination address
- source address

One of variant-type property is for time stamp.

- tick count as time stamp of event
- real time as time stamp of event

Another variant-type property is for data of event.

- note
- control
- 12 bytes
- 3 quadlets
- blob as variable length of bytes
- pointer in VMA of user process
- queue control
- tick count as arbitrary time stamp
- real time as arbitrary time stamp
- arbitrary address
- connection between source and destination addresses
- result

The type of time stamp is associated to the mode of time stamp, while the type of data is
associated to the type of event loosely. Each of the variant type property has single storage
internally, thus an event can includes the sole variant.

The object wraps `struct snd_seq_event` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event.h" line="11"/>
      <constructor name="new" c:identifier="alsaseq_event_new">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="127">Allocate and return an instance of [struct@Event].</doc>
        <source-position filename="../src/seq/event.h" line="19"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="133">An instance of [struct@Event].</doc>
          <type name="Event" c:type="ALSASeqEvent*"/>
        </return-value>
        <parameters>
          <parameter name="event_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="129">A [enum@EventType].</doc>
            <type name="EventType" c:type="ALSASeqEventType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="calculate_pool_consumption"
              c:identifier="alsaseq_event_calculate_pool_consumption">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1623">Calculate the number of cells in client pool to be consumed when the event is delivered.
The comparison to properties of [class@ClientPool] is useful when scheduling the event.</doc>
        <source-position filename="../src/seq/event.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1625">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="cells"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1626">The number of consumed cells in client pool.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_addr_data"
              c:identifier="alsaseq_event_get_addr_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1385">Get the address data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].CLIENT_START
- [enum@EventType].CLIENT_EXIT
- [enum@EventType].CLIENT_CHANGE
- [enum@EventType].PORT_START
- [enum@EventType].PORT_EXIT
- [enum@EventType].PORT_CHANGE
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1410">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1387">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1388">The address data of event.</doc>
            <type name="Addr" c:type="const ALSASeqAddr**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_blob_data"
              c:identifier="alsaseq_event_get_blob_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1005">Refer to the blob data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].SYSEX
- [enum@EventType].BOUNCE
- [enum@EventType].USR_VAR0
- [enum@EventType].USR_VAR1
- [enum@EventType].USR_VAR2
- [enum@EventType].USR_VAR3
- [enum@EventType].USR_VAR4</doc>
        <source-position filename="../src/seq/event.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1022">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1007">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1008">The pointer to blob data.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1009">The length of data in byte unit.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_byte_data"
              c:identifier="alsaseq_event_get_byte_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="853">Get the byte data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="872">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="855">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="856">The byte data of event.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="12">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_connect_data"
              c:identifier="alsaseq_event_get_connect_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1469">Get the connect data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].PORT_SUBSCRIBED
- [enum@EventType].PORT_UNSUBSCRIBED
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1490">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1471">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1472">The connect data of event.</doc>
            <type name="EventDataConnect"
                  c:type="const ALSASeqEventDataConnect**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ctl_data"
              c:identifier="alsaseq_event_get_ctl_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="756">Refer to the control data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].CONTROLLER
- [enum@EventType].PGMCHANGE
- [enum@EventType].CHANPRESS
- [enum@EventType].PITCHBEND
- [enum@EventType].CONTROL14
- [enum@EventType].NONREGPARAM
- [enum@EventType].REGPARAM
- [enum@EventType].SONGPOS
- [enum@EventType].SONGSEL
- [enum@EventType].QFRAME
- [enum@EventType].TIMESIGN
- [enum@EventType].KEYSIGN
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="787">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="758">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="759">The control data of event.</doc>
            <type name="EventDataCtl" c:type="const ALSASeqEventDataCtl**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_destination"
              c:identifier="alsaseq_event_get_destination">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="338">Refer to the destination address of event.</doc>
        <source-position filename="../src/seq/event.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="340">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="addr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="341">A [struct@Addr] for event destination.</doc>
            <type name="Addr" c:type="const ALSASeqAddr**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_event_type"
              c:identifier="alsaseq_event_get_event_type">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="144">Get the type of event.</doc>
        <source-position filename="../src/seq/event.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="146">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="event_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="147">A [enum@EventType].</doc>
            <type name="EventType" c:type="ALSASeqEventType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length_mode"
              c:identifier="alsaseq_event_get_length_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="159">Get the mode of data length for the event.</doc>
        <source-position filename="../src/seq/event.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="161">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="length_mode"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="162">A [enum@EventLengthMode] for the mode of data length.</doc>
            <type name="EventLengthMode" c:type="ALSASeqEventLengthMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_note_data"
              c:identifier="alsaseq_event_get_note_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="675">Refer to the note data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].NOTE
- [enum@EventType].NOTEON
- [enum@EventType].NOTEOFF
- [enum@EventType].KEYPRESS
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="698">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="677">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="678">The note data of event.</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pointer_data"
              c:identifier="alsaseq_event_get_pointer_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1075">Get the pointer and length in data of event. It has no gurantee that the dereference of pointer
is safe in VMA of user process, thus users have to know the purpose of the pointer in advance;
e.g. inter-process communication between forked parent and child processes.</doc>
        <source-position filename="../src/seq/event.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1086">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1077">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1078">A pointer to user data.</doc>
            <type name="gpointer" c:type="gconstpointer*"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1079">The length of user data.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority_mode"
              c:identifier="alsaseq_event_get_priority_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="219">Get the mode of priority for the event.</doc>
        <source-position filename="../src/seq/event.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="221">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="priority_mode"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="222">A [enum@EventPriorityMode] The mode of priority.</doc>
            <type name="EventPriorityMode" c:type="ALSASeqEventPriorityMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quadlet_data"
              c:identifier="alsaseq_event_get_quadlet_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="929">Get the quadlet data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="948">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="931">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="932">The quadlet data of event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="3">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_data"
              c:identifier="alsaseq_event_get_queue_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1136">Get the queue data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].START
- [enum@EventType].CONTINUE
- [enum@EventType].STOP
- [enum@EventType].SETPOS_TICK
- [enum@EventType].SETPOS_TIME
- [enum@EventType].TEMPO
- [enum@EventType].CLOCK
- [enum@EventType].TICK
- [enum@EventType].QUEUE_SKEW
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1164">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1138">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1139">The queue data of event.</doc>
            <type name="EventDataQueue"
                  c:type="const ALSASeqEventDataQueue**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_id" c:identifier="alsaseq_event_get_queue_id">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="279">Get the numeric identifier of queue to schedule the event.</doc>
        <source-position filename="../src/seq/event.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="281">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="queue_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="282">The numeric identifier of queue.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_real_time"
              c:identifier="alsaseq_event_get_real_time"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="428">Copy the real time to the event, available only when [enum@EventTstampMode].REAL is retrieved by
[method@Event.get_tstamp_mode].</doc>
        <source-position filename="../src/seq/event.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="437">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="430">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="431">The real time of event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_real_time_data"
              c:identifier="alsaseq_event_get_real_time_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1305">Get the real time data of event, available when [method@Event.get_tstamp_mode is
[enum@EventTstampMode].REAL and [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1324">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1307">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1308">The real time data of event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_result_data"
              c:identifier="alsaseq_event_get_result_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1546">Get the result data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].SYSTEM
- [enum@EventType].RESULT
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1567">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1548">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1549">The result data of event.</doc>
            <type name="EventDataResult"
                  c:type="const ALSASeqEventDataResult**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_source" c:identifier="alsaseq_event_get_source">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="308">Refer to the source address of event.</doc>
        <source-position filename="../src/seq/event.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="310">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="addr"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="311">A [struct@Addr] for source address.</doc>
            <type name="Addr" c:type="const ALSASeqAddr**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tag" c:identifier="alsaseq_event_get_tag">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="250">Get the numeric value of tag associated to the event.</doc>
        <source-position filename="../src/seq/event.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="252">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="253">The numeric value of tag.</doc>
            <type name="gint8" c:type="gint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tick_time"
              c:identifier="alsaseq_event_get_tick_time"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="380">Get the tick time of event, available only when [enum@EventTstampMode].TICK is retrieved by
[method@Event.get_tstamp_mode].</doc>
        <source-position filename="../src/seq/event.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="389">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="382">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tick_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="383">The tick time of event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tick_time_data"
              c:identifier="alsaseq_event_get_tick_time_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1227">Get the tick time data of event, available when [method@Event.get_tstamp_mode is
[enum@EventTstampMode].TICK and [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1246">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1229">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tick_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1230">The tick time data of event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time_mode" c:identifier="alsaseq_event_get_time_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="189">Get the mode of time for the event.</doc>
        <source-position filename="../src/seq/event.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="191">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="time_mode"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="192">A [enum@EventTimeMode] for the mode of time.</doc>
            <type name="EventTimeMode" c:type="ALSASeqEventTimeMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tstamp_mode"
              c:identifier="alsaseq_event_get_tstamp_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="174">Get the mode of time stamp for the event.</doc>
        <source-position filename="../src/seq/event.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="176">A [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tstamp_mode"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="177">A [enum@EventTstampMode] for the mode of time stamp.</doc>
            <type name="EventTstampMode" c:type="ALSASeqEventTstampMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_addr_data"
              c:identifier="alsaseq_event_set_addr_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1427">Get the address data of event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].CLIENT_START
- [enum@EventType].CLIENT_EXIT
- [enum@EventType].CLIENT_CHANGE
- [enum@EventType].PORT_START
- [enum@EventType].PORT_EXIT
- [enum@EventType].PORT_CHANGE
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1452">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1429">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1430">The address data of event.</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_blob_data"
              c:identifier="alsaseq_event_set_blob_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1041">Copy the quadlet data to the event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].SYSEX
- [enum@EventType].BOUNCE
- [enum@EventType].USR_VAR0
- [enum@EventType].USR_VAR1
- [enum@EventType].USR_VAR2
- [enum@EventType].USR_VAR3
- [enum@EventType].USR_VAR4</doc>
        <source-position filename="../src/seq/event.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1058">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1043">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1044">The pointer to blob data for the event.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1045">The length of data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_byte_data"
              c:identifier="alsaseq_event_set_byte_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="893">Copy the byte data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="912">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="895">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="896">The byte data of event.</doc>
            <array zero-terminated="0" c:type="const guint8*" fixed-size="12">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_connect_data"
              c:identifier="alsaseq_event_set_connect_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1507">Copy the connect data to the event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].PORT_SUBSCRIBED
- [enum@EventType].PORT_UNSUBSCRIBED
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1528">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1509">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1510">The connect data of event.</doc>
            <type name="EventDataConnect"
                  c:type="const ALSASeqEventDataConnect*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ctl_data"
              c:identifier="alsaseq_event_set_ctl_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="804">Copy the control data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].CONTROLLER
- [enum@EventType].PGMCHANGE
- [enum@EventType].CHANPRESS
- [enum@EventType].PITCHBEND
- [enum@EventType].CONTROL14
- [enum@EventType].NONREGPARAM
- [enum@EventType].REGPARAM
- [enum@EventType].SONGPOS
- [enum@EventType].SONGSEL
- [enum@EventType].QFRAME
- [enum@EventType].TIMESIGN
- [enum@EventType].KEYSIGN
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="835">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="806">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="807">The control data of event.</doc>
            <type name="EventDataCtl" c:type="const ALSASeqEventDataCtl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_destination"
              c:identifier="alsaseq_event_set_destination">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="353">Copy the address as destination of event.</doc>
        <source-position filename="../src/seq/event.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="355">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="356">A [struct@Addr] for event destination.</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_note_data"
              c:identifier="alsaseq_event_set_note_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="715">Copy the note data, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].NOTE
- [enum@EventType].NOTEON
- [enum@EventType].NOTEOFF
- [enum@EventType].KEYPRESS
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="738">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="717">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="718">The note data of event.</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer_data"
              c:identifier="alsaseq_event_set_pointer_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1105">Copy the pointer and length to data of event. When using the type, the event should be deliverd
directly without scheduling to queue. The aim of data pointed by it is arbitrary, thus
programmer needs to decide protocol between transmitter and receiver in advance.</doc>
        <source-position filename="../src/seq/event.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1116">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1107">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1108">A pointer to user data.</doc>
            <type name="gpointer" c:type="const gpointer"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1109">The length of user data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_mode"
              c:identifier="alsaseq_event_set_priority_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="235">Set the mode of priority for the event.</doc>
        <source-position filename="../src/seq/event.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="237">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="priority_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="238">A [enum@EventPriorityMode] for the mode of priority.</doc>
            <type name="EventPriorityMode" c:type="ALSASeqEventPriorityMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_quadlet_data"
              c:identifier="alsaseq_event_set_quadlet_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="969">Copy the quadlet data to the event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="988">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="971">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="972">The quadlet data of event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="3">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_data"
              c:identifier="alsaseq_event_set_queue_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1181">Copy the queue data to the event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].START
- [enum@EventType].CONTINUE
- [enum@EventType].STOP
- [enum@EventType].SETPOS_TICK
- [enum@EventType].SETPOS_TIME
- [enum@EventType].TEMPO
- [enum@EventType].CLOCK
- [enum@EventType].TICK
- [enum@EventType].QUEUE_SKEW
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1209">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1183">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1184">The queue data of event.</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_id" c:identifier="alsaseq_event_set_queue_id">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="294">Set the numeric identifier of queue to schedule the event.</doc>
        <source-position filename="../src/seq/event.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="296">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="297">The numeric identifier of queue.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_real_time"
              c:identifier="alsaseq_event_set_real_time"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="454">Copy the real time to the event and set [enum@EventTstampMode].REAL.</doc>
        <source-position filename="../src/seq/event.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="462">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="456">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="real_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="457">The real time of event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_real_time_data"
              c:identifier="alsaseq_event_set_real_time_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1344">Copy the real time data to the event, available [method@Event.get_tstamp_mode is
[enum@EventTstampMode].REAL and [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1363">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1346">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="real_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1347">The real time data of event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_result_data"
              c:identifier="alsaseq_event_set_result_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1584">Copy the result data to the event, available when [method@Event.get_event_type] results in one of:

- [enum@EventType].SYSTEM
- [enum@EventType].RESULT
- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1605">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1586">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1587">The result data of event.</doc>
            <type name="EventDataResult"
                  c:type="const ALSASeqEventDataResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source" c:identifier="alsaseq_event_set_source">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="323">Copy the address as source of event.</doc>
        <source-position filename="../src/seq/event.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="325">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="326">A [struct@Addr] for source address.</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tag" c:identifier="alsaseq_event_set_tag">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="265">Set the numeric value of tag associated to the event.</doc>
        <source-position filename="../src/seq/event.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="267">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="268">The numeric value of tag.</doc>
            <type name="gint8" c:type="gint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tick_time"
              c:identifier="alsaseq_event_set_tick_time"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="405">Copy the real time to the event and set [enum@EventTstampMode].TICK.</doc>
        <source-position filename="../src/seq/event.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="413">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="407">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tick_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="408">The tick time of event.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tick_time_data"
              c:identifier="alsaseq_event_set_tick_time_data"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="1266">Copy the tick time data to the event, available when [method@Event.get_tstamp_mode is
[enum@EventTstampMode].TICK and [method@Event.get_event_type] results in one of:

- [enum@EventType].USR0
- [enum@EventType].USR1
- [enum@EventType].USR2
- [enum@EventType].USR3
- [enum@EventType].USR4
- [enum@EventType].USR5
- [enum@EventType].USR6
- [enum@EventType].USR7
- [enum@EventType].USR8
- [enum@EventType].USR9</doc>
        <source-position filename="../src/seq/event.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="1286">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1268">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="tick_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="1269">The tick time data of event.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_mode" c:identifier="alsaseq_event_set_time_mode">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="204">Set the mode of time for the event.</doc>
        <source-position filename="../src/seq/event.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="206">A [struct@Event].</doc>
            <type name="Event" c:type="ALSASeqEvent*"/>
          </instance-parameter>
          <parameter name="time_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event.c"
                 line="207">A [enum@EventTimeMode] for the mode of time.</doc>
            <type name="EventTimeMode" c:type="ALSASeqEventTimeMode"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventCntr"
            c:type="ALSASeqEventCntr"
            glib:type-name="ALSASeqEventCntr"
            glib:get-type="alsaseq_event_cntr_get_type"
            c:symbol-prefix="event_cntr">
      <doc xml:space="preserve"
           filename="../src/seq/event-cntr.c"
           line="4">A boxed structure for container which includes batch of events.
For batch of events, [struct@EventCntr] keeps flatten buffer which serialize the events without
pointing to extra data blob for variable type.</doc>
      <source-position filename="../src/seq/event-cntr.h" line="16"/>
      <field name="buf" readable="0" private="1">
        <type name="guint8" c:type="guint8*"/>
      </field>
      <field name="length" readable="0" private="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="aligned" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <method name="deserialize" c:identifier="alsaseq_event_cntr_deserialize">
        <doc xml:space="preserve"
             filename="../src/seq/event-cntr.c"
             line="116">Retrieve [struct@GLib.List] including batch of deserialized [struct@Event].</doc>
        <source-position filename="../src/seq/event-cntr.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-cntr.c"
                 line="118">A [struct@EventCntr].</doc>
            <type name="EventCntr" c:type="const ALSASeqEventCntr*"/>
          </instance-parameter>
          <parameter name="events"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-cntr.c"
                 line="119">The list of deserialized events.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="Event"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataConnect"
            c:type="ALSASeqEventDataConnect"
            glib:type-name="ALSASeqEventDataConnect"
            glib:get-type="alsaseq_event_data_connect_get_type"
            c:symbol-prefix="event_data_connect">
      <doc xml:space="preserve"
           filename="../src/seq/event-data-connect.c"
           line="4">A boxed object to express data of connect event.
A [struct@EventDataConnect] is a boxed object to express data of connect event. The instance
of object is one of data properties in event.

The object wraps `struct snd_seq_connect` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event-data-connect.h" line="11"/>
      <method name="get_dst" c:identifier="alsaseq_event_data_connect_get_dst">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-connect.c"
             line="54">Get the destination of connection event.</doc>
        <source-position filename="../src/seq/event-data-connect.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="56">A [struct@EventDataConnect].</doc>
            <type name="EventDataConnect"
                  c:type="const ALSASeqEventDataConnect*"/>
          </instance-parameter>
          <parameter name="dst"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="57">The destination of connection event.</doc>
            <type name="Addr" c:type="const ALSASeqAddr**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_src" c:identifier="alsaseq_event_data_connect_get_src">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-connect.c"
             line="28">Get the source of connection event.</doc>
        <source-position filename="../src/seq/event-data-connect.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="30">A [struct@EventDataConnect].</doc>
            <type name="EventDataConnect"
                  c:type="const ALSASeqEventDataConnect*"/>
          </instance-parameter>
          <parameter name="src"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="31">The source of connection event.</doc>
            <type name="Addr" c:type="const ALSASeqAddr**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dst" c:identifier="alsaseq_event_data_connect_set_dst">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-connect.c"
             line="67">Set the source to the connection event.</doc>
        <source-position filename="../src/seq/event-data-connect.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="69">A [struct@EventDataConnect].</doc>
            <type name="EventDataConnect" c:type="ALSASeqEventDataConnect*"/>
          </instance-parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="70">A [struct@Addr].</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_src" c:identifier="alsaseq_event_data_connect_set_src">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-connect.c"
             line="41">Set the source to the connection event.</doc>
        <source-position filename="../src/seq/event-data-connect.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="43">A [struct@EventDataConnect].</doc>
            <type name="EventDataConnect" c:type="ALSASeqEventDataConnect*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-connect.c"
                 line="44">A [struct@Addr].</doc>
            <type name="Addr" c:type="const ALSASeqAddr*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataCtl"
            c:type="ALSASeqEventDataCtl"
            glib:type-name="ALSASeqEventDataCtl"
            glib:get-type="alsaseq_event_data_ctl_get_type"
            c:symbol-prefix="event_data_ctl">
      <doc xml:space="preserve"
           filename="../src/seq/event-data-ctl.c"
           line="4">A boxed object to express data of control event.
A [struct@EventDataCtl] is a boxed object to express data of control event. The instance of
object is one of data properties in event.

The object wraps `struct snd_seq_ev_ctrl` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event-data-ctl.h" line="11"/>
      <method name="get_channel"
              c:identifier="alsaseq_event_data_ctl_get_channel">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="28">Get the value of channel for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="30">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="const ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="channel"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="31">The value of channel for the control event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_param" c:identifier="alsaseq_event_data_ctl_get_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="54">Get the parameter for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="56">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="const ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="param"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="57">The parameter for the control event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="alsaseq_event_data_ctl_get_value">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="79">Get the value for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="81">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="const ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="82">The value for the control event.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_channel"
              c:identifier="alsaseq_event_data_ctl_set_channel">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="41">Set the channel for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="43">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="44">The channel for the control event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param" c:identifier="alsaseq_event_data_ctl_set_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="67">Set the parameter for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="69">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="70">The parameter for the control event.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="alsaseq_event_data_ctl_set_value">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-ctl.c"
             line="92">Set the value for the control event.</doc>
        <source-position filename="../src/seq/event-data-ctl.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="94">A [struct@EventDataCtl].</doc>
            <type name="EventDataCtl" c:type="ALSASeqEventDataCtl*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-ctl.c"
                 line="95">The value for the control event.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataNote"
            c:type="ALSASeqEventDataNote"
            glib:type-name="ALSASeqEventDataNote"
            glib:get-type="alsaseq_event_data_note_get_type"
            c:symbol-prefix="event_data_note">
      <doc xml:space="preserve"
           filename="../src/seq/event-data-note.c"
           line="4">A boxed object to express data of note event.
A [struct@EventDataNote] is a boxed object to express data of note event. The instance of
object is one of data properties in event.

The object wraps `struct snd_seq_ev_note` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event-data-note.h" line="11"/>
      <method name="get_channel"
              c:identifier="alsaseq_event_data_note_get_channel">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="28">Get the value of channel in the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="30">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="channel"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="31">The value of channel in the note event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="alsaseq_event_data_note_get_duration">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="131">Get the value of duration in the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="133">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="duration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="134">The value of duratino in the note event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_note" c:identifier="alsaseq_event_data_note_get_note">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="54">Get the value of note in the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="56">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="note"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="57">The value of note in the note event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_off_velocity"
              c:identifier="alsaseq_event_data_note_get_off_velocity">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="105">Get the value of off-velocity in the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="107">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="off_velocity"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="108">The value of off-velocity in the note event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_velocity"
              c:identifier="alsaseq_event_data_note_get_velocity">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="79">Get the value of velocity in the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="81">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="const ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="velocity"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="82">The value of velocity in the note event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_channel"
              c:identifier="alsaseq_event_data_note_set_channel">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="41">Set the value of channel for the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="43">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="44">The value of channel for the note event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duration"
              c:identifier="alsaseq_event_data_note_set_duration">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="144">Set the value of duration for the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="146">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="147">The value of duration for the note event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_note" c:identifier="alsaseq_event_data_note_set_note">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="67">Set the value of note for the note event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="69">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="note" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="70">The value of note for the note event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_off_velocity"
              c:identifier="alsaseq_event_data_note_set_off_velocity">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="118">Set the value of note for the off-velocity event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="120">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="off_velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="121">The value of note for the off-velocity event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_velocity"
              c:identifier="alsaseq_event_data_note_set_velocity">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-note.c"
             line="92">Set the value of note for the velocity event.</doc>
        <source-position filename="../src/seq/event-data-note.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="94">A [struct@EventDataNote].</doc>
            <type name="EventDataNote" c:type="ALSASeqEventDataNote*"/>
          </instance-parameter>
          <parameter name="velocity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-note.c"
                 line="95">The value of note for the velocity event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataQueue"
            c:type="ALSASeqEventDataQueue"
            glib:type-name="ALSASeqEventDataQueue"
            glib:get-type="alsaseq_event_data_queue_get_type"
            c:symbol-prefix="event_data_queue">
      <doc xml:space="preserve"
           filename="../src/seq/event-data-queue.c"
           line="4">A boxed object to express data of queue event.
A [struct@EventDataQueue] is a boxed object to express data of queue event. The instance of
object is one of data properties in event.

The object wraps `struct snd_seq_ev_queue_control` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event-data-queue.h" line="11"/>
      <method name="get_byte_param"
              c:identifier="alsaseq_event_data_queue_get_byte_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="220">Refer to eight bytes as the parameter of queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="222">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="223">The array with eight elements for bytes
        parameter of the queue event.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="8">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_position_param"
              c:identifier="alsaseq_event_data_queue_get_position_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="134">Get the position as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="136">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="position"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="137">The position as param of the queue event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_quadlet_param"
              c:identifier="alsaseq_event_data_queue_get_quadlet_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="192">Refer to two quadlets as the parameter of queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="194">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="quadlets"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="195">The array with two elements for quadlets as
           the parameter of queue event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_id"
              c:identifier="alsaseq_event_data_queue_get_queue_id">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="28">Get the numeric identifier of queue for the event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="30">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="queue_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="31">the numeric identifier of queue for the event.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_real_time_param"
              c:identifier="alsaseq_event_data_queue_get_real_time_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="106">Get the real time as parameter of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="108">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="109">The real time as param of the queue
            event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_skew_param"
              c:identifier="alsaseq_event_data_queue_get_skew_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="160">Refer to numerator and denominator of fraction for skew as the parameter of queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="162">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="skew"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="163">The array with two elements for numerator and
       denominator of fraction for skew.</doc>
            <array zero-terminated="0" c:type="const guint**" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_tick_time_param"
              c:identifier="alsaseq_event_data_queue_get_tick_time_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="80">Get the tick time as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="82">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="tick_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="83">The tick time as param of the queue event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_param"
              c:identifier="alsaseq_event_data_queue_get_value_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="54">Get the value as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="56">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="const ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="57">The value as param of the queue event.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_byte_param"
              c:identifier="alsaseq_event_data_queue_set_byte_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="234">Copy eight bytes from the given buffer as the parameter of queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="236">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="237">The array with eight elements for bytes parameter
        of the queue event.</doc>
            <array zero-terminated="0" c:type="const guint8*" fixed-size="8">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_position_param"
              c:identifier="alsaseq_event_data_queue_set_position_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="147">Set the position as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="149">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="150">the position as param of the queue event.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_quadlet_param"
              c:identifier="alsaseq_event_data_queue_set_quadlet_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="206">Set two quadlets from the given buffer as the parameter of queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="208">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="quadlets" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="209">The array with two elements for quadlets as the
           parameter of queue event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_id"
              c:identifier="alsaseq_event_data_queue_set_queue_id">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="41">Se the numeric identifier of queue for the event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="43">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="44">The numeric identifier of queue for the event.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_real_time_param"
              c:identifier="alsaseq_event_data_queue_set_real_time_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="120">Set the real time as parameter of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="122">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="real_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="123">The real time as param of the queue event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_skew_param"
              c:identifier="alsaseq_event_data_queue_set_skew_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="176">Copy numerator and denominator of fraction for skew from the given buffer as the parameter of
queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="178">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="skew" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="179">The array with two elements for numerator and
       denominator of fraction for skew.</doc>
            <array zero-terminated="0" c:type="const guint*" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_tick_time_param"
              c:identifier="alsaseq_event_data_queue_set_tick_time_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="93">Set the tick time as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="95">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="tick_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="96">The tick time as param of the queue event.</doc>
            <type name="guint" c:type="const guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value_param"
              c:identifier="alsaseq_event_data_queue_set_value_param">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-queue.c"
             line="67">Set the value as param of the queue event.</doc>
        <source-position filename="../src/seq/event-data-queue.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="69">A [struct@EventDataQueue].</doc>
            <type name="EventDataQueue" c:type="ALSASeqEventDataQueue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-queue.c"
                 line="70">The value as param of the queue event.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataResult"
            c:type="ALSASeqEventDataResult"
            glib:type-name="ALSASeqEventDataResult"
            glib:get-type="alsaseq_event_data_result_get_type"
            c:symbol-prefix="event_data_result">
      <doc xml:space="preserve"
           filename="../src/seq/event-data-result.c"
           line="4">A boxed object to express data of result event.
A [struct@EventDataResult] is a boxed object to express data of result event. The instance of
object is one of data properties in event.

The object wraps `struct snd_seq_result` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/event-data-result.h" line="11"/>
      <method name="get_event"
              c:identifier="alsaseq_event_data_result_get_event">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-result.c"
             line="28">Get the type of event in which the data results.</doc>
        <source-position filename="../src/seq/event-data-result.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="30">A [struct@EventDataResult].</doc>
            <type name="EventDataResult"
                  c:type="const ALSASeqEventDataResult*"/>
          </instance-parameter>
          <parameter name="event_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="31">The type of event in which the data results.</doc>
            <type name="EventType" c:type="ALSASeqEventType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_result"
              c:identifier="alsaseq_event_data_result_get_result">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-result.c"
             line="54">Get the status of event.</doc>
        <source-position filename="../src/seq/event-data-result.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="56">A [struct@EventDataResult].</doc>
            <type name="EventDataResult"
                  c:type="const ALSASeqEventDataResult*"/>
          </instance-parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="57">the status of the event.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_event"
              c:identifier="alsaseq_event_data_result_set_event">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-result.c"
             line="41">Set the type of event in which the data results.</doc>
        <source-position filename="../src/seq/event-data-result.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="43">A [struct@EventDataResult].</doc>
            <type name="EventDataResult" c:type="ALSASeqEventDataResult*"/>
          </instance-parameter>
          <parameter name="event_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="44">A #ALSASeqEventType.</doc>
            <type name="EventType" c:type="ALSASeqEventType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_result"
              c:identifier="alsaseq_event_data_result_set_result">
        <doc xml:space="preserve"
             filename="../src/seq/event-data-result.c"
             line="67">Set the status of event.</doc>
        <source-position filename="../src/seq/event-data-result.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="69">A [struct@EventDataResult].</doc>
            <type name="EventDataResult" c:type="ALSASeqEventDataResult*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/event-data-result.c"
                 line="70">The status of event.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="EventError"
                 glib:type-name="ALSASeqEventError"
                 glib:get-type="alsaseq_event_error_get_type"
                 c:type="ALSASeqEventError"
                 glib:error-domain="alsaseq-event-error-quark">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="384">A set of error code for [struct@GLib.Error] with `struct@EventError` domain.</doc>
      <member name="failed"
              value="0"
              c:identifier="ALSASEQ_EVENT_ERROR_FAILED"
              glib:nick="failed"
              glib:name="ALSASEQ_EVENT_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="386">General error due to unspecified reason.</doc>
      </member>
      <member name="invalid_data_type"
              value="1"
              c:identifier="ALSASEQ_EVENT_ERROR_INVALID_DATA_TYPE"
              glib:nick="invalid-data-type"
              glib:name="ALSASEQ_EVENT_ERROR_INVALID_DATA_TYPE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="387">The type of requested data is invalid in the event.</doc>
      </member>
      <member name="invalid_length_mode"
              value="2"
              c:identifier="ALSASEQ_EVENT_ERROR_INVALID_LENGTH_MODE"
              glib:nick="invalid-length-mode"
              glib:name="ALSASEQ_EVENT_ERROR_INVALID_LENGTH_MODE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="388">The mode of length for requested data is invalid in
                                             the event.</doc>
      </member>
      <member name="invalid_tstamp_mode"
              value="3"
              c:identifier="ALSASEQ_EVENT_ERROR_INVALID_TSTAMP_MODE"
              glib:nick="invalid-tstamp-mode"
              glib:name="ALSASEQ_EVENT_ERROR_INVALID_TSTAMP_MODE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="390">The type of time stamp for requested data is is
                                             invalid in the event.</doc>
      </member>
      <function name="quark" c:identifier="alsaseq_event_error_quark">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="117">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code of [enum@EventError]
enumerations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/event.c"
               line="123">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="EventLengthMode"
                 glib:type-name="ALSASeqEventLengthMode"
                 glib:get-type="alsaseq_event_length_mode_get_type"
                 c:type="ALSASeqEventLengthMode">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="279">A set of enumeration for the mode of data length.</doc>
      <member name="fixed"
              value="0"
              c:identifier="ALSASEQ_EVENT_LENGTH_MODE_FIXED"
              glib:nick="fixed"
              glib:name="ALSASEQ_EVENT_LENGTH_MODE_FIXED">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="281">The data is fixed length.</doc>
      </member>
      <member name="variable"
              value="4"
              c:identifier="ALSASEQ_EVENT_LENGTH_MODE_VARIABLE"
              glib:nick="variable"
              glib:name="ALSASEQ_EVENT_LENGTH_MODE_VARIABLE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="282">The data is variable length.</doc>
      </member>
      <member name="pointer"
              value="8"
              c:identifier="ALSASEQ_EVENT_LENGTH_MODE_POINTER"
              glib:nick="pointer"
              glib:name="ALSASEQ_EVENT_LENGTH_MODE_POINTER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="283">The data is a pointer and its length in userspace.</doc>
      </member>
    </enumeration>
    <enumeration name="EventPriorityMode"
                 glib:type-name="ALSASeqEventPriorityMode"
                 glib:get-type="alsaseq_event_priority_mode_get_type"
                 c:type="ALSASeqEventPriorityMode">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="293">A set of enumerations for the mode of priority.</doc>
      <member name="normal"
              value="0"
              c:identifier="ALSASEQ_EVENT_PRIORITY_MODE_NORMAL"
              glib:nick="normal"
              glib:name="ALSASEQ_EVENT_PRIORITY_MODE_NORMAL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="295">For normal priority.</doc>
      </member>
      <member name="high"
              value="16"
              c:identifier="ALSASEQ_EVENT_PRIORITY_MODE_HIGH"
              glib:nick="high"
              glib:name="ALSASEQ_EVENT_PRIORITY_MODE_HIGH">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="296">For high priority.</doc>
      </member>
    </enumeration>
    <enumeration name="EventTimeMode"
                 glib:type-name="ALSASeqEventTimeMode"
                 glib:get-type="alsaseq_event_time_mode_get_type"
                 c:type="ALSASeqEventTimeMode">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="267">A set of enumerations for the mode of time.</doc>
      <member name="abs"
              value="0"
              c:identifier="ALSASEQ_EVENT_TIME_MODE_ABS"
              glib:nick="abs"
              glib:name="ALSASEQ_EVENT_TIME_MODE_ABS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="269">The time is absolute.</doc>
      </member>
      <member name="rel"
              value="2"
              c:identifier="ALSASEQ_EVENT_TIME_MODE_REL"
              glib:nick="rel"
              glib:name="ALSASEQ_EVENT_TIME_MODE_REL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="270">The time is relative.</doc>
      </member>
    </enumeration>
    <enumeration name="EventTstampMode"
                 glib:type-name="ALSASeqEventTstampMode"
                 glib:get-type="alsaseq_event_tstamp_mode_get_type"
                 c:type="ALSASeqEventTstampMode">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="255">A set of enumeration for the mode of time stamp.</doc>
      <member name="tick"
              value="0"
              c:identifier="ALSASEQ_EVENT_TSTAMP_MODE_TICK"
              glib:nick="tick"
              glib:name="ALSASEQ_EVENT_TSTAMP_MODE_TICK">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="257">The time stamp includes tick count.</doc>
      </member>
      <member name="real"
              value="1"
              c:identifier="ALSASEQ_EVENT_TSTAMP_MODE_REAL"
              glib:nick="real"
              glib:name="ALSASEQ_EVENT_TSTAMP_MODE_REAL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="258">The time stamp includes real time.</doc>
      </member>
    </enumeration>
    <enumeration name="EventType"
                 glib:type-name="ALSASeqEventType"
                 glib:get-type="alsaseq_event_type_get_type"
                 c:type="ALSASeqEventType">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="131">The type of event.</doc>
      <member name="system"
              value="0"
              c:identifier="ALSASEQ_EVENT_TYPE_SYSTEM"
              glib:nick="system"
              glib:name="ALSASEQ_EVENT_TYPE_SYSTEM">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="133">For system status.</doc>
      </member>
      <member name="result"
              value="1"
              c:identifier="ALSASEQ_EVENT_TYPE_RESULT"
              glib:nick="result"
              glib:name="ALSASEQ_EVENT_TYPE_RESULT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="134">For result status.</doc>
      </member>
      <member name="note"
              value="5"
              c:identifier="ALSASEQ_EVENT_TYPE_NOTE"
              glib:nick="note"
              glib:name="ALSASEQ_EVENT_TYPE_NOTE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="135">For note message with duration.</doc>
      </member>
      <member name="noteon"
              value="6"
              c:identifier="ALSASEQ_EVENT_TYPE_NOTEON"
              glib:nick="noteon"
              glib:name="ALSASEQ_EVENT_TYPE_NOTEON">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="136">For note on message.</doc>
      </member>
      <member name="noteoff"
              value="7"
              c:identifier="ALSASEQ_EVENT_TYPE_NOTEOFF"
              glib:nick="noteoff"
              glib:name="ALSASEQ_EVENT_TYPE_NOTEOFF">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="137">For note off message.</doc>
      </member>
      <member name="keypress"
              value="8"
              c:identifier="ALSASEQ_EVENT_TYPE_KEYPRESS"
              glib:nick="keypress"
              glib:name="ALSASEQ_EVENT_TYPE_KEYPRESS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="138">For keypress message.</doc>
      </member>
      <member name="controller"
              value="10"
              c:identifier="ALSASEQ_EVENT_TYPE_CONTROLLER"
              glib:nick="controller"
              glib:name="ALSASEQ_EVENT_TYPE_CONTROLLER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="139">For control change message.</doc>
      </member>
      <member name="pgmchange"
              value="11"
              c:identifier="ALSASEQ_EVENT_TYPE_PGMCHANGE"
              glib:nick="pgmchange"
              glib:name="ALSASEQ_EVENT_TYPE_PGMCHANGE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="140">For program change message.</doc>
      </member>
      <member name="chanpress"
              value="12"
              c:identifier="ALSASEQ_EVENT_TYPE_CHANPRESS"
              glib:nick="chanpress"
              glib:name="ALSASEQ_EVENT_TYPE_CHANPRESS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="141">For channel pressure message.</doc>
      </member>
      <member name="pitchbend"
              value="13"
              c:identifier="ALSASEQ_EVENT_TYPE_PITCHBEND"
              glib:nick="pitchbend"
              glib:name="ALSASEQ_EVENT_TYPE_PITCHBEND">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="142">For pitchbend message.</doc>
      </member>
      <member name="control14"
              value="14"
              c:identifier="ALSASEQ_EVENT_TYPE_CONTROL14"
              glib:nick="control14"
              glib:name="ALSASEQ_EVENT_TYPE_CONTROL14">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="143">For control message with 14 bit value.</doc>
      </member>
      <member name="nonregparam"
              value="15"
              c:identifier="ALSASEQ_EVENT_TYPE_NONREGPARAM"
              glib:nick="nonregparam"
              glib:name="ALSASEQ_EVENT_TYPE_NONREGPARAM">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="144">For 14 bit NRPN address and 14 bit unsigned value.</doc>
      </member>
      <member name="regparam"
              value="16"
              c:identifier="ALSASEQ_EVENT_TYPE_REGPARAM"
              glib:nick="regparam"
              glib:name="ALSASEQ_EVENT_TYPE_REGPARAM">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="145">For 14 bit RPN address and 14 bit unsigned value.</doc>
      </member>
      <member name="songpos"
              value="20"
              c:identifier="ALSASEQ_EVENT_TYPE_SONGPOS"
              glib:nick="songpos"
              glib:name="ALSASEQ_EVENT_TYPE_SONGPOS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="146">For song position message with LSB and MSB values.</doc>
      </member>
      <member name="songsel"
              value="21"
              c:identifier="ALSASEQ_EVENT_TYPE_SONGSEL"
              glib:nick="songsel"
              glib:name="ALSASEQ_EVENT_TYPE_SONGSEL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="147">For song select message with numerical ID of song.</doc>
      </member>
      <member name="qframe"
              value="22"
              c:identifier="ALSASEQ_EVENT_TYPE_QFRAME"
              glib:nick="qframe"
              glib:name="ALSASEQ_EVENT_TYPE_QFRAME">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="148">For time code quarter frame message of MIDI.</doc>
      </member>
      <member name="timesign"
              value="23"
              c:identifier="ALSASEQ_EVENT_TYPE_TIMESIGN"
              glib:nick="timesign"
              glib:name="ALSASEQ_EVENT_TYPE_TIMESIGN">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="149">For time signature message of Standard MIDi File.</doc>
      </member>
      <member name="keysign"
              value="24"
              c:identifier="ALSASEQ_EVENT_TYPE_KEYSIGN"
              glib:nick="keysign"
              glib:name="ALSASEQ_EVENT_TYPE_KEYSIGN">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="150">For key signature message of Standard MIDI File.</doc>
      </member>
      <member name="start"
              value="30"
              c:identifier="ALSASEQ_EVENT_TYPE_START"
              glib:nick="start"
              glib:name="ALSASEQ_EVENT_TYPE_START">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="151">For Real Time Start message of MIDI.</doc>
      </member>
      <member name="continue"
              value="31"
              c:identifier="ALSASEQ_EVENT_TYPE_CONTINUE"
              glib:nick="continue"
              glib:name="ALSASEQ_EVENT_TYPE_CONTINUE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="152">For Real Time Continue message of MIDI.</doc>
      </member>
      <member name="stop"
              value="32"
              c:identifier="ALSASEQ_EVENT_TYPE_STOP"
              glib:nick="stop"
              glib:name="ALSASEQ_EVENT_TYPE_STOP">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="153">For Real Time Stop message of MIDI.</doc>
      </member>
      <member name="setpos_tick"
              value="33"
              c:identifier="ALSASEQ_EVENT_TYPE_SETPOS_TICK"
              glib:nick="setpos-tick"
              glib:name="ALSASEQ_EVENT_TYPE_SETPOS_TICK">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="154">For position setting of tick queue.</doc>
      </member>
      <member name="setpos_time"
              value="34"
              c:identifier="ALSASEQ_EVENT_TYPE_SETPOS_TIME"
              glib:nick="setpos-time"
              glib:name="ALSASEQ_EVENT_TYPE_SETPOS_TIME">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="155">For position setting of realtime queue.</doc>
      </member>
      <member name="tempo"
              value="35"
              c:identifier="ALSASEQ_EVENT_TYPE_TEMPO"
              glib:nick="tempo"
              glib:name="ALSASEQ_EVENT_TYPE_TEMPO">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="156">For tempo message of Standard MIDI File.</doc>
      </member>
      <member name="clock"
              value="36"
              c:identifier="ALSASEQ_EVENT_TYPE_CLOCK"
              glib:nick="clock"
              glib:name="ALSASEQ_EVENT_TYPE_CLOCK">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="157">For Real Time Clock message of MIDI.</doc>
      </member>
      <member name="tick"
              value="37"
              c:identifier="ALSASEQ_EVENT_TYPE_TICK"
              glib:nick="tick"
              glib:name="ALSASEQ_EVENT_TYPE_TICK">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="158">For Real Time Tick message of MIDI.</doc>
      </member>
      <member name="queue_skew"
              value="38"
              c:identifier="ALSASEQ_EVENT_TYPE_QUEUE_SKEW"
              glib:nick="queue-skew"
              glib:name="ALSASEQ_EVENT_TYPE_QUEUE_SKEW">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="159">For skew of tempo for queue.</doc>
      </member>
      <member name="tune_request"
              value="40"
              c:identifier="ALSASEQ_EVENT_TYPE_TUNE_REQUEST"
              glib:nick="tune-request"
              glib:name="ALSASEQ_EVENT_TYPE_TUNE_REQUEST">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="160">For requests to tune.</doc>
      </member>
      <member name="reset"
              value="41"
              c:identifier="ALSASEQ_EVENT_TYPE_RESET"
              glib:nick="reset"
              glib:name="ALSASEQ_EVENT_TYPE_RESET">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="161">For reset to power-on state.</doc>
      </member>
      <member name="sensing"
              value="42"
              c:identifier="ALSASEQ_EVENT_TYPE_SENSING"
              glib:nick="sensing"
              glib:name="ALSASEQ_EVENT_TYPE_SENSING">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="162">For active sensing message.</doc>
      </member>
      <member name="echo"
              value="50"
              c:identifier="ALSASEQ_EVENT_TYPE_ECHO"
              glib:nick="echo"
              glib:name="ALSASEQ_EVENT_TYPE_ECHO">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="163">For echo message.</doc>
      </member>
      <member name="oss"
              value="51"
              c:identifier="ALSASEQ_EVENT_TYPE_OSS"
              glib:nick="oss"
              glib:name="ALSASEQ_EVENT_TYPE_OSS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="164">For raw message from Open Sound System.</doc>
      </member>
      <member name="client_start"
              value="60"
              c:identifier="ALSASEQ_EVENT_TYPE_CLIENT_START"
              glib:nick="client-start"
              glib:name="ALSASEQ_EVENT_TYPE_CLIENT_START">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="165">For appear of the port.</doc>
      </member>
      <member name="client_exit"
              value="61"
              c:identifier="ALSASEQ_EVENT_TYPE_CLIENT_EXIT"
              glib:nick="client-exit"
              glib:name="ALSASEQ_EVENT_TYPE_CLIENT_EXIT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="166">For disappear of the client.</doc>
      </member>
      <member name="client_change"
              value="62"
              c:identifier="ALSASEQ_EVENT_TYPE_CLIENT_CHANGE"
              glib:nick="client-change"
              glib:name="ALSASEQ_EVENT_TYPE_CLIENT_CHANGE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="167">For change of information or status of the client.</doc>
      </member>
      <member name="port_start"
              value="63"
              c:identifier="ALSASEQ_EVENT_TYPE_PORT_START"
              glib:nick="port-start"
              glib:name="ALSASEQ_EVENT_TYPE_PORT_START">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="168">For addition of the port.</doc>
      </member>
      <member name="port_exit"
              value="64"
              c:identifier="ALSASEQ_EVENT_TYPE_PORT_EXIT"
              glib:nick="port-exit"
              glib:name="ALSASEQ_EVENT_TYPE_PORT_EXIT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="169">For removal of the port.</doc>
      </member>
      <member name="port_change"
              value="65"
              c:identifier="ALSASEQ_EVENT_TYPE_PORT_CHANGE"
              glib:nick="port-change"
              glib:name="ALSASEQ_EVENT_TYPE_PORT_CHANGE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="170">For change of information or status of the port.</doc>
      </member>
      <member name="port_subscribed"
              value="66"
              c:identifier="ALSASEQ_EVENT_TYPE_PORT_SUBSCRIBED"
              glib:nick="port-subscribed"
              glib:name="ALSASEQ_EVENT_TYPE_PORT_SUBSCRIBED">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="171">For establishment of subscription about the port.</doc>
      </member>
      <member name="port_unsubscribed"
              value="67"
              c:identifier="ALSASEQ_EVENT_TYPE_PORT_UNSUBSCRIBED"
              glib:nick="port-unsubscribed"
              glib:name="ALSASEQ_EVENT_TYPE_PORT_UNSUBSCRIBED">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="172">For break of subscription about the port.</doc>
      </member>
      <member name="usr0"
              value="90"
              c:identifier="ALSASEQ_EVENT_TYPE_USR0"
              glib:nick="usr0"
              glib:name="ALSASEQ_EVENT_TYPE_USR0">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="173">For user-defined message 0.</doc>
      </member>
      <member name="usr1"
              value="91"
              c:identifier="ALSASEQ_EVENT_TYPE_USR1"
              glib:nick="usr1"
              glib:name="ALSASEQ_EVENT_TYPE_USR1">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="174">For user-defined message 1.</doc>
      </member>
      <member name="usr2"
              value="92"
              c:identifier="ALSASEQ_EVENT_TYPE_USR2"
              glib:nick="usr2"
              glib:name="ALSASEQ_EVENT_TYPE_USR2">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="175">For user-defined message 2.</doc>
      </member>
      <member name="usr3"
              value="93"
              c:identifier="ALSASEQ_EVENT_TYPE_USR3"
              glib:nick="usr3"
              glib:name="ALSASEQ_EVENT_TYPE_USR3">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="176">For user-defined message 3.</doc>
      </member>
      <member name="usr4"
              value="94"
              c:identifier="ALSASEQ_EVENT_TYPE_USR4"
              glib:nick="usr4"
              glib:name="ALSASEQ_EVENT_TYPE_USR4">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="177">For user-defined message 4.</doc>
      </member>
      <member name="usr5"
              value="95"
              c:identifier="ALSASEQ_EVENT_TYPE_USR5"
              glib:nick="usr5"
              glib:name="ALSASEQ_EVENT_TYPE_USR5">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="178">For user-defined message 5.</doc>
      </member>
      <member name="usr6"
              value="96"
              c:identifier="ALSASEQ_EVENT_TYPE_USR6"
              glib:nick="usr6"
              glib:name="ALSASEQ_EVENT_TYPE_USR6">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="179">For user-defined message 6.</doc>
      </member>
      <member name="usr7"
              value="97"
              c:identifier="ALSASEQ_EVENT_TYPE_USR7"
              glib:nick="usr7"
              glib:name="ALSASEQ_EVENT_TYPE_USR7">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="180">For user-defined message 7.</doc>
      </member>
      <member name="usr8"
              value="98"
              c:identifier="ALSASEQ_EVENT_TYPE_USR8"
              glib:nick="usr8"
              glib:name="ALSASEQ_EVENT_TYPE_USR8">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="181">For user-defined message 8.</doc>
      </member>
      <member name="usr9"
              value="99"
              c:identifier="ALSASEQ_EVENT_TYPE_USR9"
              glib:nick="usr9"
              glib:name="ALSASEQ_EVENT_TYPE_USR9">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="182">For user-defined message 9.</doc>
      </member>
      <member name="sysex"
              value="130"
              c:identifier="ALSASEQ_EVENT_TYPE_SYSEX"
              glib:nick="sysex"
              glib:name="ALSASEQ_EVENT_TYPE_SYSEX">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="183">For system exclisive message with variable length data.</doc>
      </member>
      <member name="bounce"
              value="131"
              c:identifier="ALSASEQ_EVENT_TYPE_BOUNCE"
              glib:nick="bounce"
              glib:name="ALSASEQ_EVENT_TYPE_BOUNCE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="184">For error message.</doc>
      </member>
      <member name="usr_var0"
              value="135"
              c:identifier="ALSASEQ_EVENT_TYPE_USR_VAR0"
              glib:nick="usr-var0"
              glib:name="ALSASEQ_EVENT_TYPE_USR_VAR0">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="185">For user-defined message 0 with variable length data.</doc>
      </member>
      <member name="usr_var1"
              value="136"
              c:identifier="ALSASEQ_EVENT_TYPE_USR_VAR1"
              glib:nick="usr-var1"
              glib:name="ALSASEQ_EVENT_TYPE_USR_VAR1">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="186">For user-defined message 1 with variable length data.</doc>
      </member>
      <member name="usr_var2"
              value="137"
              c:identifier="ALSASEQ_EVENT_TYPE_USR_VAR2"
              glib:nick="usr-var2"
              glib:name="ALSASEQ_EVENT_TYPE_USR_VAR2">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="187">For user-defined message 2 with variable length data.</doc>
      </member>
      <member name="usr_var3"
              value="138"
              c:identifier="ALSASEQ_EVENT_TYPE_USR_VAR3"
              glib:nick="usr-var3"
              glib:name="ALSASEQ_EVENT_TYPE_USR_VAR3">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="188">For user-defined message 3 with variable length data.</doc>
      </member>
      <member name="usr_var4"
              value="139"
              c:identifier="ALSASEQ_EVENT_TYPE_USR_VAR4"
              glib:nick="usr-var4"
              glib:name="ALSASEQ_EVENT_TYPE_USR_VAR4">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="189">For user-defined message 4 with variable length data.</doc>
      </member>
      <member name="none"
              value="255"
              c:identifier="ALSASEQ_EVENT_TYPE_NONE"
              glib:nick="none"
              glib:name="ALSASEQ_EVENT_TYPE_NONE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="190">For invalid or unknown message.</doc>
      </member>
    </enumeration>
    <bitfield name="FilterAttrFlag"
              glib:type-name="ALSASeqFilterAttrFlag"
              glib:get-type="alsaseq_filter_attr_flag_get_type"
              c:type="ALSASeqFilterAttrFlag">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="49">A set of flags for attributes of event filter.</doc>
      <member name="broadcast"
              value="1"
              c:identifier="ALSASEQ_FILTER_ATTR_FLAG_BROADCAST"
              glib:nick="broadcast"
              glib:name="ALSASEQ_FILTER_ATTR_FLAG_BROADCAST">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="51">The client is going to handle broadcast events.</doc>
      </member>
      <member name="multicast"
              value="2"
              c:identifier="ALSASEQ_FILTER_ATTR_FLAG_MULTICAST"
              glib:nick="multicast"
              glib:name="ALSASEQ_FILTER_ATTR_FLAG_MULTICAST">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="52">The client is going to handle multicast events.</doc>
      </member>
      <member name="bounce"
              value="4"
              c:identifier="ALSASEQ_FILTER_ATTR_FLAG_BOUNCE"
              glib:nick="bounce"
              glib:name="ALSASEQ_FILTER_ATTR_FLAG_BOUNCE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="53">The client is going to handle bounce events.</doc>
      </member>
    </bitfield>
    <bitfield name="PortAttrFlag"
              glib:type-name="ALSASeqPortAttrFlag"
              glib:get-type="alsaseq_port_attr_flag_get_type"
              c:type="ALSASeqPortAttrFlag">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="98">A set of flags for the attributes of port.</doc>
      <member name="specific"
              value="1"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_SPECIFIC"
              glib:nick="specific"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_SPECIFIC">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="100">For hardware specific messages.</doc>
      </member>
      <member name="midi_generic"
              value="2"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_GENERIC"
              glib:nick="midi-generic"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_GENERIC">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="101">For generic MIDI messages.</doc>
      </member>
      <member name="midi_gm"
              value="4"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_GM"
              glib:nick="midi-gm"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_GM">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="102">For General MIDI comatible messages.</doc>
      </member>
      <member name="midi_gs"
              value="8"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_GS"
              glib:nick="midi-gs"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_GS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="103">For GS compatible messages.</doc>
      </member>
      <member name="midi_xg"
              value="16"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_XG"
              glib:nick="midi-xg"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_XG">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="104">For XG compatible messages.</doc>
      </member>
      <member name="midi_mt32"
              value="32"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_MT32"
              glib:nick="midi-mt32"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_MT32">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="105">For MT-32 compatible messages.</doc>
      </member>
      <member name="midi_gm2"
              value="64"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_MIDI_GM2"
              glib:nick="midi-gm2"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_MIDI_GM2">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="106">For General MIDI 2 compatible messages.</doc>
      </member>
      <member name="hardware"
              value="65536"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_HARDWARE"
              glib:nick="hardware"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_HARDWARE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="107">The port on any hardware.</doc>
      </member>
      <member name="software"
              value="131072"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_SOFTWARE"
              glib:nick="software"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_SOFTWARE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="108">The port on any software.</doc>
      </member>
      <member name="synthesizer"
              value="262144"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_SYNTHESIZER"
              glib:nick="synthesizer"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_SYNTHESIZER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="109">The port to generate sound.</doc>
      </member>
      <member name="port"
              value="524288"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_PORT"
              glib:nick="port"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_PORT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="110">The port connects to the other devices.</doc>
      </member>
      <member name="application"
              value="1048576"
              c:identifier="ALSASEQ_PORT_ATTR_FLAG_APPLICATION"
              glib:nick="application"
              glib:name="ALSASEQ_PORT_ATTR_FLAG_APPLICATION">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="111">The port on any application such as sequencer and editor.</doc>
      </member>
    </bitfield>
    <bitfield name="PortCapFlag"
              glib:type-name="ALSASeqPortCapFlag"
              glib:get-type="alsaseq_port_cap_flag_get_type"
              c:type="ALSASeqPortCapFlag">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="77">A set of flags for the capabilities of port.</doc>
      <member name="read"
              value="1"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_READ"
              glib:nick="read"
              glib:name="ALSASEQ_PORT_CAP_FLAG_READ">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="79">Any message can be read from the port.</doc>
      </member>
      <member name="write"
              value="2"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_WRITE"
              glib:nick="write"
              glib:name="ALSASEQ_PORT_CAP_FLAG_WRITE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="80">Any message can be written to the port.</doc>
      </member>
      <member name="duplex"
              value="16"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_DUPLEX"
              glib:nick="duplex"
              glib:name="ALSASEQ_PORT_CAP_FLAG_DUPLEX">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="81">Any messages can be read from/written to the port simultaneously.</doc>
      </member>
      <member name="subs_read"
              value="32"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_SUBS_READ"
              glib:nick="subs-read"
              glib:name="ALSASEQ_PORT_CAP_FLAG_SUBS_READ">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="82">The data of subscription can be read from the port.</doc>
      </member>
      <member name="subs_write"
              value="64"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_SUBS_WRITE"
              glib:nick="subs-write"
              glib:name="ALSASEQ_PORT_CAP_FLAG_SUBS_WRITE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="83">The data of subscription can be written to the port.</doc>
      </member>
      <member name="no_export"
              value="128"
              c:identifier="ALSASEQ_PORT_CAP_FLAG_NO_EXPORT"
              glib:nick="no-export"
              glib:name="ALSASEQ_PORT_CAP_FLAG_NO_EXPORT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="84">Only owners of the port can maintain subscription.</doc>
      </member>
    </bitfield>
    <class name="PortInfo"
           c:symbol-prefix="port_info"
           c:type="ALSASeqPortInfo"
           parent="GObject.Object"
           glib:type-name="ALSASeqPortInfo"
           glib:get-type="alsaseq_port_info_get_type"
           glib:type-struct="PortInfoClass">
      <doc xml:space="preserve"
           filename="../src/seq/port-info.c"
           line="4">A GObject-derived object to express information of port.
A [class@PortInfo] is a GObject-derived object to express information of port. The call of
[func@get_port_info] returns the instance of object. The call of [method@UserClient.create_port]
and [method@UserClient.update_port] requires the instance of object.

The object wraps `struct snd_port_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/port-info.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_port_info_new">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="335">Allocate and return an instance of [class@PortInfo].</doc>
        <source-position filename="../src/seq/port-info.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/port-info.c"
               line="340">An instance of [class@PortInfo].</doc>
          <type name="PortInfo" c:type="ALSASeqPortInfo*"/>
        </return-value>
      </constructor>
      <property name="addr"
                version="0.3."
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="154">The address of port.</doc>
        <type name="Addr"/>
      </property>
      <property name="attrs"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="194">The attributes of port, a set of [flags@PortAttrFlag].</doc>
        <type name="PortAttrFlag"/>
      </property>
      <property name="caps"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="180">The capabilities of port, a set of [flags@PortCapFlag].</doc>
        <type name="PortCapFlag"/>
      </property>
      <property name="midi-channels"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="208">The number of channels per MIDI port.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="midi-voices"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="222">The number of voices per MIDI port.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="name"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="167">The name of port.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="queue-id"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="308">The numeric ID of queue to update time stamp when [property@PortInfo:tstamp-overwrite] is
set to True. One of [enum@SpecificQueueId] is available as well.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="read-users" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="250">The current number of subscribers to read.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="synth-voices"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="236">The number of voices per synth port.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tstamp-mode"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="292">The mode of time stamp. This is effective when the [property@PortInfo:tstamp-overwrite] is
enabled.</doc>
        <type name="EventTstampMode"/>
      </property>
      <property name="tstamp-overwrite"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="278">The mode whether to overwrite time stamp for event when the event is delivered from the port.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="write-users" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/port-info.c"
             line="264">The current number of subscribers to write.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="PortInfoClass"
            c:type="ALSASeqPortInfoClass"
            glib:is-gtype-struct-for="PortInfo">
      <source-position filename="../src/seq/port-info.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="QuerySubscribeType"
                 glib:type-name="ALSASeqQuerySubscribeType"
                 glib:get-type="alsaseq_query_subscribe_type_get_type"
                 c:type="ALSASeqQuerySubscribeType">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="315">A set of enumerations for the type to query subscription.</doc>
      <member name="read"
              value="0"
              c:identifier="ALSASEQ_QUERY_SUBSCRIBE_TYPE_READ"
              glib:nick="read"
              glib:name="ALSASEQ_QUERY_SUBSCRIBE_TYPE_READ">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="317">To query subscribers to read from the port.</doc>
      </member>
      <member name="write"
              value="1"
              c:identifier="ALSASEQ_QUERY_SUBSCRIBE_TYPE_WRITE"
              glib:nick="write"
              glib:name="ALSASEQ_QUERY_SUBSCRIBE_TYPE_WRITE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="318">To query subscribers to write to the port.</doc>
      </member>
    </enumeration>
    <class name="QueueInfo"
           c:symbol-prefix="queue_info"
           c:type="ALSASeqQueueInfo"
           parent="GObject.Object"
           glib:type-name="ALSASeqQueueInfo"
           glib:get-type="alsaseq_queue_info_get_type"
           glib:type-struct="QueueInfoClass">
      <doc xml:space="preserve"
           filename="../src/seq/queue-info.c"
           line="4">A GObject-derived object to express information of queue.
A [class@QueueInfo] is a GObject-derived object to express information of queue. The call of
[func@get_queue_info_by_id] and [func@get_queue_info_by_name] returns the instance of object.
The call of [method@UserClient.create_queue] and [method@UserClient.update_queue] requires the
instance of object.

The object wraps `struct snd_seq_queue_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/queue-info.h" line="14"/>
      <constructor name="new" c:identifier="alsaseq_queue_info_new">
        <doc xml:space="preserve"
             filename="../src/seq/queue-info.c"
             line="146">Allocate and return an instance of [class@QueueInfo].</doc>
        <source-position filename="../src/seq/queue-info.h" line="16"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/queue-info.c"
               line="151">An instance of [class@QueueInfo].</doc>
          <type name="QueueInfo" c:type="ALSASeqQueueInfo*"/>
        </return-value>
      </constructor>
      <property name="client-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-info.c"
             line="101">The numeric ID of client which owns the queue, including one of ALSASeqSpecificClientId.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="locked" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-info.c"
             line="114">Whether to be locked by the other queues or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-info.c"
             line="125">The name of queue.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="queue-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-info.c"
             line="88">The numeric ID of queue. An entry of ALSASeqSpecificQueueId is available as well.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueueInfoClass"
            c:type="ALSASeqQueueInfoClass"
            glib:is-gtype-struct-for="QueueInfo">
      <source-position filename="../src/seq/queue-info.h" line="14"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="QueueStatus"
           c:symbol-prefix="queue_status"
           c:type="ALSASeqQueueStatus"
           parent="GObject.Object"
           glib:type-name="ALSASeqQueueStatus"
           glib:get-type="alsaseq_queue_status_get_type"
           glib:type-struct="QueueStatusClass">
      <doc xml:space="preserve"
           filename="../src/seq/queue-status.c"
           line="4">A GObject-derived object to express status of queue.
A [class@QueueStatus] is a GObject-derived object to express status of queue. The call of
[func@get_queue_status] returns the instance of object.

The object wraps `struct snd_seq_queue_status` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/queue-status.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_queue_status_new">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="101">Allocate and returns an instance of [class@QueueStatus].</doc>
        <source-position filename="../src/seq/queue-status.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/queue-status.c"
               line="106">An instance of [class@QueueStatus].</doc>
          <type name="QueueStatus" c:type="ALSASeqQueueStatus*"/>
        </return-value>
      </constructor>
      <method name="get_real_time"
              c:identifier="alsaseq_queue_status_get_real_time">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="133">Get time as wall-clock time.</doc>
        <source-position filename="../src/seq/queue-status.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-status.c"
                 line="135">A [class@QueueStatus].</doc>
            <type name="QueueStatus" c:type="ALSASeqQueueStatus*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-status.c"
                 line="136">The array with two elements for sec part
            and nsec part of real time.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_tick_time"
              c:identifier="alsaseq_queue_status_get_tick_time">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="113">Get time as MIDI ticks.</doc>
        <source-position filename="../src/seq/queue-status.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-status.c"
                 line="115">A [class@QueueStatus].</doc>
            <type name="QueueStatus" c:type="ALSASeqQueueStatus*"/>
          </instance-parameter>
          <parameter name="tick_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-status.c"
                 line="116">The value of MIDI ticks.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <property name="event-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="68">The number of available events in the queue.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="queue-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="55">The numeric ID of queue. An entry of ALSASeqSpecificQueueId is available as well.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="running" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-status.c"
             line="80">Whether the queue is running or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueueStatusClass"
            c:type="ALSASeqQueueStatusClass"
            glib:is-gtype-struct-for="QueueStatus">
      <source-position filename="../src/seq/queue-status.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="QueueTempo"
           c:symbol-prefix="queue_tempo"
           c:type="ALSASeqQueueTempo"
           parent="GObject.Object"
           glib:type-name="ALSASeqQueueTempo"
           glib:get-type="alsaseq_queue_tempo_get_type"
           glib:type-struct="QueueTempoClass">
      <doc xml:space="preserve"
           filename="../src/seq/queue-tempo.c"
           line="4">A GObject-derived object to express tempo of queue.
A [class@QueueTempo] is a GObject-derived object to express tempo of queue.

The object wraps `struct snd_seq_queue_tempo` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/queue-tempo.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_queue_tempo_new">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="125">Allocate and return an instance of [class@QueueTempo].</doc>
        <source-position filename="../src/seq/queue-tempo.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/queue-tempo.c"
               line="130">An instance of [class@QueueTempo].</doc>
          <type name="QueueTempo" c:type="ALSASeqQueueTempo*"/>
        </return-value>
      </constructor>
      <method name="get_skew" c:identifier="alsaseq_queue_tempo_get_skew">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="137">Refer to numerator and denominator of fraction for skew.</doc>
        <source-position filename="../src/seq/queue-tempo.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-tempo.c"
                 line="139">A [class@QueueTempo].</doc>
            <type name="QueueTempo" c:type="ALSASeqQueueTempo*"/>
          </instance-parameter>
          <parameter name="skew"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-tempo.c"
                 line="140">The array with two elements for numerator and
       denominator of fraction for skew.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_skew" c:identifier="alsaseq_queue_tempo_set_skew">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="160">Copy numerator and denominator of fraction for skew.</doc>
        <source-position filename="../src/seq/queue-tempo.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-tempo.c"
                 line="162">A [class@QueueTempo].</doc>
            <type name="QueueTempo" c:type="ALSASeqQueueTempo*"/>
          </instance-parameter>
          <parameter name="skew" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/queue-tempo.c"
                 line="163">The array with two elements for numerator and
       denominator of fraction for skew.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="queue-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="78">The numeric ID of queue. An entry of ALSASeqSpecificClientId is available as well,</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="resolution" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="103">The number of pulse per quarter as resolution.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tempo" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-tempo.c"
             line="91">The number of micro second per tick as tempo.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueueTempoClass"
            c:type="ALSASeqQueueTempoClass"
            glib:is-gtype-struct-for="QueueTempo">
      <source-position filename="../src/seq/queue-tempo.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="QueueTimerAlsa"
           c:symbol-prefix="queue_timer_alsa"
           c:type="ALSASeqQueueTimerAlsa"
           parent="GObject.Object"
           glib:type-name="ALSASeqQueueTimerAlsa"
           glib:get-type="alsaseq_queue_timer_alsa_get_type"
           glib:type-struct="QueueTimerAlsaClass">
      <doc xml:space="preserve"
           filename="../src/seq/queue-timer-alsa.c"
           line="4">An object to express queue timer specific to instance in ALSA Timer.
A [class@GObject.Object] derived object class for queue timer specific to any instance in ALSA
Timer.</doc>
      <source-position filename="../src/seq/queue-timer-alsa.h" line="16"/>
      <implements name="QueueTimerCommon"/>
      <constructor name="new" c:identifier="alsaseq_queue_timer_alsa_new">
        <doc xml:space="preserve"
             filename="../src/seq/queue-timer-alsa.c"
             line="117">Allocate and return an instance of [class@QueueTimerAlsa].</doc>
        <source-position filename="../src/seq/queue-timer-alsa.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/queue-timer-alsa.c"
               line="122">An instance of [class@QueueTimerAlsa].</doc>
          <type name="QueueTimerAlsa" c:type="ALSASeqQueueTimerAlsa*"/>
        </return-value>
      </constructor>
      <property name="device-id"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-timer-alsa.c"
             line="80">The identifier of associated timer instance in ALSA Timer.</doc>
        <type name="ALSATimer.DeviceId"/>
      </property>
      <property name="resolution-ticks"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-timer-alsa.c"
             line="93">The number of ticks as resolution of timer.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="QueueTimerAlsaClass"
            c:type="ALSASeqQueueTimerAlsaClass"
            glib:is-gtype-struct-for="QueueTimerAlsa">
      <source-position filename="../src/seq/queue-timer-alsa.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="QueueTimerCommon"
               c:symbol-prefix="queue_timer_common"
               c:type="ALSASeqQueueTimerCommon"
               version="0.3."
               glib:type-name="ALSASeqQueueTimerCommon"
               glib:get-type="alsaseq_queue_timer_common_get_type"
               glib:type-struct="QueueTimerCommonInterface">
      <doc xml:space="preserve"
           filename="../src/seq/queue-timer-common.c"
           line="4">An interface to express common features of queue timer.
A [iface@QueueTimerCommon] should be implemented by any type of queue timer.

The object wraps `struct snd_seq_queue_timer` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/queue-timer-common.h" line="16"/>
      <property name="queue-id" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-timer-common.c"
             line="21">The numeric identifier of queue. An entry of [enum@SpecificClientId] is available as well.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="timer-type" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/queue-timer-common.c"
             line="34">The type of timer for the queue, one of [enum@QueueTimerType].</doc>
        <type name="QueueTimerType"/>
      </property>
    </interface>
    <record name="QueueTimerCommonInterface"
            c:type="ALSASeqQueueTimerCommonInterface"
            glib:is-gtype-struct-for="QueueTimerCommon">
      <source-position filename="../src/seq/queue-timer-common.h" line="16"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <enumeration name="QueueTimerType"
                 glib:type-name="ALSASeqQueueTimerType"
                 glib:get-type="alsaseq_queue_timer_type_get_type"
                 c:type="ALSASeqQueueTimerType">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="327">A set of enumerations for the type of timer source for the queue.</doc>
      <member name="alsa"
              value="0"
              c:identifier="ALSASEQ_QUEUE_TIMER_TYPE_ALSA"
              glib:nick="alsa"
              glib:name="ALSASEQ_QUEUE_TIMER_TYPE_ALSA">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="329">Any ALSA timer device.</doc>
      </member>
    </enumeration>
    <class name="RemoveFilter"
           c:symbol-prefix="remove_filter"
           c:type="ALSASeqRemoveFilter"
           parent="GObject.Object"
           glib:type-name="ALSASeqRemoveFilter"
           glib:get-type="alsaseq_remove_filter_get_type"
           glib:type-struct="RemoveFilterClass">
      <doc xml:space="preserve"
           filename="../src/seq/remove-filter.c"
           line="6">An object to express filter to remove scheduled event in queue.
A [class@RemoveFilter] is a GObject-derived object to express filter to remove scheduled event in
queue. The call of [method@UserClient.remove_events] requires the instance of object.

The object wraps `struct snd_seq_remove_events` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/remove-filter.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_remove_filter_new">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="202">Allocate and return an instance of [class@RemoveFilter].</doc>
        <source-position filename="../src/seq/remove-filter.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/remove-filter.c"
               line="207">An instance of [class@RemoveFilter].</doc>
          <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
        </return-value>
      </constructor>
      <method name="get_real_time"
              c:identifier="alsaseq_remove_filter_get_real_time">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="260">Refer to doublet of real time in internal storage. The call works expectedly as long as
[property@RemoveFilter:flags] doesn't contain [flags@RemoveFilterFlag].TICK. This is evaluated
with [flags@RemoveFilterFlag].TIME_BEFORE and [flags@RemoveFilterFlag].TIME_AFTER at call of
[method@UserClient.remove_events].</doc>
        <source-position filename="../src/seq/remove-filter.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="262">A [class@RemoveFilter].</doc>
            <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="263">The real time data of event.</doc>
            <array zero-terminated="0" c:type="const guint32**" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_tick_time"
              c:identifier="alsaseq_remove_filter_get_tick_time">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="214">Refer to tick count in internal storage. The call works expectedly as long as
[property@RemoveFilter:flags] contains [flags@RemoveFilterFlag].TICK. This is evaluated with
[flags@RemoveFilterFlag].TIME_BEFORE and [flags@RemoveFilterFlag].TIME_AFTER at call of
[method@UserClient.remove_events].</doc>
        <source-position filename="../src/seq/remove-filter.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="216">A [class@RemoveFilter].</doc>
            <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
          </instance-parameter>
          <parameter name="tick_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="217">The count of tick.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_real_time"
              c:identifier="alsaseq_remove_filter_set_real_time">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="283">Copy doublet of real time into internal storage. The call works expectedly as long as
[property@RemoveFilter:flags] doesn't contain [flags@RemoveFilterFlag].TICK. This is evaluated
with [flags@RemoveFilterFlag].TIME_BEFORE and [flags@RemoveFilterFlag].TIME_AFTER at call of
[method@UserClient.remove_events].</doc>
        <source-position filename="../src/seq/remove-filter.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="285">A [class@RemoveFilter].</doc>
            <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
          </instance-parameter>
          <parameter name="real_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="286">The real time data of event.</doc>
            <array zero-terminated="0" c:type="const guint32*" fixed-size="2">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_tick_time"
              c:identifier="alsaseq_remove_filter_set_tick_time">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="237">Copy tick count into internal storage. The call works expectedly as long as
[property@RemoveFilter:flags] contains [flags@RemoveFilterFlag].TICK. This is evaluated with
[flags@RemoveFilterFlag].TIME_BEFORE and [flags@RemoveFilterFlag].TIME_AFTER at call of
[method@UserClient.remove_events].</doc>
        <source-position filename="../src/seq/remove-filter.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="239">A [class@RemoveFilter].</doc>
            <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
          </instance-parameter>
          <parameter name="tick_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/remove-filter.c"
                 line="240">The count of tick.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="channel"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="148">The channel of event as filter condition. This is evaluated with
[flags@RemoveFilterFlag].DEST_CHANNEL at call of [method@UserClient.remove_events].</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="destination"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="134">The destionation of event as filter condition. This is evaluated with
[flags@RemoveFilterFlag].DEST at call of [method@UserClient.remove_events].</doc>
        <type name="Addr"/>
      </property>
      <property name="event-type"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="163">The type of event as filter condition. This is evaluated with
[flags@RemoveFilterFlag].EVENT_TYPE at call of [method@UserClient.remove_events].</doc>
        <type name="EventType"/>
      </property>
      <property name="flags"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="104">The set of flags to filter events. They decide how to evaluate included data at call of
[method@UserClient.remove_events].</doc>
        <type name="RemoveFilterFlag"/>
      </property>
      <property name="queue-id"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="119">The numeric identifier of queue as filter condition. This is always evaluated at call of
[method@UserClient.remove_events].</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="tag"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/remove-filter.c"
             line="178">The tag of event as filter condition. This is evaluated with
[flags@RemoveFilterFlag].TAG_MATCH at call of [method@UserClient.remove_events].</doc>
        <type name="gchar" c:type="gchar"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="RemoveFilterClass"
            c:type="ALSASeqRemoveFilterClass"
            glib:is-gtype-struct-for="RemoveFilter">
      <source-position filename="../src/seq/remove-filter.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="RemoveFilterFlag"
              glib:type-name="ALSASeqRemoveFilterFlag"
              glib:get-type="alsaseq_remove_filter_flag_get_type"
              c:type="ALSASeqRemoveFilterFlag">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="337">A set of flags of the mode of removal event.</doc>
      <member name="input"
              value="1"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_INPUT"
              glib:nick="input"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_INPUT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="339">Flush events in input queues.</doc>
      </member>
      <member name="output"
              value="2"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_OUTPUT"
              glib:nick="output"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_OUTPUT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="340">Flush events in output queues.</doc>
      </member>
      <member name="dest"
              value="4"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_DEST"
              glib:nick="dest"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_DEST">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="341">Flush events towards the given destination.</doc>
      </member>
      <member name="dest_channel"
              value="8"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_DEST_CHANNEL"
              glib:nick="dest-channel"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_DEST_CHANNEL">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="342">Flush events with the given channel, available for
                                             NOTE, NOTEON, NOTEOFF, KEYPRESS, CONTROLLER, PGMCHANGE, CHANPRESS,
                                             PITCHBEND, CONTROL14, NONREGPARAM, REGPARAM.</doc>
      </member>
      <member name="time_before"
              value="16"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_TIME_BEFORE"
              glib:nick="time-before"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_TIME_BEFORE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="345">Flush events scheduled before the given time.</doc>
      </member>
      <member name="time_after"
              value="32"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_TIME_AFTER"
              glib:nick="time-after"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_TIME_AFTER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="346">Flush events scheduled after the given time.</doc>
      </member>
      <member name="time_tick"
              value="64"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_TIME_TICK"
              glib:nick="time-tick"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_TIME_TICK">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="347">The given time is for tick time.</doc>
      </member>
      <member name="event_type"
              value="128"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_EVENT_TYPE"
              glib:nick="event-type"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_EVENT_TYPE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="348">Flush events with the type.</doc>
      </member>
      <member name="ignore_off"
              value="256"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_IGNORE_OFF"
              glib:nick="ignore-off"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_IGNORE_OFF">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="349">Flush events except for NOTEOFF.</doc>
      </member>
      <member name="tag_match"
              value="512"
              c:identifier="ALSASEQ_REMOVE_FILTER_FLAG_TAG_MATCH"
              glib:nick="tag-match"
              glib:name="ALSASEQ_REMOVE_FILTER_FLAG_TAG_MATCH">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="350">Flush events with the given tag.</doc>
      </member>
    </bitfield>
    <enumeration name="SpecificAddress"
                 glib:type-name="ALSASeqSpecificAddress"
                 glib:get-type="alsaseq_specific_address_get_type"
                 c:type="ALSASeqSpecificAddress">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="7">A set of enumerations for specific addresses.</doc>
      <member name="unknown"
              value="253"
              c:identifier="ALSASEQ_SPECIFIC_ADDRESS_UNKNOWN"
              glib:nick="unknown"
              glib:name="ALSASEQ_SPECIFIC_ADDRESS_UNKNOWN">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="9">The address for unknown client/port/queue.</doc>
      </member>
      <member name="subscribers"
              value="254"
              c:identifier="ALSASEQ_SPECIFIC_ADDRESS_SUBSCRIBERS"
              glib:nick="subscribers"
              glib:name="ALSASEQ_SPECIFIC_ADDRESS_SUBSCRIBERS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="10">The client/port/queue address towards subscribers.</doc>
      </member>
      <member name="broadcast"
              value="255"
              c:identifier="ALSASEQ_SPECIFIC_ADDRESS_BROADCAST"
              glib:nick="broadcast"
              glib:name="ALSASEQ_SPECIFIC_ADDRESS_BROADCAST">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="11">The client/port/queue address to broadcast.</doc>
      </member>
    </enumeration>
    <enumeration name="SpecificClientId"
                 glib:type-name="ALSASeqSpecificClientId"
                 glib:get-type="alsaseq_specific_client_id_get_type"
                 c:type="ALSASeqSpecificClientId">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="21">A set of enumerations for the numerical IDs of specific clients.</doc>
      <member name="system"
              value="0"
              c:identifier="ALSASEQ_SPECIFIC_CLIENT_ID_SYSTEM"
              glib:nick="system"
              glib:name="ALSASEQ_SPECIFIC_CLIENT_ID_SYSTEM">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="23">The numerical ID to system client.</doc>
      </member>
      <member name="dummy"
              value="14"
              c:identifier="ALSASEQ_SPECIFIC_CLIENT_ID_DUMMY"
              glib:nick="dummy"
              glib:name="ALSASEQ_SPECIFIC_CLIENT_ID_DUMMY">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="24">The numerical ID to dummy client.</doc>
      </member>
      <member name="oss"
              value="15"
              c:identifier="ALSASEQ_SPECIFIC_CLIENT_ID_OSS"
              glib:nick="oss"
              glib:name="ALSASEQ_SPECIFIC_CLIENT_ID_OSS">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="25">The numerical ID to OSS client.</doc>
      </member>
    </enumeration>
    <enumeration name="SpecificPortId"
                 glib:type-name="ALSASeqSpecificPortId"
                 glib:get-type="alsaseq_specific_port_id_get_type"
                 c:type="ALSASeqSpecificPortId">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="64">A set of enumerations for the numerical IDs of port for specific purpose.</doc>
      <member name="timer"
              value="0"
              c:identifier="ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_TIMER"
              glib:nick="timer"
              glib:name="ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_TIMER">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="66">The numerical ID of port for system timer.</doc>
      </member>
      <member name="announce"
              value="1"
              c:identifier="ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_ANNOUNCE"
              glib:nick="announce"
              glib:name="ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_ANNOUNCE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="67">The numerical ID of port for system announce.</doc>
      </member>
    </enumeration>
    <enumeration name="SpecificQueueId"
                 glib:type-name="ALSASeqSpecificQueueId"
                 glib:get-type="alsaseq_specific_queue_id_get_type"
                 c:type="ALSASeqSpecificQueueId">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="305">A set of enumerations for the numerical IDs of queue for specific purpose.</doc>
      <member name="direct"
              value="253"
              c:identifier="ALSASEQ_SPECIFIC_QUEUE_ID_DIRECT"
              glib:nick="direct"
              glib:name="ALSASEQ_SPECIFIC_QUEUE_ID_DIRECT">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="307">The message is delivered immediately, instead of being queued.</doc>
      </member>
    </enumeration>
    <class name="SubscribeData"
           c:symbol-prefix="subscribe_data"
           c:type="ALSASeqSubscribeData"
           parent="GObject.Object"
           glib:type-name="ALSASeqSubscribeData"
           glib:get-type="alsaseq_subscribe_data_get_type"
           glib:type-struct="SubscribeDataClass">
      <doc xml:space="preserve"
           filename="../src/seq/subscribe-data.c"
           line="4">A GObject-derived object to express data for subscription between ports.
A [class@SubscribeData] is a GObject-derived object to express data for subscription between
a pair of ports. The call of [func@get_subscription_list] returns the list of data. The call of
[method@UserClient.operate_subscription] requires the instance of object.

The object wraps `struct snd_seq_port_subscribe` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/subscribe-data.h" line="15"/>
      <constructor name="new" c:identifier="alsaseq_subscribe_data_new">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="215">Allocates and returns the instance of [class@SubscribeData].</doc>
        <source-position filename="../src/seq/subscribe-data.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/subscribe-data.c"
               line="220">A [class@SubscribeData].</doc>
          <type name="SubscribeData" c:type="ALSASeqSubscribeData*"/>
        </return-value>
      </constructor>
      <property name="dest"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="135">The address of destination.</doc>
        <type name="Addr"/>
      </property>
      <property name="has-tstamp"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="161">Any event for the subscription has time stamp,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-exclusive"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="148">Whether the subscription can be changed by originator only,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="queue-id"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="189">The numeric ID of queue to deliver. One of ALSASeqSpecificQueueId is available as well as
any numeric value.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="sender"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="122">The address of sender.</doc>
        <type name="Addr"/>
      </property>
      <property name="tstamp-mode"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/subscribe-data.c"
             line="174">The type of time stamp. This is effective when the has-tstamp property enabled.</doc>
        <type name="EventTstampMode"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SubscribeDataClass"
            c:type="ALSASeqSubscribeDataClass"
            glib:is-gtype-struct-for="SubscribeData">
      <source-position filename="../src/seq/subscribe-data.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SystemInfo"
           c:symbol-prefix="system_info"
           c:type="ALSASeqSystemInfo"
           parent="GObject.Object"
           glib:type-name="ALSASeqSystemInfo"
           glib:get-type="alsaseq_system_info_get_type"
           glib:type-struct="SystemInfoClass">
      <doc xml:space="preserve"
           filename="../src/seq/system-info.c"
           line="4">A GObject-derived object to express information of ALSA Sequencer.
A [class@SystemInfo] is a GObject-derived object to express information of ALSA Sequencer. The
call of [func@get_system_info] returns the instance of object.

The object wraps `struct snd_seq_system_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/seq/system-info.h" line="15"/>
      <property name="current-client-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="115">The current number of clients.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="current-queue-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="127">The current number of queues.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="maximum-channel-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="103">The maximum number of channels.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="maximum-client-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="79">The maximum number of clients.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="maximum-port-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="91">The maximum number of ports.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="maximum-queue-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/system-info.c"
             line="67">The maximum number of available queues.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SystemInfoClass"
            c:type="ALSASeqSystemInfoClass"
            glib:is-gtype-struct-for="SystemInfo">
      <source-position filename="../src/seq/system-info.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UserClient"
           c:symbol-prefix="user_client"
           c:type="ALSASeqUserClient"
           parent="GObject.Object"
           glib:type-name="ALSASeqUserClient"
           glib:get-type="alsaseq_user_client_get_type"
           glib:type-struct="UserClientClass">
      <doc xml:space="preserve"
           filename="../src/seq/user-client.c"
           line="13">A GObject-derived object to express user client.
A [class@UserClient] is a GObject-derived object to express user client. Any port can be added
to the client as destination or source for any event.

When the call of [method@UserClient.open] the object maintain file descriptor till object
destruction. The call of [method@UserClient.create_source] returns the instance of
[struct@GLib.Source]. Once attached to the [struct@GLib.Source],
[struct@GLib.MainContext] / [struct@GLib.MainLoop] is available as event dispatcher. The
[signal@UserClient::handle-event] signal is emitted in the event dispatcher to notify the
event. The call of [method@UserClient.schedule_event] schedules event with given parameters.</doc>
      <source-position filename="../src/seq/user-client.h" line="29"/>
      <constructor name="new" c:identifier="alsaseq_user_client_new">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="155">Allocate and return an instance of [class@UserClient].</doc>
        <source-position filename="../src/seq/user-client.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="160">An instance of [class@UserClient].</doc>
          <type name="UserClient" c:type="ALSASeqUserClient*"/>
        </return-value>
      </constructor>
      <virtual-method name="handle_event">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.h"
             line="20">When event occurs, this signal is emit with the instance of object which includes batch of
events.</doc>
        <source-position filename="../src/seq/user-client.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.h"
                 line="22">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="ev_cntr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.h"
                 line="23">The instance of [struct@EventCntr] which includes batch of events.</doc>
            <type name="EventCntr" c:type="const ALSASeqEventCntr*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_port"
              c:identifier="alsaseq_user_client_create_port"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="335">Create a port into the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_CREATE_PORT` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="346">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="337">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="port_info"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="338">A [class@PortInfo].</doc>
            <type name="PortInfo" c:type="ALSASeqPortInfo* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_port_at"
              c:identifier="alsaseq_user_client_create_port_at"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="371">Create a port into the client with the given numeric port ID.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_CREATE_PORT` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="383">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="373">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="port_info"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="374">A [class@PortInfo].</doc>
            <type name="PortInfo" c:type="ALSASeqPortInfo* const*"/>
          </parameter>
          <parameter name="port_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="375">The numeric ID of port to create.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_queue"
              c:identifier="alsaseq_user_client_create_queue"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="852">Create a new queue owned by the client. The content of information is updated if success.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_CREATE_QUEUE` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="863">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="854">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_info"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="855">The information of queue to add.</doc>
            <type name="QueueInfo" c:type="ALSASeqQueueInfo* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="alsaseq_user_client_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="753">Allocate [struct@GLib.Source] structure to handle events from ALSA seq character device. In each
iteration of [struct@GLib.MainContext], the `read(2)` system call is exected to dispatch
sequencer event for [signal@UserClient::handle-event] signal, according to the result of
`poll(2)` system call.</doc>
        <source-position filename="../src/seq/user-client.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="764">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="755">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="756">A #GSource to handle events from ALSA seq character device.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_port"
              c:identifier="alsaseq_user_client_delete_port"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="442">Delete a port from the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_DELETE_PORT` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="453">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="444">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="port_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="445">The numeric ID of port.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_queue"
              c:identifier="alsaseq_user_client_delete_queue"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="887">Delete the queue owned by the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_DELETE_QUEUE` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="898">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="889">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="890">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="alsaseq_user_client_get_info"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="299">Set client information.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_GET_CLIENT_INFO`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="310">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="301">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="client_info"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="302">A [class@ClientInfo].</doc>
            <type name="ClientInfo" c:type="ALSASeqClientInfo* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pool"
              c:identifier="alsaseq_user_client_get_pool"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="510">Get information of memory pool in the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_GET_CLIENT_POOL`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="521">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="512">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="client_pool"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="513">A [class@ClientPool] to be configured for the client.</doc>
            <type name="ClientPool" c:type="ALSASeqClientPool* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_protocol_version"
              c:identifier="alsaseq_user_client_get_protocol_version"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="232">Get the version of sequencer protocol currently used. The version is expressed as the array
with three elements; major, minor, and micro version in the order. The length of major version
is 16 bit, the length of minor and micro version is 8 bit each.</doc>
        <source-position filename="../src/seq/user-client.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="243">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="234">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="proto_ver_triplet"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="235">The version of protocol currently
                    used.</doc>
            <array zero-terminated="0" c:type="const guint16**" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_tempo"
              c:identifier="alsaseq_user_client_get_queue_tempo"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="1070">Get the data of tempo for the queue.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_GET_QUEUE_TEMPO`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1082">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1072">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1073">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="queue_tempo"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1074">The data of tempo for queue.</doc>
            <type name="QueueTempo" c:type="ALSASeqQueueTempo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_timer"
              c:identifier="alsaseq_user_client_get_queue_timer"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="1161">Get the data of timer for the queue.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_GET_QUEUE_TIMER`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1173">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1163">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1164">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="queue_timer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1165">The data of timer for queue, which implements [iface@QueueTimerCommon].</doc>
            <type name="QueueTimerCommon" c:type="ALSASeqQueueTimerCommon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_queue_usage"
              c:identifier="alsaseq_user_client_get_queue_usage"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="958">Get usage of the queue by the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_GET_QUEUE_CLIENT`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="970">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="960">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="961">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="use"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="962">Whether the client uses the queue or not.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="alsaseq_user_client_open" throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="167">Open ALSA sequencer character device.

The call of function executes `open(2)` system call, then executes `ioctl(2)` system call with
`SNDRV_SEQ_IOCTL_CLIENT_ID` command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="179">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="169">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="open_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="170">The flag of `open(2)` system call. `O_RDWR` is forced to fulfil internally.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="operate_subscription"
              c:identifier="alsaseq_user_client_operate_subscription"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="802">Operate subscription between two ports pointed by the data.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SUBSCRIBE_PORT` and
`SNDRV_SEQ_IOCTL_UNSUBSCRIBE_PORT` commands for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="814">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="804">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="subs_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="805">A [class@SubscribeData].</doc>
            <type name="SubscribeData" c:type="ALSASeqSubscribeData*"/>
          </parameter>
          <parameter name="establish" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="806">Whether to establish subscription between two ports, or break it.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_events"
              c:identifier="alsaseq_user_client_remove_events"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="1210">Remove queued events according to the filter.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_REMOVE_EVENTS`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1221">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1212">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1213">A [class@RemoveFilter].</doc>
            <type name="RemoveFilter" c:type="ALSASeqRemoveFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="schedule_event"
              c:identifier="alsaseq_user_client_schedule_event"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="545">Deliver the event immediately, or schedule it into memory pool of the client.

The call of function executes `write(2)` system call for ALSA sequencer character device. When
[property@ClientPool:output-free] is less than [method@Event.calculate_pool_consumption] and
[method@UserClient.open] is called without non-blocking flag, the user process can be blocked
untill enough number of cells becomes available.</doc>
        <source-position filename="../src/seq/user-client.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="559">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="547">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="548">An instance of [struct@Event].</doc>
            <type name="Event" c:type="const ALSASeqEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="schedule_events"
              c:identifier="alsaseq_user_client_schedule_events"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="610">Deliver the events immediately, or schedule it into memory pool of the client.

The call of function executes `write(2)` system call for ALSA sequencer character device. When
[property@ClientPool:output-free] is less than sum of [method@Event.calculate_pool_consumption]
and [method@UserClient.open] is called without non-blocking flag, the user process can be
blocked untill enough number of cells becomes available.</doc>
        <source-position filename="../src/seq/user-client.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="625">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="612">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="613">The list of [struct@Event].</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="Event"/>
            </type>
          </parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="614">The number of events to be scheduled.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_info"
              c:identifier="alsaseq_user_client_set_info"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="263">Get client information.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_CLIENT_INFO`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="274">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="265">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="client_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="266">A [class@ClientInfo].</doc>
            <type name="ClientInfo" c:type="ALSASeqClientInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pool"
              c:identifier="alsaseq_user_client_set_pool"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="475">Configure memory pool in the client.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_CLIENT_POOL`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="486">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="477">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="client_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="478">A [class@ClientPool] to be configured for the client.</doc>
            <type name="ClientPool" c:type="ALSASeqClientPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_tempo"
              c:identifier="alsaseq_user_client_set_queue_tempo"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="1031">Set the data of tempo to the queue.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_QUEUE_TEMPO`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1043">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1033">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1034">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="queue_tempo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1035">The data of tempo for queue.</doc>
            <type name="QueueTempo" c:type="ALSASeqQueueTempo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_timer"
              c:identifier="alsaseq_user_client_set_queue_timer"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="1109">Set the data of timer for the queue.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_QUEUE_TIMER`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1121">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1111">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1112">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="queue_timer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="1113">The data of timer for queue, which implements [iface@QueueTimerCommon].</doc>
            <type name="QueueTimerCommon" c:type="ALSASeqQueueTimerCommon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_usage"
              c:identifier="alsaseq_user_client_set_queue_usage"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="994">Start the queue to use or not.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_QUEUE_CLIENT`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="1006">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="996">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="997">The numeric ID of queue. An entry of [enum@SpecificQueueId] is available as well.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="use" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="998">Whether to use the queue or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_port"
              c:identifier="alsaseq_user_client_update_port"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="403">Update port information.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_PORT_INFO` command
for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="415">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="405">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="port_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="406">A [class@PortInfo].</doc>
            <type name="PortInfo" c:type="ALSASeqPortInfo*"/>
          </parameter>
          <parameter name="port_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="407">The numeric ID of port.</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_queue"
              c:identifier="alsaseq_user_client_update_queue"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="920">Update owned queue according to the information.

The call of function executes `ioctl(2)` system call with `SNDRV_SEQ_IOCTL_SET_QUEUE_INFO`
command for ALSA sequencer character device.</doc>
        <source-position filename="../src/seq/user-client.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="931">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="922">A [class@UserClient].</doc>
            <type name="UserClient" c:type="ALSASeqUserClient*"/>
          </instance-parameter>
          <parameter name="queue_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="923">The information of queue to add.</doc>
            <type name="QueueInfo" c:type="ALSASeqQueueInfo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="114">The numeric ID of the client.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="handle-event" when="last">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="130">When event occurs, this signal is emit with the instance of object which includes batch of
of events.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ev_cntr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/seq/user-client.c"
                 line="133">The instance of [struct@EventCntr] which includes batch of events.</doc>
            <type name="EventCntr"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="UserClientClass"
            c:type="ALSASeqUserClientClass"
            glib:is-gtype-struct-for="UserClient">
      <source-position filename="../src/seq/user-client.h" line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="handle_event">
        <callback name="handle_event">
          <source-position filename="../src/seq/user-client.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/seq/user-client.h"
                   line="22">A [class@UserClient].</doc>
              <type name="UserClient" c:type="ALSASeqUserClient*"/>
            </parameter>
            <parameter name="ev_cntr" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/seq/user-client.h"
                   line="23">The instance of [struct@EventCntr] which includes batch of events.</doc>
              <type name="EventCntr" c:type="const ALSASeqEventCntr*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="UserClientError"
                 glib:type-name="ALSASeqUserClientError"
                 glib:get-type="alsaseq_user_client_error_get_type"
                 c:type="ALSASeqUserClientError"
                 glib:error-domain="alsaseq-user-client-error-quark">
      <doc xml:space="preserve"
           filename="../src/seq/alsaseq-enum-types.h"
           line="368">A set of error code for [structGLib.Error] with `struct@UserClientError` domain.</doc>
      <member name="failed"
              value="0"
              c:identifier="ALSASEQ_USER_CLIENT_ERROR_FAILED"
              glib:nick="failed"
              glib:name="ALSASEQ_USER_CLIENT_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="370">The system call failed.</doc>
      </member>
      <member name="port_permission"
              value="1"
              c:identifier="ALSASEQ_USER_CLIENT_ERROR_PORT_PERMISSION"
              glib:nick="port-permission"
              glib:name="ALSASEQ_USER_CLIENT_ERROR_PORT_PERMISSION">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="371">The operation fails due to access permission of port.</doc>
      </member>
      <member name="queue_permission"
              value="2"
              c:identifier="ALSASEQ_USER_CLIENT_ERROR_QUEUE_PERMISSION"
              glib:nick="queue-permission"
              glib:name="ALSASEQ_USER_CLIENT_ERROR_QUEUE_PERMISSION">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="372">The operation fails due to access permission of queue.</doc>
      </member>
      <member name="event_undeliverable"
              value="3"
              c:identifier="ALSASEQ_USER_CLIENT_ERROR_EVENT_UNDELIVERABLE"
              glib:nick="event-undeliverable"
              glib:name="ALSASEQ_USER_CLIENT_ERROR_EVENT_UNDELIVERABLE">
        <doc xml:space="preserve"
             filename="../src/seq/alsaseq-enum-types.h"
             line="373">The operation failes due to undeliverable event.</doc>
      </member>
      <function name="quark" c:identifier="alsaseq_user_client_error_quark">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="35">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code of [enum@UserClientError]
enumerations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/user-client.c"
               line="41">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function name="event_error_quark"
              c:identifier="alsaseq_event_error_quark"
              moved-to="EventError.quark">
      <doc xml:space="preserve"
           filename="../src/seq/event.c"
           line="117">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code of [enum@EventError]
enumerations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/event.c"
             line="123">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_client_id_list"
              c:identifier="alsaseq_get_client_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="129">Get the list of clients as the numeric identifier.

The call of function executes `open(2)``, ``close(2)``, and ``ioctl(2)`` system calls with
`SNDRV_SEQ_IOCTL_CLIENT_ID`, `SNDRV_SEQ_IOCTL_SYSTEM_INFO`, and
`SNDRV_SEQ_IOCTL_QUERY_NEXT_CLIENT` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="15"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="143">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="131">The array with elements for numeric identified of
          client. One of [enum@SpecificClientId] can be included in result as well as any
          numeric value.</doc>
          <array length="1" zero-terminated="0" c:type="guint8**">
            <type name="guint8" c:type="guint8*"/>
          </array>
        </parameter>
        <parameter name="entry_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="134">The number of entries.</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_client_info"
              c:identifier="alsaseq_get_client_info"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="218">Get the information of client according to the numeric ID.

The call of function executes `open(2)``, ``close(2)``, and ``ioctl(2)`` system calls with
`SNDRV_SEQ_IOCTL_GET_CLIENT_INFO` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="17"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="230">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="client_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="220">The numeric identifier of client to query. One of [enum@SpecificClientId] is
            available as well as any numeric value.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="client_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="222">A [class@ClientInfo] for the client.</doc>
          <type name="ClientInfo" c:type="ALSASeqClientInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_client_pool"
              c:identifier="alsaseq_get_client_pool"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="386">Get statistical information of memory pool for the given client.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_GET_CLIENT_POOL` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="25"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="398">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="client_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="388">The numeric ID of client to query. One of [enum@SpecificClientId] is available as
            well as any numeric value.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="client_pool"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="390">The information of memory pool for the client.</doc>
          <type name="ClientPool" c:type="ALSASeqClientPool**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_port_id_list"
              c:identifier="alsaseq_get_port_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="262">Get the list of numeric identifiers for port added by the client.

The call of function executes `open(2)``, ``close(2)``, and ``ioctl(2)`` system calls with
`SNDRV_SEQ_IOCTL_GET_CLIENT_INFO` and `SNDRV_SEQ_IOCTL_QUERY_NEXT_PORT` commands for ALSA
sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="client_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="264">The numeric ID of client to query. One of [enum@SpecificClientId] is available as
            well as any numeric value.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="266">The array with elements for numeric identifier of
          port. One of [enum@SpecificPortId] is available as well as any numeric value.</doc>
          <array length="2" zero-terminated="0" c:type="guint8**">
            <type name="guint8" c:type="guint8*"/>
          </array>
        </parameter>
        <parameter name="entry_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="268">The number of entries in the array.</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_port_info"
              c:identifier="alsaseq_get_port_info"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="338">Get the information of port in client.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_GET_PORT_INFO` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="22"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="352">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="client_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="340">The numeric identifier of client to query. One of [enum@SpecificClientId] is
            available as well as any numerica value.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="port_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="342">The numeric identifier of port in the client. One of [enum@SpecificPortId] is
          available as well as any numeric value.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="port_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="344">A [class@PortInfo] for the port.</doc>
          <type name="PortInfo" c:type="ALSASeqPortInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_queue_id_list"
              c:identifier="alsaseq_get_queue_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="516">Get the list of queue in ALSA Sequencer.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_SYSTEM_INFO` and `SNDRV_SEQ_IOCTL_GET_QUEUE_INFO` commands for ALSA
sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="31"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="528">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="518">The array of elements for numeric identifier of queue.</doc>
          <array length="1" zero-terminated="0" c:type="guint8**">
            <type name="guint8" c:type="guint8*"/>
          </array>
        </parameter>
        <parameter name="entry_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="519">The number of entries.</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_queue_info_by_id"
              c:identifier="alsaseq_get_queue_info_by_id"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="588">Get the information of queue, according to the numeric ID.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_GET_QUEUE_INFO` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="599">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="queue_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="590">The numeric ID of queue. One of [enum@SpecificQueueId] is available as well.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="queue_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="591">The information of queue.</doc>
          <type name="QueueInfo" c:type="ALSASeqQueueInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_queue_info_by_name"
              c:identifier="alsaseq_get_queue_info_by_name"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="631">Get the information of queue, according to the name string.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_GET_NAMED_QUEUE` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="642">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="633">The name string of queue to query.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="queue_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="634">The information of queue.</doc>
          <type name="QueueInfo" c:type="ALSASeqQueueInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_queue_status"
              c:identifier="alsaseq_get_queue_status"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="674">Get current status of queue.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_GET_QUEUE_STATUS` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="685">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="queue_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="676">The numeric ID of queue. One of [enum@SpecificQueueId] is available as well.</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="queue_status"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="677">The current status of queue.</doc>
          <type name="QueueStatus" c:type="ALSASeqQueueStatus* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_seq_devnode"
              c:identifier="alsaseq_get_seq_devnode"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="39">Allocate devnode string for ALSA Sequencer and return it when exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/seq/query.h" line="11"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="48">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="devnode"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="41">The devnode of ALSA Sequencer.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_seq_sysname"
              c:identifier="alsaseq_get_seq_sysname"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="12">Allocate sysname string for ALSA sequencer and return it when exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/seq/query.h" line="9"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="21">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sysname"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="14">The sysname of ALSA Sequencer.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_subscription_list"
              c:identifier="alsaseq_get_subscription_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="443">Get the list of subscription for given address and query type.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system calls with
`SNDRV_SEQ_IOCTL_QUERY_SUBS` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="27"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="456">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="addr" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="445">A [struct@Addr] to query.</doc>
          <type name="Addr" c:type="const ALSASeqAddr*"/>
        </parameter>
        <parameter name="query_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="446">The type of query, one of [enum@QuerySubscribeType].</doc>
          <type name="QuerySubscribeType" c:type="ALSASeqQuerySubscribeType"/>
        </parameter>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="447">The array with element for subscription
          data.</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="SubscribeData"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="get_system_info"
              c:identifier="alsaseq_get_system_info"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/seq/query.c"
           line="85">Get information of ALSA Sequencer.

The call of function executes `open(2)``, ``close(2)``, and ``ioctl(2)`` system calls with
`SNDRV_SEQ_IOCTL_SYSTEM_INFO` command for ALSA sequencer character device.</doc>
      <source-position filename="../src/seq/query.h" line="13"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/query.c"
             line="95">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="system_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/seq/query.c"
               line="87">The information of ALSA Sequencer.</doc>
          <type name="SystemInfo" c:type="ALSASeqSystemInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_client_error_quark"
              c:identifier="alsaseq_user_client_error_quark"
              moved-to="UserClientError.quark">
      <doc xml:space="preserve"
           filename="../src/seq/user-client.c"
           line="35">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code of [enum@UserClientError]
enumerations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/seq/user-client.c"
             line="41">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal)]

extern crate libc;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type ALSATimerClass = c_int;
pub const ALSATIMER_CLASS_NONE: ALSATimerClass = -1;
pub const ALSATIMER_CLASS_GLOBAL: ALSATimerClass = 1;
pub const ALSATIMER_CLASS_CARD: ALSATimerClass = 2;
pub const ALSATIMER_CLASS_PCM: ALSATimerClass = 3;

pub type ALSATimerEventDataType = c_int;
pub const ALSATIMER_EVENT_DATA_TYPE_TICK: ALSATimerEventDataType = 0;
pub const ALSATIMER_EVENT_DATA_TYPE_TSTAMP: ALSATimerEventDataType = 1;

pub type ALSATimerEventType = c_int;
pub const ALSATIMER_EVENT_TYPE_RESOLUTION: ALSATimerEventType = 0;
pub const ALSATIMER_EVENT_TYPE_TICK: ALSATimerEventType = 1;
pub const ALSATIMER_EVENT_TYPE_START: ALSATimerEventType = 2;
pub const ALSATIMER_EVENT_TYPE_STOP: ALSATimerEventType = 3;
pub const ALSATIMER_EVENT_TYPE_CONTINUE: ALSATimerEventType = 4;
pub const ALSATIMER_EVENT_TYPE_PAUSE: ALSATimerEventType = 5;
pub const ALSATIMER_EVENT_TYPE_EARLY: ALSATimerEventType = 6;
pub const ALSATIMER_EVENT_TYPE_SUSPEND: ALSATimerEventType = 7;
pub const ALSATIMER_EVENT_TYPE_RESUME: ALSATimerEventType = 8;
pub const ALSATIMER_EVENT_TYPE_MSTART: ALSATimerEventType = 12;
pub const ALSATIMER_EVENT_TYPE_MSTOP: ALSATimerEventType = 13;
pub const ALSATIMER_EVENT_TYPE_MCONTINUE: ALSATimerEventType = 14;
pub const ALSATIMER_EVENT_TYPE_MPAUSE: ALSATimerEventType = 15;
pub const ALSATIMER_EVENT_TYPE_MSUSPEND: ALSATimerEventType = 17;
pub const ALSATIMER_EVENT_TYPE_MRESUME: ALSATimerEventType = 18;

pub type ALSATimerSlaveClass = c_int;
pub const ALSATIMER_SLAVE_CLASS_NONE: ALSATimerSlaveClass = 0;
pub const ALSATIMER_SLAVE_CLASS_APPLICATION: ALSATimerSlaveClass = 1;
pub const ALSATIMER_SLAVE_CLASS_SEQUENCER: ALSATimerSlaveClass = 2;

pub type ALSATimerSpecificGlobalDevice = c_int;
pub const ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM: ALSATimerSpecificGlobalDevice = 0;
pub const ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER: ALSATimerSpecificGlobalDevice = 3;

// Flags
pub type ALSATimerDeviceInfoFlag = c_uint;
pub const ALSATIMER_DEVICE_INFO_FLAG_SLAVE: ALSATimerDeviceInfoFlag = 1;

pub type ALSATimerInstanceParamFlag = c_uint;
pub const ALSATIMER_INSTANCE_PARAM_FLAG_AUTO: ALSATimerInstanceParamFlag = 1;
pub const ALSATIMER_INSTANCE_PARAM_FLAG_EXCLUSIVE: ALSATimerInstanceParamFlag = 2;
pub const ALSATIMER_INSTANCE_PARAM_FLAG_EARLY_EVENT: ALSATimerInstanceParamFlag = 4;

// Unions
#[repr(C)]
pub struct ALSATimerEvent(c_void);

impl ::std::fmt::Debug for ALSATimerEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerEvent @ {:?}", self as *const _))
         .finish()
    }
}

// Records
#[repr(C)]
pub struct ALSATimerDeviceId(c_void);

impl ::std::fmt::Debug for ALSATimerDeviceId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceId @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerDeviceInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerDeviceInfoPrivate(c_void);

pub type ALSATimerDeviceInfoPrivate = *mut _ALSATimerDeviceInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceParamsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerDeviceParamsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceParamsClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerDeviceParamsPrivate(c_void);

pub type ALSATimerDeviceParamsPrivate = *mut _ALSATimerDeviceParamsPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceStatusClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerDeviceStatusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceStatusClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerDeviceStatusPrivate(c_void);

pub type ALSATimerDeviceStatusPrivate = *mut _ALSATimerDeviceStatusPrivate;

#[repr(C)]
pub struct ALSATimerEventDataTick(c_void);

impl ::std::fmt::Debug for ALSATimerEventDataTick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerEventDataTick @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct ALSATimerEventDataTstamp(c_void);

impl ::std::fmt::Debug for ALSATimerEventDataTstamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerEventDataTstamp @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerInstanceInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerInstanceInfoPrivate(c_void);

pub type ALSATimerInstanceInfoPrivate = *mut _ALSATimerInstanceInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceParamsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerInstanceParamsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceParamsClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerInstanceParamsPrivate(c_void);

pub type ALSATimerInstanceParamsPrivate = *mut _ALSATimerInstanceParamsPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceStatusClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSATimerInstanceStatusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceStatusClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerInstanceStatusPrivate(c_void);

pub type ALSATimerInstanceStatusPrivate = *mut _ALSATimerInstanceStatusPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerUserInstanceClass {
    pub parent_class: gobject::GObjectClass,
    pub handle_event: Option<unsafe extern "C" fn(*mut ALSATimerUserInstance, *const ALSATimerEvent)>,
    pub handle_disconnection: Option<unsafe extern "C" fn(*mut ALSATimerUserInstance)>,
}

impl ::std::fmt::Debug for ALSATimerUserInstanceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerUserInstanceClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("handle_event", &self.handle_event)
         .field("handle_disconnection", &self.handle_disconnection)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSATimerUserInstancePrivate(c_void);

pub type ALSATimerUserInstancePrivate = *mut _ALSATimerUserInstancePrivate;

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerDeviceInfoPrivate,
}

impl ::std::fmt::Debug for ALSATimerDeviceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceParams {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerDeviceParamsPrivate,
}

impl ::std::fmt::Debug for ALSATimerDeviceParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceParams @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerDeviceStatus {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerDeviceStatusPrivate,
}

impl ::std::fmt::Debug for ALSATimerDeviceStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerDeviceStatus @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerInstanceInfoPrivate,
}

impl ::std::fmt::Debug for ALSATimerInstanceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceParams {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerInstanceParamsPrivate,
}

impl ::std::fmt::Debug for ALSATimerInstanceParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceParams @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerInstanceStatus {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerInstanceStatusPrivate,
}

impl ::std::fmt::Debug for ALSATimerInstanceStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerInstanceStatus @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSATimerUserInstance {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSATimerUserInstancePrivate,
}

impl ::std::fmt::Debug for ALSATimerUserInstance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSATimerUserInstance @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // ALSATimerClass
    //=========================================================================
    pub fn alsatimer_class_get_type() -> GType;

    //=========================================================================
    // ALSATimerEventDataType
    //=========================================================================
    pub fn alsatimer_event_data_type_get_type() -> GType;

    //=========================================================================
    // ALSATimerEventType
    //=========================================================================
    pub fn alsatimer_event_type_get_type() -> GType;

    //=========================================================================
    // ALSATimerSlaveClass
    //=========================================================================
    pub fn alsatimer_slave_class_get_type() -> GType;

    //=========================================================================
    // ALSATimerSpecificGlobalDevice
    //=========================================================================
    pub fn alsatimer_specific_global_device_get_type() -> GType;

    //=========================================================================
    // ALSATimerDeviceInfoFlag
    //=========================================================================
    pub fn alsatimer_device_info_flag_get_type() -> GType;

    //=========================================================================
    // ALSATimerInstanceParamFlag
    //=========================================================================
    pub fn alsatimer_instance_param_flag_get_type() -> GType;

    //=========================================================================
    // ALSATimerEvent
    //=========================================================================
    pub fn alsatimer_event_get_type() -> GType;
    pub fn alsatimer_event_new() -> *mut ALSATimerEvent;
    pub fn alsatimer_event_get_tick_data(self_: *mut ALSATimerEvent, tick: *mut *const ALSATimerEventDataTick);
    pub fn alsatimer_event_get_tstamp_data(self_: *mut ALSATimerEvent, tstamp: *mut *const ALSATimerEventDataTstamp);

    //=========================================================================
    // ALSATimerDeviceId
    //=========================================================================
    pub fn alsatimer_device_id_get_type() -> GType;
    pub fn alsatimer_device_id_new(class: ALSATimerClass, card_id: c_int, device_id: c_int, subdevice_id: c_int) -> *mut ALSATimerDeviceId;
    pub fn alsatimer_device_id_get_card_id(self_: *const ALSATimerDeviceId, card_id: *mut c_int);
    pub fn alsatimer_device_id_get_class(self_: *const ALSATimerDeviceId, class: *mut ALSATimerClass);
    pub fn alsatimer_device_id_get_device_id(self_: *const ALSATimerDeviceId, device_id: *mut c_int);
    pub fn alsatimer_device_id_get_subdevice_id(self_: *const ALSATimerDeviceId, subdevice_id: *mut c_int);

    //=========================================================================
    // ALSATimerEventDataTick
    //=========================================================================
    pub fn alsatimer_event_data_tick_get_type() -> GType;
    pub fn alsatimer_event_data_tick_get_resolution(self_: *const ALSATimerEventDataTick, resolution: *mut c_uint);
    pub fn alsatimer_event_data_tick_get_ticks(self_: *const ALSATimerEventDataTick, ticks: *mut c_uint);

    //=========================================================================
    // ALSATimerEventDataTstamp
    //=========================================================================
    pub fn alsatimer_event_data_tstamp_get_type() -> GType;
    pub fn alsatimer_event_data_tstamp_get_event(self_: *const ALSATimerEventDataTstamp, event: *mut ALSATimerEventType);
    pub fn alsatimer_event_data_tstamp_get_tstamp(self_: *const ALSATimerEventDataTstamp, tstamp: *const *mut [i64; 2]);
    pub fn alsatimer_event_data_tstamp_get_val(self_: *const ALSATimerEventDataTstamp, val: *mut c_uint);

    //=========================================================================
    // ALSATimerDeviceInfo
    //=========================================================================
    pub fn alsatimer_device_info_get_type() -> GType;

    //=========================================================================
    // ALSATimerDeviceParams
    //=========================================================================
    pub fn alsatimer_device_params_get_type() -> GType;
    pub fn alsatimer_device_params_new() -> *mut ALSATimerDeviceParams;

    //=========================================================================
    // ALSATimerDeviceStatus
    //=========================================================================
    pub fn alsatimer_device_status_get_type() -> GType;
    pub fn alsatimer_device_status_new() -> *mut ALSATimerDeviceStatus;

    //=========================================================================
    // ALSATimerInstanceInfo
    //=========================================================================
    pub fn alsatimer_instance_info_get_type() -> GType;

    //=========================================================================
    // ALSATimerInstanceParams
    //=========================================================================
    pub fn alsatimer_instance_params_get_type() -> GType;
    pub fn alsatimer_instance_params_new() -> *mut ALSATimerInstanceParams;
    pub fn alsatimer_instance_params_get_event_filter(self_: *mut ALSATimerInstanceParams, entries: *mut *mut ALSATimerEventType, entry_count: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsatimer_instance_params_set_event_filter(self_: *mut ALSATimerInstanceParams, entries: *const ALSATimerEventType, entry_count: size_t, error: *mut *mut glib::GError);

    //=========================================================================
    // ALSATimerInstanceStatus
    //=========================================================================
    pub fn alsatimer_instance_status_get_type() -> GType;
    pub fn alsatimer_instance_status_new() -> *mut ALSATimerInstanceStatus;
    pub fn alsatimer_instance_status_get_tstamp(self_: *mut ALSATimerInstanceStatus, tstamp: *mut *const [i64; 2]);

    //=========================================================================
    // ALSATimerUserInstance
    //=========================================================================
    pub fn alsatimer_user_instance_get_type() -> GType;
    pub fn alsatimer_user_instance_new() -> *mut ALSATimerUserInstance;
    pub fn alsatimer_user_instance_attach(self_: *mut ALSATimerUserInstance, device_id: *mut ALSATimerDeviceId, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_attach_as_slave(self_: *mut ALSATimerUserInstance, slave_class: ALSATimerSlaveClass, slave_id: c_int, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_choose_event_data_type(self_: *mut ALSATimerUserInstance, event_data_type: ALSATimerEventDataType, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_continue(self_: *mut ALSATimerUserInstance, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_create_source(self_: *mut ALSATimerUserInstance, gsrc: *mut *mut glib::GSource, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_get_info(self_: *mut ALSATimerUserInstance, instance_info: *mut *mut ALSATimerInstanceInfo, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_get_protocol_version(self_: *mut ALSATimerUserInstance, proto_ver_triplet: *mut *const [u16; 3], error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_get_status(self_: *mut ALSATimerUserInstance, instance_status: *const *mut ALSATimerInstanceStatus, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_open(self_: *mut ALSATimerUserInstance, open_flag: c_int, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_pause(self_: *mut ALSATimerUserInstance, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_set_params(self_: *mut ALSATimerUserInstance, instance_params: *const *mut ALSATimerInstanceParams, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_start(self_: *mut ALSATimerUserInstance, error: *mut *mut glib::GError);
    pub fn alsatimer_user_instance_stop(self_: *mut ALSATimerUserInstance, error: *mut *mut glib::GError);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn alsatimer_get_device_id_list(entries: *mut *mut glib::GList, error: *mut *mut glib::GError);
    pub fn alsatimer_get_device_info(device_id: *mut ALSATimerDeviceId, device_info: *mut *mut ALSATimerDeviceInfo, error: *mut *mut glib::GError);
    pub fn alsatimer_get_device_status(device_id: *mut ALSATimerDeviceId, device_status: *const *mut ALSATimerDeviceStatus, error: *mut *mut glib::GError);
    pub fn alsatimer_get_devnode(devnode: *mut *mut c_char, error: *mut *mut glib::GError);
    pub fn alsatimer_get_sysname(sysname: *mut *mut c_char, error: *mut *mut glib::GError);
    pub fn alsatimer_get_tstamp_source(clock_id: *mut c_int, error: *mut *mut glib::GError);
    pub fn alsatimer_set_device_params(device_id: *mut ALSATimerDeviceId, device_params: *const ALSATimerDeviceParams, error: *mut *mut glib::GError);

}

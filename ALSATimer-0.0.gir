<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="alsatimer"/>
  <c:include name="alsatimer.h"/>
  <namespace name="ALSATimer"
             version="0.0"
             shared-library="libalsatimer.so.0"
             c:identifier-prefixes="ALSATimer"
             c:symbol-prefixes="alsatimer_">
    <enumeration name="Class"
                 glib:type-name="ALSATimerClass"
                 glib:get-type="alsatimer_class_get_type"
                 c:type="ALSATimerClass">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="5">A set of enumerations for the class of timer device.</doc>
      <member name="none"
              value="-1"
              c:identifier="ALSATIMER_CLASS_NONE"
              glib:nick="none"
              glib:name="ALSATIMER_CLASS_NONE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="7">Invalid.</doc>
      </member>
      <member name="global"
              value="1"
              c:identifier="ALSATIMER_CLASS_GLOBAL"
              glib:nick="global"
              glib:name="ALSATIMER_CLASS_GLOBAL">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="8">The timer device is relevant to system.</doc>
      </member>
      <member name="card"
              value="2"
              c:identifier="ALSATIMER_CLASS_CARD"
              glib:nick="card"
              glib:name="ALSATIMER_CLASS_CARD">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="9">The timer device is relevant to sound card.</doc>
      </member>
      <member name="pcm"
              value="3"
              c:identifier="ALSATIMER_CLASS_PCM"
              glib:nick="pcm"
              glib:name="ALSATIMER_CLASS_PCM">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="10">The timer device is relevant to PCM device.</doc>
      </member>
    </enumeration>
    <record name="DeviceId"
            c:type="ALSATimerDeviceId"
            glib:type-name="ALSATimerDeviceId"
            glib:get-type="alsatimer_device_id_get_type"
            c:symbol-prefix="device_id">
      <doc xml:space="preserve"
           filename="../src/timer/device-id.c"
           line="4">A boxed object to represent the identifier of timer device.
A [struct@DeviceId] is a boxed object to represent the identifier of timer device. The
identifier mainly consists of the class of timer device. The other members; the numeric ID of
card, device, and subdevice are optional according to the class of timer device.

The object wraps `struct snd_timer_id` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-id.h" line="11"/>
      <constructor name="new" c:identifier="alsatimer_device_id_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="29">Allocate and return an instance of [struct@DeviceId].</doc>
        <source-position filename="../src/timer/device-id.h" line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-id.c"
               line="38">A [struct@DeviceId].</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </return-value>
        <parameters>
          <parameter name="class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="31">The class of device, one of [enum@Class].</doc>
            <type name="Class" c:type="ALSATimerClass"/>
          </parameter>
          <parameter name="card_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="32">The numeric ID of relevant sound card.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="33">The numeric ID of relevant device.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="subdevice_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="34">The numeric ID of relevant subdevice.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_card_id"
              c:identifier="alsatimer_device_id_get_card_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="67">Get the numeric ID of sound card to which the device belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="69">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="card_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="70">The numeric ID of sound card to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_class" c:identifier="alsatimer_device_id_get_class">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="54">Get the class of timer.</doc>
        <source-position filename="../src/timer/device-id.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="56">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="class"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="57">The class of timer, one of [enum@Class].</doc>
            <type name="Class" c:type="ALSATimerClass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_id"
              c:identifier="alsatimer_device_id_get_device_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="80">Get the numeric ID of device to which the timer belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="82">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="device_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="83">The numeric ID of device to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subdevice_id"
              c:identifier="alsatimer_device_id_get_subdevice_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="93">Get the numeric ID of subdevice to which the timer belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="95">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="subdevice_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="96">The numeric ID of subdevice to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="DeviceInfo"
           c:symbol-prefix="device_info"
           c:type="ALSATimerDeviceInfo"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceInfo"
           glib:get-type="alsatimer_device_info_get_type"
           glib:type-struct="DeviceInfoClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-info.c"
           line="4">A GObject-derived object to represent information of timer device.
A [class@DeviceInfo] is a GObject-derived object to represent information of timer device.
The call of alsatimer_get_device_info() returns an instance of the object according to the
identifier of timer device.

The object wraps `struct snd_timer_ginfo` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-info.h" line="16"/>
      <property name="card-id" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <type name="DeviceInfoFlag"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="instance-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resolution" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-max" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-min" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceInfoClass"
            c:type="ALSATimerDeviceInfoClass"
            glib:is-gtype-struct-for="DeviceInfo">
      <source-position filename="../src/timer/device-info.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="DeviceInfoFlag"
              glib:type-name="ALSATimerDeviceInfoFlag"
              glib:get-type="alsatimer_device_info_flag_get_type"
              c:type="ALSATimerDeviceInfoFlag">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="47">A set of flags for the information of timer device.</doc>
      <member name="slave"
              value="1"
              c:identifier="ALSATIMER_DEVICE_INFO_FLAG_SLAVE"
              glib:nick="slave"
              glib:name="ALSATIMER_DEVICE_INFO_FLAG_SLAVE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="49">The timer device is slave to any timer device.</doc>
      </member>
    </bitfield>
    <class name="DeviceParams"
           c:symbol-prefix="device_params"
           c:type="ALSATimerDeviceParams"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceParams"
           glib:get-type="alsatimer_device_params_get_type"
           glib:type-struct="DeviceParamsClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-params.c"
           line="4">A GObject-derived object to represent parameter of timer device.
A [class@DeviceParams] is a GObject-derived object to represent parameter of timer device. The
call of alsatimer_set_device_params() requires the instance of object.

The object wraps `struct snd_timer_gparams` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-params.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_device_params_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-params.c"
             line="95">Instantiate [class@DeviceParams] object and return the instance.</doc>
        <source-position filename="../src/timer/device-params.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-params.c"
               line="100">an instance of [class@DeviceParams].</doc>
          <type name="DeviceParams" c:type="ALSATimerDeviceParams*"/>
        </return-value>
      </constructor>
      <property name="period-denominator"
                writable="1"
                transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="period-numerator" writable="1" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceParamsClass"
            c:type="ALSATimerDeviceParamsClass"
            glib:is-gtype-struct-for="DeviceParams">
      <source-position filename="../src/timer/device-params.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DeviceStatus"
           c:symbol-prefix="device_status"
           c:type="ALSATimerDeviceStatus"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceStatus"
           glib:get-type="alsatimer_device_status_get_type"
           glib:type-struct="DeviceStatusClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-status.c"
           line="4">A GObject-derived object to represent status of timer device.
A [class@DeviceStatus] is a GObject-derived object to represent status of timer device. The
call of [func@get_device_status] returns the instance of object.

The object wraps 'struct snd_timer_gstatus' in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-status.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_device_status_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-status.c"
             line="87">Allocate and return an instance of [class@DeviceStatus].</doc>
        <source-position filename="../src/timer/device-status.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-status.c"
               line="92">An instance of [class@DeviceStatus].</doc>
          <type name="DeviceStatus" c:type="ALSATimerDeviceStatus*"/>
        </return-value>
      </constructor>
      <property name="resolution" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-denominator" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-numerator" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceStatusClass"
            c:type="ALSATimerDeviceStatusClass"
            glib:is-gtype-struct-for="DeviceStatus">
      <source-position filename="../src/timer/device-status.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <union name="Event"
           c:type="ALSATimerEvent"
           glib:type-name="ALSATimerEvent"
           glib:get-type="alsatimer_event_get_type"
           c:symbol-prefix="event">
      <doc xml:space="preserve"
           filename="../src/timer/event.c"
           line="4">A boxed object to represent event of timer.
A [struct@Event] is a boxed object to represent event of timer. The instance of object uses
single storage for two types of event data; [struct@EventDataTick] for and
[struct@EventDataTstamp]. Applications can decide to use one of the two by passing one of
[enum@EventType] to the call of [method@UserInstance.attach].</doc>
      <source-position filename="../src/timer/event.h" line="14"/>
      <field name="tick" writable="1">
        <type name="EventDataTick" c:type="ALSATimerEventDataTick"/>
      </field>
      <field name="tstamp" writable="1">
        <type name="EventDataTstamp" c:type="ALSATimerEventDataTstamp"/>
      </field>
      <constructor name="new" c:identifier="alsatimer_event_new">
        <doc xml:space="preserve"
             filename="../src/timer/event.c"
             line="28">Allocate and return the instance of [struct@Event].</doc>
        <source-position filename="../src/timer/event.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/event.c"
               line="33">An instance of [struct@Event].</doc>
          <type name="Event" c:type="ALSATimerEvent*"/>
        </return-value>
      </constructor>
      <method name="get_tick_data"
              c:identifier="alsatimer_event_get_tick_data">
        <doc xml:space="preserve"
             filename="../src/timer/event.c"
             line="40">Refer to the instance of [struct@EventDataTick].</doc>
        <source-position filename="../src/timer/event.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event.c"
                 line="42">A [struct@Event].</doc>
            <type name="Event" c:type="ALSATimerEvent*"/>
          </instance-parameter>
          <parameter name="tick"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event.c"
                 line="43">The instance of [struct@EventDataTick].</doc>
            <type name="EventDataTick"
                  c:type="const ALSATimerEventDataTick**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tstamp_data"
              c:identifier="alsatimer_event_get_tstamp_data">
        <doc xml:space="preserve"
             filename="../src/timer/event.c"
             line="53">Refer to the instance of [struct@EventDataTstamp].</doc>
        <source-position filename="../src/timer/event.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event.c"
                 line="55">A [struct@Event].</doc>
            <type name="Event" c:type="ALSATimerEvent*"/>
          </instance-parameter>
          <parameter name="tstamp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event.c"
                 line="56">The instance of [struct@EventDataTstamp].</doc>
            <type name="EventDataTstamp"
                  c:type="const ALSATimerEventDataTstamp**"/>
          </parameter>
        </parameters>
      </method>
    </union>
    <record name="EventDataTick"
            c:type="ALSATimerEventDataTick"
            glib:type-name="ALSATimerEventDataTick"
            glib:get-type="alsatimer_event_data_tick_get_type"
            c:symbol-prefix="event_data_tick">
      <doc xml:space="preserve"
           filename="../src/timer/event-data-tick.c"
           line="4">A boxed object to represent event of timer with tick count.
A [struct@EventDataTick] is a boxed object to represent event of timer with tick count.

The object wraps `struct snd_timer_read` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/event-data-tick.h" line="11"/>
      <method name="get_resolution"
              c:identifier="alsatimer_event_data_tick_get_resolution">
        <doc xml:space="preserve"
             filename="../src/timer/event-data-tick.c"
             line="27">Get the resolution of tick event.</doc>
        <source-position filename="../src/timer/event-data-tick.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tick.c"
                 line="29">A [struct@EventDataTick].</doc>
            <type name="EventDataTick" c:type="const ALSATimerEventDataTick*"/>
          </instance-parameter>
          <parameter name="resolution"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tick.c"
                 line="30">The resolution of tick event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ticks"
              c:identifier="alsatimer_event_data_tick_get_ticks">
        <doc xml:space="preserve"
             filename="../src/timer/event-data-tick.c"
             line="40">Get the tick count since the last event.</doc>
        <source-position filename="../src/timer/event-data-tick.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tick.c"
                 line="42">A [struct@EventDataTick].</doc>
            <type name="EventDataTick" c:type="const ALSATimerEventDataTick*"/>
          </instance-parameter>
          <parameter name="ticks"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tick.c"
                 line="43">The tick count since the last event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="EventDataTstamp"
            c:type="ALSATimerEventDataTstamp"
            glib:type-name="ALSATimerEventDataTstamp"
            glib:get-type="alsatimer_event_data_tstamp_get_type"
            c:symbol-prefix="event_data_tstamp">
      <doc xml:space="preserve"
           filename="../src/timer/event-data-tstamp.c"
           line="4">A boxed object to represent event of timer with tstamp.
A [struct@EventDataTstamp] is a boxed object to represent event of timer with tstamp.

The object wraps `struct snd_timer_tread` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/event-data-tstamp.h" line="11"/>
      <method name="get_event"
              c:identifier="alsatimer_event_data_tstamp_get_event">
        <doc xml:space="preserve"
             filename="../src/timer/event-data-tstamp.c"
             line="27">Get the kind of event for the timestamp event.</doc>
        <source-position filename="../src/timer/event-data-tstamp.h"
                         line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="29">A [struct@EventDataTstamp].</doc>
            <type name="EventDataTstamp"
                  c:type="const ALSATimerEventDataTstamp*"/>
          </instance-parameter>
          <parameter name="event"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="30">The type of tstamp event, one of [enum@EventType].</doc>
            <type name="EventType" c:type="ALSATimerEventType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tstamp"
              c:identifier="alsatimer_event_data_tstamp_get_tstamp">
        <doc xml:space="preserve"
             filename="../src/timer/event-data-tstamp.c"
             line="40">Get the seconds and nanoseconds part for the timestamp event.</doc>
        <source-position filename="../src/timer/event-data-tstamp.h"
                         line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="42">A [struct@EventDataTstamp].</doc>
            <type name="EventDataTstamp"
                  c:type="const ALSATimerEventDataTstamp*"/>
          </instance-parameter>
          <parameter name="tstamp"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="43">The array with two elements for the seconds and
         nanoseconds part of timestamp when the instance queues the timestamp event.</doc>
            <array zero-terminated="0" c:type="gint64* const*" fixed-size="2">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_val"
              c:identifier="alsatimer_event_data_tstamp_get_val">
        <doc xml:space="preserve"
             filename="../src/timer/event-data-tstamp.c"
             line="55">Get the value depending on the type of timestamp event.</doc>
        <source-position filename="../src/timer/event-data-tstamp.h"
                         line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="57">A [struct@EventDataTstamp].</doc>
            <type name="EventDataTstamp"
                  c:type="const ALSATimerEventDataTstamp*"/>
          </instance-parameter>
          <parameter name="val"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/event-data-tstamp.c"
                 line="58">The value depending on the type of timestamp event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="EventDataType"
                 glib:type-name="ALSATimerEventDataType"
                 glib:get-type="alsatimer_event_data_type_get_type"
                 c:type="ALSATimerEventDataType">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="112">A set of enumerations for the type of event data.</doc>
      <member name="tick"
              value="0"
              c:identifier="ALSATIMER_EVENT_DATA_TYPE_TICK"
              glib:nick="tick"
              glib:name="ALSATIMER_EVENT_DATA_TYPE_TICK">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="114">The data for tick event.</doc>
      </member>
      <member name="tstamp"
              value="1"
              c:identifier="ALSATIMER_EVENT_DATA_TYPE_TSTAMP"
              glib:nick="tstamp"
              glib:name="ALSATIMER_EVENT_DATA_TYPE_TSTAMP">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="115">The data for timestamp event.</doc>
      </member>
    </enumeration>
    <enumeration name="EventType"
                 glib:type-name="ALSATimerEventType"
                 glib:get-type="alsatimer_event_type_get_type"
                 c:type="ALSATimerEventType">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="73">A set of enumerations for timer event.</doc>
      <member name="resolution"
              value="0"
              c:identifier="ALSATIMER_EVENT_TYPE_RESOLUTION"
              glib:nick="resolution"
              glib:name="ALSATIMER_EVENT_TYPE_RESOLUTION">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="75">The event for timer resolution.</doc>
      </member>
      <member name="tick"
              value="1"
              c:identifier="ALSATIMER_EVENT_TYPE_TICK"
              glib:nick="tick"
              glib:name="ALSATIMER_EVENT_TYPE_TICK">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="76">The event for timer tick.</doc>
      </member>
      <member name="start"
              value="2"
              c:identifier="ALSATIMER_EVENT_TYPE_START"
              glib:nick="start"
              glib:name="ALSATIMER_EVENT_TYPE_START">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="77">The event for timer start.</doc>
      </member>
      <member name="stop"
              value="3"
              c:identifier="ALSATIMER_EVENT_TYPE_STOP"
              glib:nick="stop"
              glib:name="ALSATIMER_EVENT_TYPE_STOP">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="78">The event for timer stop.</doc>
      </member>
      <member name="continue"
              value="4"
              c:identifier="ALSATIMER_EVENT_TYPE_CONTINUE"
              glib:nick="continue"
              glib:name="ALSATIMER_EVENT_TYPE_CONTINUE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="79">The event for timer continue.</doc>
      </member>
      <member name="pause"
              value="5"
              c:identifier="ALSATIMER_EVENT_TYPE_PAUSE"
              glib:nick="pause"
              glib:name="ALSATIMER_EVENT_TYPE_PAUSE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="80">The event for timer pause.</doc>
      </member>
      <member name="early"
              value="6"
              c:identifier="ALSATIMER_EVENT_TYPE_EARLY"
              glib:nick="early"
              glib:name="ALSATIMER_EVENT_TYPE_EARLY">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="81">The event before timer start.</doc>
      </member>
      <member name="suspend"
              value="7"
              c:identifier="ALSATIMER_EVENT_TYPE_SUSPEND"
              glib:nick="suspend"
              glib:name="ALSATIMER_EVENT_TYPE_SUSPEND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="82">The event for timer suspend.</doc>
      </member>
      <member name="resume"
              value="8"
              c:identifier="ALSATIMER_EVENT_TYPE_RESUME"
              glib:nick="resume"
              glib:name="ALSATIMER_EVENT_TYPE_RESUME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="83">The event for timer resume.</doc>
      </member>
      <member name="mstart"
              value="12"
              c:identifier="ALSATIMER_EVENT_TYPE_MSTART"
              glib:nick="mstart"
              glib:name="ALSATIMER_EVENT_TYPE_MSTART">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="84">The event for master timer start.</doc>
      </member>
      <member name="mstop"
              value="13"
              c:identifier="ALSATIMER_EVENT_TYPE_MSTOP"
              glib:nick="mstop"
              glib:name="ALSATIMER_EVENT_TYPE_MSTOP">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="85">The event for master timer stop.</doc>
      </member>
      <member name="mcontinue"
              value="14"
              c:identifier="ALSATIMER_EVENT_TYPE_MCONTINUE"
              glib:nick="mcontinue"
              glib:name="ALSATIMER_EVENT_TYPE_MCONTINUE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="86">The event for master timer continue.</doc>
      </member>
      <member name="mpause"
              value="15"
              c:identifier="ALSATIMER_EVENT_TYPE_MPAUSE"
              glib:nick="mpause"
              glib:name="ALSATIMER_EVENT_TYPE_MPAUSE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="87">The event for master timer pause.</doc>
      </member>
      <member name="msuspend"
              value="17"
              c:identifier="ALSATIMER_EVENT_TYPE_MSUSPEND"
              glib:nick="msuspend"
              glib:name="ALSATIMER_EVENT_TYPE_MSUSPEND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="88">The event for master timer suspend.</doc>
      </member>
      <member name="mresume"
              value="18"
              c:identifier="ALSATIMER_EVENT_TYPE_MRESUME"
              glib:nick="mresume"
              glib:name="ALSATIMER_EVENT_TYPE_MRESUME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="89">The event for master timer resume.</doc>
      </member>
    </enumeration>
    <class name="InstanceInfo"
           c:symbol-prefix="instance_info"
           c:type="ALSATimerInstanceInfo"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceInfo"
           glib:get-type="alsatimer_instance_info_get_type"
           glib:type-struct="InstanceInfoClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-info.c"
           line="4">A GObject-derived object to represent information of user instance.
A [class@InstanceInfo] is a GObject-derived object to represent information of user instance
attached to any timer device or the other instance as slave. The call of
[method@UserInstance.get_info] returns the instance of object.

The object wraps `struct snd_timer_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-info.h" line="16"/>
      <property name="card-id" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <type name="DeviceInfoFlag"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resolution" transfer-ownership="none">
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceInfoClass"
            c:type="ALSATimerInstanceInfoClass"
            glib:is-gtype-struct-for="InstanceInfo">
      <source-position filename="../src/timer/instance-info.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="InstanceParamFlag"
              glib:type-name="ALSATimerInstanceParamFlag"
              glib:get-type="alsatimer_instance_param_flag_get_type"
              c:type="ALSATimerInstanceParamFlag">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="58">A set of flags for the parameters of user client.</doc>
      <member name="auto"
              value="1"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_AUTO"
              glib:nick="auto"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_AUTO">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="60">The instance receives any events after configured.</doc>
      </member>
      <member name="exclusive"
              value="2"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_EXCLUSIVE"
              glib:nick="exclusive"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_EXCLUSIVE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="61">The instance occupies the attached timer device.</doc>
      </member>
      <member name="early_event"
              value="4"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_EARLY_EVENT"
              glib:nick="early-event"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_EARLY_EVENT">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="62">The instance receives early event after configured even if not started.</doc>
      </member>
    </bitfield>
    <class name="InstanceParams"
           c:symbol-prefix="instance_params"
           c:type="ALSATimerInstanceParams"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceParams"
           glib:get-type="alsatimer_instance_params_get_type"
           glib:type-struct="InstanceParamsClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-params.c"
           line="6">A GObject-derived object to represent parameters of user instance.
A [class@InstanceParams] is a GObject-derived object to represent parameters of user instance
attached to any timer device or the other instance as slave. The call of
[method@UserInstance.set_params] requires the instance of object.

The object wraps `struct snd_timer_params` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-params.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_instance_params_new">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="114">Allocate and return an instance of [class@InstanceParams].</doc>
        <source-position filename="../src/timer/instance-params.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/instance-params.c"
               line="119">An instance of [class@InstanceParams].</doc>
          <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
        </return-value>
      </constructor>
      <method name="get_event_filter"
              c:identifier="alsatimer_instance_params_get_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="171">Get the list of ALSATimerEventType to filter events. This parameter is effective only for target
instance with [enum@EventDataType:TIMESTAMP].</doc>
        <source-position filename="../src/timer/instance-params.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="173">A [class@InstanceParams].</doc>
            <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
          </instance-parameter>
          <parameter name="entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="174">The array with elements for entries of [enum@EventType].</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="ALSATimerEventType**">
              <type name="EventType" c:type="ALSATimerEventType*"/>
            </array>
          </parameter>
          <parameter name="entry_count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="175">The number of elements in the above array.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_event_filter"
              c:identifier="alsatimer_instance_params_set_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="126">Set the list of [enum@EventType] to filter events. This parameter is effective only for target
instance with [enum@EventDataType:TIMESTAMP].</doc>
        <source-position filename="../src/timer/instance-params.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="128">A [class@InstanceParams].</doc>
            <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
          </instance-parameter>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="129">The array with elements for entries of [enum@EventType].</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const ALSATimerEventType*">
              <type name="EventType" c:type="ALSATimerEventType"/>
            </array>
          </parameter>
          <parameter name="entry_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="130">The number of elements in the above array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="InstanceParamFlag"/>
      </property>
      <property name="interval" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="queue-size" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceParamsClass"
            c:type="ALSATimerInstanceParamsClass"
            glib:is-gtype-struct-for="InstanceParams">
      <source-position filename="../src/timer/instance-params.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="InstanceStatus"
           c:symbol-prefix="instance_status"
           c:type="ALSATimerInstanceStatus"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceStatus"
           glib:get-type="alsatimer_instance_status_get_type"
           glib:type-struct="InstanceStatusClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-status.c"
           line="4">A GObject-derived object to represent status of user instance.
A [class@InstanceStatus] is a GObject-derived object to represent status of user instance
attached to any timer device or the other instance as slave. The call of
[method@UserInstance.get_status] returns the instance of object.

The object wraps `struct snd_timer_status` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-status.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_instance_status_new">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="123">Allocate and return an instance of [class@InstanceStatus].</doc>
        <source-position filename="../src/timer/instance-status.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/instance-status.c"
               line="128">A [class@InstanceStatus].</doc>
          <type name="InstanceStatus" c:type="ALSATimerInstanceStatus*"/>
        </return-value>
      </constructor>
      <method name="get_tstamp"
              c:identifier="alsatimer_instance_status_get_tstamp">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="99">Get timestamp for the latest event.</doc>
        <source-position filename="../src/timer/instance-status.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-status.c"
                 line="101">A [class@InstanceStatus].</doc>
            <type name="InstanceStatus" c:type="ALSATimerInstanceStatus*"/>
          </instance-parameter>
          <parameter name="tstamp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-status.c"
                 line="102">The array with two elements for the seconds
         and nanoseconds parts of timestamp when the instance queues the latest event.</doc>
            <array zero-terminated="0" c:type="const gint64**" fixed-size="2">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="interval" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lost" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="overrun" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="queue-size" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceStatusClass"
            c:type="ALSATimerInstanceStatusClass"
            glib:is-gtype-struct-for="InstanceStatus">
      <source-position filename="../src/timer/instance-status.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SlaveClass"
                 glib:type-name="ALSATimerSlaveClass"
                 glib:get-type="alsatimer_slave_class_get_type"
                 c:type="ALSATimerSlaveClass">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="21">A set of enumerations for the slave class of timer instance (not timer device).</doc>
      <member name="none"
              value="0"
              c:identifier="ALSATIMER_SLAVE_CLASS_NONE"
              glib:nick="none"
              glib:name="ALSATIMER_SLAVE_CLASS_NONE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="23">The timer instance is not slave.</doc>
      </member>
      <member name="application"
              value="1"
              c:identifier="ALSATIMER_SLAVE_CLASS_APPLICATION"
              glib:nick="application"
              glib:name="ALSATIMER_SLAVE_CLASS_APPLICATION">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="24">The timer instance is slave to any application.</doc>
      </member>
      <member name="sequencer"
              value="2"
              c:identifier="ALSATIMER_SLAVE_CLASS_SEQUENCER"
              glib:nick="sequencer"
              glib:name="ALSATIMER_SLAVE_CLASS_SEQUENCER">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="25">The timer instance is slave to ALSA sequencer.</doc>
      </member>
    </enumeration>
    <enumeration name="SpecificGlobalDevice"
                 glib:type-name="ALSATimerSpecificGlobalDevice"
                 glib:get-type="alsatimer_specific_global_device_get_type"
                 c:type="ALSATimerSpecificGlobalDevice">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="35">A set of enumerations for the kind of global timer device.</doc>
      <member name="system"
              value="0"
              c:identifier="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM"
              glib:nick="system"
              glib:name="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="37">The timer device is system timer wheel.</doc>
      </member>
      <member name="hrtimer"
              value="3"
              c:identifier="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER"
              glib:nick="hrtimer"
              glib:name="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="38">The timer device is system hrtimer.</doc>
      </member>
    </enumeration>
    <class name="UserInstance"
           c:symbol-prefix="user_instance"
           c:type="ALSATimerUserInstance"
           parent="GObject.Object"
           glib:type-name="ALSATimerUserInstance"
           glib:get-type="alsatimer_user_instance_get_type"
           glib:type-struct="UserInstanceClass">
      <doc xml:space="preserve"
           filename="../src/timer/user-instance.c"
           line="13">A GObject-derived object to represent user instance.
A [class@UserInstance] is a GObject-derived object to represent information of user instance
attached to any timer device or the other instance as slave. After calling
[method@UserInstance.open], the object maintains file descriptor till object destruction. After
calling [method@UserInstance.attach] or [method@UserInstance.attach_as_slave], the user instance
is attached to any timer device or the other instance as slave.</doc>
      <source-position filename="../src/timer/user-instance.h" line="38"/>
      <constructor name="new" c:identifier="alsatimer_user_instance_new">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="183">Allocate and return an instance of [class@UserInstance].</doc>
        <source-position filename="../src/timer/user-instance.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="188">An instance of [class@UserInstance].</doc>
          <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
        </return-value>
      </constructor>
      <virtual-method name="handle_disconnection">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.h"
             line="31">Class closure for the [signal@UserInstance::handle-disconnection] signal.</doc>
        <source-position filename="../src/timer/user-instance.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="33">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_event">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.h"
             line="21">Class closure for the [signal@UserInstance::handle-event] signal.</doc>
        <source-position filename="../src/timer/user-instance.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="23">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="24">An object derived from [struct@Event].</doc>
            <type name="Event" c:type="const ALSATimerEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="attach"
              c:identifier="alsatimer_user_instance_attach"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="260">Attach the instance to the timer device. If the given device_id is for absent timer device, the
instance can be detached with error.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_SELECT` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="262">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="263">A [struct@DeviceId] to which the instance is attached.</doc>
            <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_as_slave"
              c:identifier="alsatimer_user_instance_attach_as_slave"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="294">Attach the instance as an slave to another instance indicated by a pair of slave_class and
slave_id. If the slave_class is [enum@SlaveClass:APPLICATION], the slave_id is for the PID of
application process which owns the instance of timer. If the slave_class is
[enum@SlaveClass:SEQUENCER], the slave_id is the numeric ID of queue bound for timer device.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_SELECT` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="296">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="slave_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="297">The class identifier of master instance, one of [enum@SlaveClass].</doc>
            <type name="SlaveClass" c:type="ALSATimerSlaveClass"/>
          </parameter>
          <parameter name="slave_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="298">The numeric identifier of master instance.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="choose_event_data_type"
              c:identifier="alsatimer_user_instance_choose_event_data_type"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="222">Choose the type of event data to receive.

The call of function is successful just before the instance is not attached yet.
[enum@EventDataType:TICK] is used as a default if the function is not called for
[enum@EventDataType:TSTAMP] explicitly.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_TREAD` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="224">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="event_data_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="225">The type of event data, one of [enum@EventDataType].</doc>
            <type name="EventDataType" c:type="ALSATimerEventDataType"/>
          </parameter>
        </parameters>
      </method>
      <method name="continue"
              c:identifier="alsatimer_user_instance_continue"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="638">Continue timer event emission paused by [method@UserInstance.pause].

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_CONTINUE` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="640">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="alsatimer_user_instance_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="511">Allocate [struct@GLib.Source] structure to handle events from ALSA timer character device. In
each iteration of [struct@GLib.MainContext], the `read(2)` system call is executed to dispatch
timer event for [signal@UserInstance::handle-event] signal, according to the result of `poll(2)`
system call.</doc>
        <source-position filename="../src/timer/user-instance.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="513">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="514">A [struct@GLib.Source] to handle events from ALSA timer character device.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="alsatimer_user_instance_get_info"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="329">Return the information of device if attached to the instance.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_INFO` command for
ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="331">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_info"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="332">A [class@InstanceInfo].</doc>
            <type name="InstanceInfo" c:type="ALSATimerInstanceInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_protocol_version"
              c:identifier="alsatimer_user_instance_get_protocol_version"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="195">Get the version of timer protocol currently used. The version is represented as the array with
three elements; major, minor, and micro version in the order. The length of major version is
16 bit, the length of minor and micro version is 8 bit each.</doc>
        <source-position filename="../src/timer/user-instance.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="197">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="proto_ver_triplet"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="198">The version of protocol currently
                    used.</doc>
            <array zero-terminated="0" c:type="const guint16**" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="alsatimer_user_instance_get_status"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="399">Get the latest status of instance.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_STATUS` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="401">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_status"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="402">A [class@InstanceStatus].</doc>
            <type name="InstanceStatus"
                  c:type="ALSATimerInstanceStatus* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="alsatimer_user_instance_open"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="128">Open ALSA Timer character device to allocate queue.

The call of function executes `open(2)` system call for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="130">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="open_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="131">The flag of `open(2)` system call. `O_RDONLY` is forced to fulfil internally.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause"
              c:identifier="alsatimer_user_instance_pause"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="611">Pause timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_PAUSE` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="613">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_params"
              c:identifier="alsatimer_user_instance_set_params"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="365">Configure the instance with the parameters and return the latest parameters.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_PARAMS` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="367">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_params"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="368">A [class@InstanceParams].</doc>
            <type name="InstanceParams"
                  c:type="ALSATimerInstanceParams* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="alsatimer_user_instance_start"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="557">Start timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_START` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="559">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop"
              c:identifier="alsatimer_user_instance_stop"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="584">Stop timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_STOP` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="586">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="handle-disconnection" when="last">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="102">Emitted when the attached timer device is not available anymore due to unbinding driver or
hot unplugging. The owner of this object should call [method@GObject.Object.unref] as quickly
as possible to release ALSA timer character device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-event" when="last">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="86">Emitted when event occurs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="89">The instance of [struct@Event].</doc>
            <type name="Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="UserInstanceClass"
            c:type="ALSATimerUserInstanceClass"
            glib:is-gtype-struct-for="UserInstance">
      <source-position filename="../src/timer/user-instance.h" line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="handle_event">
        <callback name="handle_event">
          <source-position filename="../src/timer/user-instance.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="23">A [class@UserInstance].</doc>
              <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="24">An object derived from [struct@Event].</doc>
              <type name="Event" c:type="const ALSATimerEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnection">
        <callback name="handle_disconnection">
          <source-position filename="../src/timer/user-instance.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="33">A [class@UserInstance].</doc>
              <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="UserInstanceError"
                 glib:type-name="ALSATimerUserInstanceError"
                 glib:get-type="alsatimer_user_instance_error_get_type"
                 c:type="ALSATimerUserInstanceError"
                 glib:error-domain="alsatimer-user-instance-error-quark">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="124">A set of error code for [struct@GLib.Error] with `ALSATimer.UserInstanceError` domain.</doc>
      <member name="failed"
              value="0"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_FAILED"
              glib:nick="failed"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="126">The system call failed.</doc>
      </member>
      <member name="timer_not_found"
              value="1"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND"
              glib:nick="timer-not-found"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="127">The timer instance is not found.</doc>
      </member>
      <member name="not_attached"
              value="2"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED"
              glib:nick="not-attached"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="128">The timer instance is not attached to any timer
                                                 device or the other instance.</doc>
      </member>
      <member name="attached"
              value="3"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_ATTACHED"
              glib:nick="attached"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_ATTACHED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="130">The timer instance is already attached to timer
                                                 device or the other instance.</doc>
      </member>
      <function name="quark"
                c:identifier="alsatimer_user_instance_error_quark">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="30">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in [enum@UserInstanceError]
enumerations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="36">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function name="get_device_id_list"
              c:identifier="alsatimer_get_device_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="77">Get the list of existent timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_NEXT_DEVICE` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="13"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="79">The array with entries of [struct@DeviceId].</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="DeviceId"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="get_device_info"
              c:identifier="alsatimer_get_device_info"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="118">Get the information of timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GINFO` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="15"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="120">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="121">The information of timer device.</doc>
          <type name="DeviceInfo" c:type="ALSATimerDeviceInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_device_status"
              c:identifier="alsatimer_get_device_status"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="156">Get the status of timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GSTATUS` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="158">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_status"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="159">The status of timer device.</doc>
          <type name="DeviceStatus" c:type="ALSATimerDeviceStatus* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_devnode"
              c:identifier="alsatimer_get_devnode"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="39">Allocate string of devnode for ALSA Timer and return it if exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/timer/query.h" line="11"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="devnode"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="41">The string for devnode of ALSA Timer.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_sysname"
              c:identifier="alsatimer_get_sysname"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="18">Allocate sysname for ALSA Timer and return it when it exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/timer/query.h" line="9"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sysname"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="20">The string for sysname of ALSA Timer.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_tstamp_source"
              c:identifier="alsatimer_get_tstamp_source"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="261">Get the clock source for timestamp when [class@UserInstance] is configured to receive event
with timestamp. The source is selected according to parameter of `snd-timer` kernel module,
and the call of function is just to refer to it.

`0` means `CLOCK_REALTIME` is used. `1` means `CLOCK_MONOTONIC` is used.

The call of function executes `open(2)`, `read(2)`, `close(2)` system calls for the sysfs node
corresponding to `snd-timer` kernel module.</doc>
      <source-position filename="../src/timer/query.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="clock_id"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="263">The clock source for timestamp. The value of `CLOCK_XXX` in UAPI of Linux
           kernel.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_device_params"
              c:identifier="alsatimer_set_device_params"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="193">Set the given parameters to the timer indicated by the identifier.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GPARAMS` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="23"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="195">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="196">The parameters of timer device.</doc>
          <type name="DeviceParams" c:type="const ALSATimerDeviceParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_instance_error_quark"
              c:identifier="alsatimer_user_instance_error_quark"
              moved-to="UserInstanceError.quark">
      <doc xml:space="preserve"
           filename="../src/timer/user-instance.c"
           line="30">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in [enum@UserInstanceError]
enumerations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="36">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>

<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="alsatimer"/>
  <c:include name="alsatimer.h"/>
  <namespace name="ALSATimer"
             version="0.0"
             shared-library="libalsatimer.so.0"
             c:identifier-prefixes="ALSATimer"
             c:symbol-prefixes="alsatimer_">
    <enumeration name="Class"
                 glib:type-name="ALSATimerClass"
                 glib:get-type="alsatimer_class_get_type"
                 c:type="ALSATimerClass">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="7">A set of enumerations for the class of timer device.</doc>
      <member name="none"
              value="-1"
              c:identifier="ALSATIMER_CLASS_NONE"
              glib:nick="none"
              glib:name="ALSATIMER_CLASS_NONE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="9">Invalid.</doc>
      </member>
      <member name="global"
              value="1"
              c:identifier="ALSATIMER_CLASS_GLOBAL"
              glib:nick="global"
              glib:name="ALSATIMER_CLASS_GLOBAL">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="10">The timer device is relevant to system.</doc>
      </member>
      <member name="card"
              value="2"
              c:identifier="ALSATIMER_CLASS_CARD"
              glib:nick="card"
              glib:name="ALSATIMER_CLASS_CARD">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="11">The timer device is relevant to sound card.</doc>
      </member>
      <member name="pcm"
              value="3"
              c:identifier="ALSATIMER_CLASS_PCM"
              glib:nick="pcm"
              glib:name="ALSATIMER_CLASS_PCM">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="12">The timer device is relevant to PCM device.</doc>
      </member>
    </enumeration>
    <record name="DeviceId"
            c:type="ALSATimerDeviceId"
            glib:type-name="ALSATimerDeviceId"
            glib:get-type="alsatimer_device_id_get_type"
            c:symbol-prefix="device_id">
      <doc xml:space="preserve"
           filename="../src/timer/device-id.c"
           line="4">A boxed object to express the identifier of timer device.
A [struct@DeviceId] is a boxed object to express the identifier of timer device. The
identifier mainly consists of the class of timer device. The other members; the numeric ID of
card, device, and subdevice are optional according to the class of timer device.

The object wraps `struct snd_timer_id` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-id.h" line="11"/>
      <constructor name="new" c:identifier="alsatimer_device_id_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="29">Allocate and return an instance of [struct@DeviceId].</doc>
        <source-position filename="../src/timer/device-id.h" line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-id.c"
               line="38">A [struct@DeviceId].</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </return-value>
        <parameters>
          <parameter name="class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="31">The class of device, one of [enum@Class].</doc>
            <type name="Class" c:type="ALSATimerClass"/>
          </parameter>
          <parameter name="card_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="32">The numeric ID of relevant sound card.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="33">The numeric ID of relevant device.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="subdevice_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="34">The numeric ID of relevant subdevice.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_card_id"
              c:identifier="alsatimer_device_id_get_card_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="67">Get the numeric ID of sound card to which the device belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="69">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="card_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="70">The numeric ID of sound card to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_class" c:identifier="alsatimer_device_id_get_class">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="54">Get the class of timer.</doc>
        <source-position filename="../src/timer/device-id.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="56">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="class"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="57">The class of timer, one of [enum@Class].</doc>
            <type name="Class" c:type="ALSATimerClass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_id"
              c:identifier="alsatimer_device_id_get_device_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="80">Get the numeric ID of device to which the timer belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="82">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="device_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="83">The numeric ID of device to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subdevice_id"
              c:identifier="alsatimer_device_id_get_subdevice_id">
        <doc xml:space="preserve"
             filename="../src/timer/device-id.c"
             line="93">Get the numeric ID of subdevice to which the timer belongs.</doc>
        <source-position filename="../src/timer/device-id.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="95">A [struct@DeviceId].</doc>
            <type name="DeviceId" c:type="const ALSATimerDeviceId*"/>
          </instance-parameter>
          <parameter name="subdevice_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/device-id.c"
                 line="96">The numeric ID of subdevice to which the timer belongs.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="DeviceInfo"
           c:symbol-prefix="device_info"
           c:type="ALSATimerDeviceInfo"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceInfo"
           glib:get-type="alsatimer_device_info_get_type"
           glib:type-struct="DeviceInfoClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-info.c"
           line="4">A GObject-derived object to express information of timer device.
A [class@DeviceInfo] is a GObject-derived object to express information of timer device.
The call of alsatimer_get_device_info() returns an instance of the object according to the
identifier of timer device.

The object wraps `struct snd_timer_ginfo` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-info.h" line="16"/>
      <property name="card-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="88">The numeric ID of sound card.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="76">The flags of timer, one of [flags@DeviceInfoFlag].</doc>
        <type name="DeviceInfoFlag"/>
      </property>
      <property name="id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="100">The string ID of timer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="instance-count" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="158">The number of instances for the timer.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="111">The name of timer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resolution" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="122">The resolution in nano seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-max" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="146">The maximum resolution in nano seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-min" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-info.c"
             line="134">The minimum resolution in nano seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceInfoClass"
            c:type="ALSATimerDeviceInfoClass"
            glib:is-gtype-struct-for="DeviceInfo">
      <source-position filename="../src/timer/device-info.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="DeviceInfoFlag"
              glib:type-name="ALSATimerDeviceInfoFlag"
              glib:get-type="alsatimer_device_info_flag_get_type"
              c:type="ALSATimerDeviceInfoFlag">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="49">A set of flags for the information of timer device.</doc>
      <member name="slave"
              value="1"
              c:identifier="ALSATIMER_DEVICE_INFO_FLAG_SLAVE"
              glib:nick="slave"
              glib:name="ALSATIMER_DEVICE_INFO_FLAG_SLAVE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="51">The timer device is slave to any timer device.</doc>
      </member>
    </bitfield>
    <class name="DeviceParams"
           c:symbol-prefix="device_params"
           c:type="ALSATimerDeviceParams"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceParams"
           glib:get-type="alsatimer_device_params_get_type"
           glib:type-struct="DeviceParamsClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-params.c"
           line="4">A GObject-derived object to express parameter of timer device.
A [class@DeviceParams] is a GObject-derived object to express parameter of timer device. The
call of alsatimer_set_device_params() requires the instance of object.

The object wraps `struct snd_timer_gparams` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-params.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_device_params_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-params.c"
             line="105">Instantiate [class@DeviceParams] object and return the instance.</doc>
        <source-position filename="../src/timer/device-params.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-params.c"
               line="110">an instance of [class@DeviceParams].</doc>
          <type name="DeviceParams" c:type="ALSATimerDeviceParams*"/>
        </return-value>
      </constructor>
      <property name="period-denominator"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-params.c"
             line="84">The denominator of period for timer.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="period-numerator" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-params.c"
             line="72">The numerator of period for timer.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceParamsClass"
            c:type="ALSATimerDeviceParamsClass"
            glib:is-gtype-struct-for="DeviceParams">
      <source-position filename="../src/timer/device-params.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DeviceStatus"
           c:symbol-prefix="device_status"
           c:type="ALSATimerDeviceStatus"
           parent="GObject.Object"
           glib:type-name="ALSATimerDeviceStatus"
           glib:get-type="alsatimer_device_status_get_type"
           glib:type-struct="DeviceStatusClass">
      <doc xml:space="preserve"
           filename="../src/timer/device-status.c"
           line="4">A GObject-derived object to express status of timer device.
A [class@DeviceStatus] is a GObject-derived object to express status of timer device. The
call of [func@get_device_status] returns the instance of object.

The object wraps 'struct snd_timer_gstatus' in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/device-status.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_device_status_new">
        <doc xml:space="preserve"
             filename="../src/timer/device-status.c"
             line="102">Allocate and return an instance of [class@DeviceStatus].</doc>
        <source-position filename="../src/timer/device-status.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/device-status.c"
               line="107">An instance of [class@DeviceStatus].</doc>
          <type name="DeviceStatus" c:type="ALSATimerDeviceStatus*"/>
        </return-value>
      </constructor>
      <property name="resolution" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-status.c"
             line="56">The current resolution in nano seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-denominator" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-status.c"
             line="80">The denominator of current resolution in seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="resolution-numerator" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/device-status.c"
             line="68">The numerator of current resolution in seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceStatusClass"
            c:type="ALSATimerDeviceStatusClass"
            glib:is-gtype-struct-for="DeviceStatus">
      <source-position filename="../src/timer/device-status.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="EventType"
                 glib:type-name="ALSATimerEventType"
                 glib:get-type="alsatimer_event_type_get_type"
                 c:type="ALSATimerEventType">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="114">A set of enumerations for the type of event.</doc>
      <member name="tick_time"
              value="0"
              c:identifier="ALSATIMER_EVENT_TYPE_TICK_TIME"
              glib:nick="tick-time"
              glib:name="ALSATIMER_EVENT_TYPE_TICK_TIME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="116">Event for tick time.</doc>
      </member>
      <member name="real_time"
              value="1"
              c:identifier="ALSATIMER_EVENT_TYPE_REAL_TIME"
              glib:nick="real-time"
              glib:name="ALSATIMER_EVENT_TYPE_REAL_TIME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="117">Event for real time.</doc>
      </member>
    </enumeration>
    <class name="InstanceInfo"
           c:symbol-prefix="instance_info"
           c:type="ALSATimerInstanceInfo"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceInfo"
           glib:get-type="alsatimer_instance_info_get_type"
           glib:type-struct="InstanceInfoClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-info.c"
           line="4">A GObject-derived object to express information of user instance.
A [class@InstanceInfo] is a GObject-derived object to express information of user instance
attached to any timer device or the other instance as slave. The call of
[method@UserInstance.get_info] returns the instance of object.

The object wraps `struct snd_timer_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-info.h" line="16"/>
      <property name="card-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-info.c"
             line="76">The numeric ID of sound card for attached timer.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-info.c"
             line="64">The flags for attached timer.</doc>
        <type name="DeviceInfoFlag"/>
      </property>
      <property name="id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-info.c"
             line="88">The string ID of attached timer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-info.c"
             line="99">The name of attached timer.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resolution" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-info.c"
             line="110">The resolution of attached timer in nano seconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceInfoClass"
            c:type="ALSATimerInstanceInfoClass"
            glib:is-gtype-struct-for="InstanceInfo">
      <source-position filename="../src/timer/instance-info.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="InstanceParamFlag"
              glib:type-name="ALSATimerInstanceParamFlag"
              glib:get-type="alsatimer_instance_param_flag_get_type"
              c:type="ALSATimerInstanceParamFlag">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="60">A set of flags for the parameters of user client.</doc>
      <member name="auto"
              value="1"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_AUTO"
              glib:nick="auto"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_AUTO">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="62">The instance receives any events after configured.</doc>
      </member>
      <member name="exclusive"
              value="2"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_EXCLUSIVE"
              glib:nick="exclusive"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_EXCLUSIVE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="63">The instance occupies the attached timer device.</doc>
      </member>
      <member name="early_event"
              value="4"
              c:identifier="ALSATIMER_INSTANCE_PARAM_FLAG_EARLY_EVENT"
              glib:nick="early-event"
              glib:name="ALSATIMER_INSTANCE_PARAM_FLAG_EARLY_EVENT">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="64">The instance receives early event after configured even if not started.</doc>
      </member>
    </bitfield>
    <class name="InstanceParams"
           c:symbol-prefix="instance_params"
           c:type="ALSATimerInstanceParams"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceParams"
           glib:get-type="alsatimer_instance_params_get_type"
           glib:type-struct="InstanceParamsClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-params.c"
           line="6">A GObject-derived object to express parameters of user instance.
A [class@InstanceParams] is a GObject-derived object to express parameters of user instance
attached to any timer device or the other instance as slave. The call of
[method@UserInstance.set_params] requires the instance of object.

The object wraps `struct snd_timer_params` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-params.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_instance_params_new">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="128">Allocate and return an instance of [class@InstanceParams].</doc>
        <source-position filename="../src/timer/instance-params.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/instance-params.c"
               line="133">An instance of [class@InstanceParams].</doc>
          <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
        </return-value>
      </constructor>
      <method name="get_event_filter"
              c:identifier="alsatimer_instance_params_get_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="189">Get the list of [enum@RealTimeEventType] to filter events. This parameter is effective only for
target instance with [enum@EventType].REAL_TIME.</doc>
        <source-position filename="../src/timer/instance-params.h" line="24"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/instance-params.c"
               line="200">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="191">A [class@InstanceParams].</doc>
            <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
          </instance-parameter>
          <parameter name="entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="192">The array with elements for entries of
          [enum@RealTimeEventType].</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="ALSATimerRealTimeEventType**">
              <type name="RealTimeEventType"
                    c:type="ALSATimerRealTimeEventType*"/>
            </array>
          </parameter>
          <parameter name="entry_count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="194">The number of elements in the above array.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_event_filter"
              c:identifier="alsatimer_instance_params_set_event_filter"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="140">Set the list of [enum@RealTimeEventType] to filter events. This parameter is effective only for
target instance with [enum@EventType].TIMESTAMP.</doc>
        <source-position filename="../src/timer/instance-params.h" line="20"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/instance-params.c"
               line="151">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="142">A [class@InstanceParams].</doc>
            <type name="InstanceParams" c:type="ALSATimerInstanceParams*"/>
          </instance-parameter>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="143">The array with elements for entries of
          [enum@RealTimeEventType].</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const ALSATimerRealTimeEventType*">
              <type name="RealTimeEventType"
                    c:type="ALSATimerRealTimeEventType"/>
            </array>
          </parameter>
          <parameter name="entry_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-params.c"
                 line="145">The number of elements in the above array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="82">The flags for user instance, as a set of [flags@InstanceParamFlag].</doc>
        <type name="InstanceParamFlag"/>
      </property>
      <property name="interval" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="94">The interval to generate event in tick count.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="queue-size" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-params.c"
             line="106">The size of queue.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceParamsClass"
            c:type="ALSATimerInstanceParamsClass"
            glib:is-gtype-struct-for="InstanceParams">
      <source-position filename="../src/timer/instance-params.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="InstanceStatus"
           c:symbol-prefix="instance_status"
           c:type="ALSATimerInstanceStatus"
           parent="GObject.Object"
           glib:type-name="ALSATimerInstanceStatus"
           glib:get-type="alsatimer_instance_status_get_type"
           glib:type-struct="InstanceStatusClass">
      <doc xml:space="preserve"
           filename="../src/timer/instance-status.c"
           line="4">A GObject-derived object to express status of user instance.
A [class@InstanceStatus] is a GObject-derived object to express status of user instance attached
to any timer device or the other instance as slave. The call of [method@UserInstance.get_status]
returns the instance of object.

The object wraps `struct snd_timer_status` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/instance-status.h" line="16"/>
      <constructor name="new" c:identifier="alsatimer_instance_status_new">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="143">Allocate and return an instance of [class@InstanceStatus].</doc>
        <source-position filename="../src/timer/instance-status.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/instance-status.c"
               line="148">A [class@InstanceStatus].</doc>
          <type name="InstanceStatus" c:type="ALSATimerInstanceStatus*"/>
        </return-value>
      </constructor>
      <method name="get_time"
              c:identifier="alsatimer_instance_status_get_time">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="119">Get real time at which the timer starts, stops, pauses, and continues.</doc>
        <source-position filename="../src/timer/instance-status.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-status.c"
                 line="121">A [class@InstanceStatus].</doc>
            <type name="InstanceStatus" c:type="ALSATimerInstanceStatus*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/instance-status.c"
                 line="122">The array with two elements for the
            seconds and nanoseconds parts of timestamp when the instance queues the latest
            event.</doc>
            <array zero-terminated="0" c:type="const gint64**" fixed-size="2">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="interval" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="61">The current interval in nano second.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="lost" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="73">The count of losts master ticks.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="overrun" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="85">The count of overrun in read queue.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="queue-size" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/instance-status.c"
             line="97">The current size of queue.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="InstanceStatusClass"
            c:type="ALSATimerInstanceStatusClass"
            glib:is-gtype-struct-for="InstanceStatus">
      <source-position filename="../src/timer/instance-status.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RealTimeEvent"
            c:type="ALSATimerRealTimeEvent"
            glib:type-name="ALSATimerRealTimeEvent"
            glib:get-type="alsatimer_real_time_event_get_type"
            c:symbol-prefix="real_time_event">
      <doc xml:space="preserve"
           filename="../src/timer/real-time-event.c"
           line="4">A boxed object to express event of timer with real time.
A [struct@RealTimeEvent] includes real time at which the event is queued.

The object wraps `struct snd_timer_tread` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/real-time-event.h" line="11"/>
      <method name="get_event"
              c:identifier="alsatimer_real_time_event_get_event">
        <doc xml:space="preserve"
             filename="../src/timer/real-time-event.c"
             line="27">Get the kind of event for the real time event.</doc>
        <source-position filename="../src/timer/real-time-event.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="29">A [struct@RealTimeEvent].</doc>
            <type name="RealTimeEvent" c:type="const ALSATimerRealTimeEvent*"/>
          </instance-parameter>
          <parameter name="event"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="30">The type of real time event, one of [enum@RealTimeEventType].</doc>
            <type name="RealTimeEventType"
                  c:type="ALSATimerRealTimeEventType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_time"
              c:identifier="alsatimer_real_time_event_get_time">
        <doc xml:space="preserve"
             filename="../src/timer/real-time-event.c"
             line="40">Get the seconds and nanoseconds part for the real time event.</doc>
        <source-position filename="../src/timer/real-time-event.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="42">A [struct@RealTimeEvent].</doc>
            <type name="RealTimeEvent" c:type="const ALSATimerRealTimeEvent*"/>
          </instance-parameter>
          <parameter name="real_time"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="43">The array with two elements for the seconds and
            nanoseconds part of timestamp when the real time event occurs.</doc>
            <array zero-terminated="0" c:type="gint64* const*" fixed-size="2">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_val" c:identifier="alsatimer_real_time_event_get_val">
        <doc xml:space="preserve"
             filename="../src/timer/real-time-event.c"
             line="55">Get the value depending on the type of real time event.</doc>
        <source-position filename="../src/timer/real-time-event.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="57">A [struct@RealTimeEvent].</doc>
            <type name="RealTimeEvent" c:type="const ALSATimerRealTimeEvent*"/>
          </instance-parameter>
          <parameter name="val"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/real-time-event.c"
                 line="58">The value depending on the type of timestamp event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RealTimeEventType"
                 glib:type-name="ALSATimerRealTimeEventType"
                 glib:get-type="alsatimer_real_time_event_type_get_type"
                 c:type="ALSATimerRealTimeEventType">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="75">A set of enumerations for the type of real time event.</doc>
      <member name="resolution"
              value="0"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_RESOLUTION"
              glib:nick="resolution"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_RESOLUTION">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="77">The event for timer resolution.</doc>
      </member>
      <member name="tick"
              value="1"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_TICK"
              glib:nick="tick"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_TICK">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="78">The event for timer tick.</doc>
      </member>
      <member name="start"
              value="2"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_START"
              glib:nick="start"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_START">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="79">The event for timer start.</doc>
      </member>
      <member name="stop"
              value="3"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_STOP"
              glib:nick="stop"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_STOP">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="80">The event for timer stop.</doc>
      </member>
      <member name="continue"
              value="4"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_CONTINUE"
              glib:nick="continue"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_CONTINUE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="81">The event for timer continue.</doc>
      </member>
      <member name="pause"
              value="5"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_PAUSE"
              glib:nick="pause"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_PAUSE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="82">The event for timer pause.</doc>
      </member>
      <member name="early"
              value="6"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_EARLY"
              glib:nick="early"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_EARLY">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="83">The event before timer start.</doc>
      </member>
      <member name="suspend"
              value="7"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_SUSPEND"
              glib:nick="suspend"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_SUSPEND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="84">The event for timer suspend.</doc>
      </member>
      <member name="resume"
              value="8"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_RESUME"
              glib:nick="resume"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_RESUME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="85">The event for timer resume.</doc>
      </member>
      <member name="mstart"
              value="12"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MSTART"
              glib:nick="mstart"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MSTART">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="86">The event for master timer start.</doc>
      </member>
      <member name="mstop"
              value="13"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MSTOP"
              glib:nick="mstop"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MSTOP">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="87">The event for master timer stop.</doc>
      </member>
      <member name="mcontinue"
              value="14"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MCONTINUE"
              glib:nick="mcontinue"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MCONTINUE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="88">The event for master timer continue.</doc>
      </member>
      <member name="mpause"
              value="15"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MPAUSE"
              glib:nick="mpause"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MPAUSE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="89">The event for master timer pause.</doc>
      </member>
      <member name="msuspend"
              value="17"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MSUSPEND"
              glib:nick="msuspend"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MSUSPEND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="90">The event for master timer suspend.</doc>
      </member>
      <member name="mresume"
              value="18"
              c:identifier="ALSATIMER_REAL_TIME_EVENT_TYPE_MRESUME"
              glib:nick="mresume"
              glib:name="ALSATIMER_REAL_TIME_EVENT_TYPE_MRESUME">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="91">The event for master timer resume.</doc>
      </member>
    </enumeration>
    <enumeration name="SlaveClass"
                 glib:type-name="ALSATimerSlaveClass"
                 glib:get-type="alsatimer_slave_class_get_type"
                 c:type="ALSATimerSlaveClass">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="23">A set of enumerations for the slave class of timer instance (not timer device).</doc>
      <member name="none"
              value="0"
              c:identifier="ALSATIMER_SLAVE_CLASS_NONE"
              glib:nick="none"
              glib:name="ALSATIMER_SLAVE_CLASS_NONE">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="25">The timer instance is not slave.</doc>
      </member>
      <member name="application"
              value="1"
              c:identifier="ALSATIMER_SLAVE_CLASS_APPLICATION"
              glib:nick="application"
              glib:name="ALSATIMER_SLAVE_CLASS_APPLICATION">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="26">The timer instance is slave to any application.</doc>
      </member>
      <member name="sequencer"
              value="2"
              c:identifier="ALSATIMER_SLAVE_CLASS_SEQUENCER"
              glib:nick="sequencer"
              glib:name="ALSATIMER_SLAVE_CLASS_SEQUENCER">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="27">The timer instance is slave to ALSA sequencer.</doc>
      </member>
    </enumeration>
    <enumeration name="SpecificGlobalDevice"
                 glib:type-name="ALSATimerSpecificGlobalDevice"
                 glib:get-type="alsatimer_specific_global_device_get_type"
                 c:type="ALSATimerSpecificGlobalDevice">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="37">A set of enumerations for the kind of global timer device.</doc>
      <member name="system"
              value="0"
              c:identifier="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM"
              glib:nick="system"
              glib:name="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="39">The timer device is system timer wheel.</doc>
      </member>
      <member name="hrtimer"
              value="3"
              c:identifier="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER"
              glib:nick="hrtimer"
              glib:name="ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="40">The timer device is system hrtimer.</doc>
      </member>
    </enumeration>
    <record name="TickTimeEvent"
            c:type="ALSATimerTickTimeEvent"
            glib:type-name="ALSATimerTickTimeEvent"
            glib:get-type="alsatimer_tick_time_event_get_type"
            c:symbol-prefix="tick_time_event">
      <doc xml:space="preserve"
           filename="../src/timer/tick-time-event.c"
           line="4">A boxed object to express event of timer with tick count.
A [struct@TickTimeEvent] includes tick count at which the event is queued.

The object wraps `struct snd_timer_read` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/timer/tick-time-event.h" line="11"/>
      <method name="get_count"
              c:identifier="alsatimer_tick_time_event_get_count">
        <doc xml:space="preserve"
             filename="../src/timer/tick-time-event.c"
             line="40">Get the tick count since the last event.</doc>
        <source-position filename="../src/timer/tick-time-event.h" line="18"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/tick-time-event.c"
                 line="42">A [struct@TickTimeEvent].</doc>
            <type name="TickTimeEvent" c:type="const ALSATimerTickTimeEvent*"/>
          </instance-parameter>
          <parameter name="count"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/tick-time-event.c"
                 line="43">The tick count since the last event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resolution"
              c:identifier="alsatimer_tick_time_event_get_resolution">
        <doc xml:space="preserve"
             filename="../src/timer/tick-time-event.c"
             line="27">Get the resolution of tick event.</doc>
        <source-position filename="../src/timer/tick-time-event.h" line="15"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/tick-time-event.c"
                 line="29">A [struct@TickTimeEvent].</doc>
            <type name="TickTimeEvent" c:type="const ALSATimerTickTimeEvent*"/>
          </instance-parameter>
          <parameter name="resolution"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/tick-time-event.c"
                 line="30">The resolution of tick event.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="UserInstance"
           c:symbol-prefix="user_instance"
           c:type="ALSATimerUserInstance"
           parent="GObject.Object"
           glib:type-name="ALSATimerUserInstance"
           glib:get-type="alsatimer_user_instance_get_type"
           glib:type-struct="UserInstanceClass">
      <doc xml:space="preserve"
           filename="../src/timer/user-instance.c"
           line="13">A GObject-derived object to express user instance.
A [class@UserInstance] is a GObject-derived object to express information of user instance
attached to any timer device or the other instance as slave. After calling
[method@UserInstance.open], the object maintains file descriptor till object destruction. After
calling [method@UserInstance.attach] or [method@UserInstance.attach_as_slave], the user instance
is attached to any timer device or the other instance as slave.</doc>
      <source-position filename="../src/timer/user-instance.h" line="47"/>
      <constructor name="new" c:identifier="alsatimer_user_instance_new">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="202">Allocate and return an instance of [class@UserInstance].</doc>
        <source-position filename="../src/timer/user-instance.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="207">An instance of [class@UserInstance].</doc>
          <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
        </return-value>
      </constructor>
      <virtual-method name="handle_disconnection">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.h"
             line="40">Class closure for the [signal@UserInstance::handle-disconnection] signal.</doc>
        <source-position filename="../src/timer/user-instance.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="42">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_real_time_event">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.h"
             line="31">Class closure for the [signal@UserInstance::handle-real-time-event] signal.</doc>
        <source-position filename="../src/timer/user-instance.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="33">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="34">An object derived from [struct@RealTimeEvent].</doc>
            <type name="RealTimeEvent" c:type="const ALSATimerRealTimeEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_tick_time_event">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.h"
             line="21">Class closure for the [signal@UserInstance::handle-tick-time-event] signal.</doc>
        <source-position filename="../src/timer/user-instance.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="23">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.h"
                 line="24">An object derived from [struct@TickTimeEvent].</doc>
            <type name="TickTimeEvent" c:type="const ALSATimerTickTimeEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="attach"
              c:identifier="alsatimer_user_instance_attach"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="289">Attach the instance to the timer device. If the given device_id is for absent timer device, the
instance can be detached with error.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_SELECT` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="301">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="291">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="292">A [struct@DeviceId] to which the instance is attached.</doc>
            <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_as_slave"
              c:identifier="alsatimer_user_instance_attach_as_slave"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="327">Attach the instance as an slave to another instance indicated by a pair of slave_class and
slave_id. If the slave_class is [enum@SlaveClass:APPLICATION], the slave_id is for the PID of
application process which owns the instance of timer. If the slave_class is
[enum@SlaveClass:SEQUENCER], the slave_id is the numeric ID of queue bound for timer device.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_SELECT` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="342">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="329">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="slave_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="330">The class identifier of master instance, one of [enum@SlaveClass].</doc>
            <type name="SlaveClass" c:type="ALSATimerSlaveClass"/>
          </parameter>
          <parameter name="slave_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="331">The numeric identifier of master instance.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="choose_event_type"
              c:identifier="alsatimer_user_instance_choose_event_type"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="245">Choose the type of event data to receive.

The call of function is successful just before call of [method@UserInstance.attach].
[enum@EventType].TICK_TIME is used as a default if the function is not called for
[enum@EventType].REAL_TIME explicitly. When the former is configured, event for tick time is
available for [signal@UserInstance::handle_tick_time_event]. When the latter is configured,
event for real time is available for [signal@UserInstance::handle_real_time_event].

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_TREAD` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="262">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="247">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="event_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="248">The type of event data, one of [enum@EventType].</doc>
            <type name="EventType" c:type="ALSATimerEventType"/>
          </parameter>
        </parameters>
      </method>
      <method name="continue"
              c:identifier="alsatimer_user_instance_continue"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="730">Continue timer event emission paused by [method@UserInstance.pause].

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_CONTINUE` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="740">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="732">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="alsatimer_user_instance_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="583">Allocate [struct@GLib.Source] structure to handle events from ALSA timer character device. In
each iteration of [struct@GLib.MainContext], the `read(2)` system call is executed to dispatch
timer event for either [signal@UserInstance::handle-tick-time-event] or
[signal@UserInstance::handle-real-time-event] signals, according to the result of `poll(2)`
system call.</doc>
        <source-position filename="../src/timer/user-instance.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="595">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="585">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="586">A [struct@GLib.Source] to handle events from ALSA timer character device.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="alsatimer_user_instance_get_info"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="368">Return the information of device if attached to the instance.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_INFO` command for
ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="379">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="370">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_info"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="371">A [class@InstanceInfo].</doc>
            <type name="InstanceInfo" c:type="ALSATimerInstanceInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_protocol_version"
              c:identifier="alsatimer_user_instance_get_protocol_version"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="214">Get the version of timer protocol currently used. The version is expressed as the array with
three elements; major, minor, and micro version in the order. The length of major version is
16 bit, the length of minor and micro version is 8 bit each.</doc>
        <source-position filename="../src/timer/user-instance.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="225">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="216">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="proto_ver_triplet"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="217">The version of protocol currently
                    used.</doc>
            <array zero-terminated="0" c:type="const guint16**" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="alsatimer_user_instance_get_status"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="448">Get the latest status of instance.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_STATUS` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="459">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="450">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_status"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="451">A [class@InstanceStatus].</doc>
            <type name="InstanceStatus"
                  c:type="ALSATimerInstanceStatus* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="alsatimer_user_instance_open"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="145">Open ALSA Timer character device to allocate queue.

The call of function executes `open(2)` system call for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="156">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="147">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="open_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="148">The flag of `open(2)` system call. `O_RDONLY` is forced to fulfil internally.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause"
              c:identifier="alsatimer_user_instance_pause"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="698">Pause timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_PAUSE` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="708">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="700">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_params"
              c:identifier="alsatimer_user_instance_set_params"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="409">Configure the instance with the parameters and return the latest parameters.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_PARAMS` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="420">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="411">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
          <parameter name="instance_params"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="412">A [class@InstanceParams].</doc>
            <type name="InstanceParams"
                  c:type="ALSATimerInstanceParams* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="alsatimer_user_instance_start"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="634">Start timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_START` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="644">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="636">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop"
              c:identifier="alsatimer_user_instance_stop"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="666">Stop timer event emission.

The call of function executes `ioctl(2)` system call with `SNDRV_TIMER_IOCTL_STOP` command
for ALSA timer character device.</doc>
        <source-position filename="../src/timer/user-instance.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="676">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="668">A [class@UserInstance].</doc>
            <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="handle-disconnection" when="last">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="119">Emitted when the attached timer device is not available anymore due to unbinding driver or
hot unplugging. The owner of this object should call [method@GObject.Object.unref] as quickly
as possible to release ALSA timer character device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-real-time-event" when="last">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="103">Emitted when event occurs to notify real time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="106">The instance of [struct@RealTimeEvent].</doc>
            <type name="RealTimeEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-tick-time-event" when="last">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="87">Emitted when event occurs to notify tick time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/timer/user-instance.c"
                 line="90">The instance of [struct@TickTimeEvent].</doc>
            <type name="TickTimeEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="UserInstanceClass"
            c:type="ALSATimerUserInstanceClass"
            glib:is-gtype-struct-for="UserInstance">
      <source-position filename="../src/timer/user-instance.h" line="47"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="handle_tick_time_event">
        <callback name="handle_tick_time_event">
          <source-position filename="../src/timer/user-instance.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="23">A [class@UserInstance].</doc>
              <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="24">An object derived from [struct@TickTimeEvent].</doc>
              <type name="TickTimeEvent"
                    c:type="const ALSATimerTickTimeEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_real_time_event">
        <callback name="handle_real_time_event">
          <source-position filename="../src/timer/user-instance.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="33">A [class@UserInstance].</doc>
              <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="34">An object derived from [struct@RealTimeEvent].</doc>
              <type name="RealTimeEvent"
                    c:type="const ALSATimerRealTimeEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnection">
        <callback name="handle_disconnection">
          <source-position filename="../src/timer/user-instance.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/timer/user-instance.h"
                   line="42">A [class@UserInstance].</doc>
              <type name="UserInstance" c:type="ALSATimerUserInstance*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="UserInstanceError"
                 glib:type-name="ALSATimerUserInstanceError"
                 glib:get-type="alsatimer_user_instance_error_get_type"
                 c:type="ALSATimerUserInstanceError"
                 glib:error-domain="alsatimer-user-instance-error-quark">
      <doc xml:space="preserve"
           filename="../src/timer/alsatimer-enum-types.h"
           line="126">A set of error code for [struct@GLib.Error] with `ALSATimer.UserInstanceError` domain.</doc>
      <member name="failed"
              value="0"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_FAILED"
              glib:nick="failed"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="128">The system call failed.</doc>
      </member>
      <member name="timer_not_found"
              value="1"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND"
              glib:nick="timer-not-found"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="129">The timer instance is not found.</doc>
      </member>
      <member name="not_attached"
              value="2"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED"
              glib:nick="not-attached"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="130">The timer instance is not attached to any timer
                                                 device or the other instance.</doc>
      </member>
      <member name="attached"
              value="3"
              c:identifier="ALSATIMER_USER_INSTANCE_ERROR_ATTACHED"
              glib:nick="attached"
              glib:name="ALSATIMER_USER_INSTANCE_ERROR_ATTACHED">
        <doc xml:space="preserve"
             filename="../src/timer/alsatimer-enum-types.h"
             line="132">The timer instance is already attached to timer
                                                 device or the other instance.</doc>
      </member>
      <function name="quark"
                c:identifier="alsatimer_user_instance_error_quark">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="30">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in [enum@UserInstanceError]
enumerations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/user-instance.c"
               line="36">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function name="get_device_id_list"
              c:identifier="alsatimer_get_device_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="91">Get the list of existent timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_NEXT_DEVICE` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="13"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="101">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="93">The array with entries of [struct@DeviceId].</doc>
          <type name="GLib.List" c:type="GList**">
            <type name="DeviceId"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="get_device_info"
              c:identifier="alsatimer_get_device_info"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="138">Get the information of timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GINFO` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="15"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="149">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="140">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_info"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="141">The information of timer device.</doc>
          <type name="DeviceInfo" c:type="ALSATimerDeviceInfo**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_device_status"
              c:identifier="alsatimer_get_device_status"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="182">Get the status of timer device.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GSTATUS` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="18"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="193">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="184">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_status"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="185">The status of timer device.</doc>
          <type name="DeviceStatus" c:type="ALSATimerDeviceStatus* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_devnode"
              c:identifier="alsatimer_get_devnode"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="45">Allocate string of devnode for ALSA Timer and return it if exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/timer/query.h" line="11"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="54">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="devnode"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="47">The string for devnode of ALSA Timer.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_real_time_clock_id"
              c:identifier="alsatimer_get_real_time_clock_id"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="307">Get `clock_id` for real time. The `clock_id` governs real time retrieved by both
[method@RealTimeEvent.get_time] and [method@InstanceStatus.get_time].

The call of function is just to refer to parameter of `snd-timer` kernel module. `0` means
`CLOCK_REALTIME` is used. `1` means `CLOCK_MONOTONIC` is used.

The call of function executes `open(2)`, `read(2)`, `close(2)` system calls for the sysfs node
corresponding to the parameter.</doc>
      <source-position filename="../src/timer/query.h" line="24"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="322">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="clock_id"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="309">The clock_id for real time. The value of `CLOCK_XXX` in UAPI of Linux
           kernel.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_sysname"
              c:identifier="alsatimer_get_sysname"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="18">Allocate sysname for ALSA Timer and return it when it exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/timer/query.h" line="9"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="27">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sysname"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="20">The string for sysname of ALSA Timer.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_device_params"
              c:identifier="alsatimer_set_device_params"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/timer/query.c"
           line="225">Set the given parameters to the timer indicated by the identifier.

The call of function executes `open(2)`, `close(2)`, and `ioctl(2)` system call with
`SNDRV_TIMER_IOCTL_GPARAMS` command for ALSA timer character device.</doc>
      <source-position filename="../src/timer/query.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/query.c"
             line="236">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="227">A [struct@DeviceId] to identify the timer device.</doc>
          <type name="DeviceId" c:type="ALSATimerDeviceId*"/>
        </parameter>
        <parameter name="device_params" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/timer/query.c"
               line="228">The parameters of timer device.</doc>
          <type name="DeviceParams" c:type="const ALSATimerDeviceParams*"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_instance_error_quark"
              c:identifier="alsatimer_user_instance_error_quark"
              moved-to="UserInstanceError.quark">
      <doc xml:space="preserve"
           filename="../src/timer/user-instance.c"
           line="30">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in [enum@UserInstanceError]
enumerations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/timer/user-instance.c"
             line="36">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>

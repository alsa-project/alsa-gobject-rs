// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsatimer_sys;
use glib::translate::*;
use gobject_sys;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct TickTimeEvent(Boxed<alsatimer_sys::ALSATimerTickTimeEvent>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(alsatimer_sys::alsatimer_tick_time_event_get_type(), ptr as *mut _) as *mut alsatimer_sys::ALSATimerTickTimeEvent,
        free => |ptr| gobject_sys::g_boxed_free(alsatimer_sys::alsatimer_tick_time_event_get_type(), ptr as *mut _),
        get_type => || alsatimer_sys::alsatimer_tick_time_event_get_type(),
    }
}

impl TickTimeEvent {
    pub fn get_count(&self) -> u32 {
        unsafe {
            let mut count = mem::MaybeUninit::uninit();
            alsatimer_sys::alsatimer_tick_time_event_get_count(
                self.to_glib_none().0,
                count.as_mut_ptr(),
            );
            let count = count.assume_init();
            count
        }
    }

    pub fn get_resolution(&self) -> u32 {
        unsafe {
            let mut resolution = mem::MaybeUninit::uninit();
            alsatimer_sys::alsatimer_tick_time_event_get_resolution(
                self.to_glib_none().0,
                resolution.as_mut_ptr(),
            );
            let resolution = resolution.assume_init();
            resolution
        }
    }
}

unsafe impl Send for TickTimeEvent {}

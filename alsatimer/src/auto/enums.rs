// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerClass")]
pub enum Class {
    #[doc(alias = "ALSATIMER_CLASS_NONE")]
    None,
    #[doc(alias = "ALSATIMER_CLASS_GLOBAL")]
    Global,
    #[doc(alias = "ALSATIMER_CLASS_CARD")]
    Card,
    #[doc(alias = "ALSATIMER_CLASS_PCM")]
    Pcm,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Class {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Class::{}",
            match *self {
                Self::None => "None",
                Self::Global => "Global",
                Self::Card => "Card",
                Self::Pcm => "Pcm",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Class {
    type GlibType = ffi::ALSATimerClass;

    fn into_glib(self) -> ffi::ALSATimerClass {
        match self {
            Self::None => ffi::ALSATIMER_CLASS_NONE,
            Self::Global => ffi::ALSATIMER_CLASS_GLOBAL,
            Self::Card => ffi::ALSATIMER_CLASS_CARD,
            Self::Pcm => ffi::ALSATIMER_CLASS_PCM,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerClass> for Class {
    unsafe fn from_glib(value: ffi::ALSATimerClass) -> Self {
        match value {
            ffi::ALSATIMER_CLASS_NONE => Self::None,
            ffi::ALSATIMER_CLASS_GLOBAL => Self::Global,
            ffi::ALSATIMER_CLASS_CARD => Self::Card,
            ffi::ALSATIMER_CLASS_PCM => Self::Pcm,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for Class {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_class_get_type()) }
    }
}

impl glib::value::ValueType for Class {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Class {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Class {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerEventDataType")]
pub enum EventDataType {
    #[doc(alias = "ALSATIMER_EVENT_DATA_TYPE_TICK")]
    Tick,
    #[doc(alias = "ALSATIMER_EVENT_DATA_TYPE_TSTAMP")]
    Tstamp,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventDataType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventDataType::{}",
            match *self {
                Self::Tick => "Tick",
                Self::Tstamp => "Tstamp",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for EventDataType {
    type GlibType = ffi::ALSATimerEventDataType;

    fn into_glib(self) -> ffi::ALSATimerEventDataType {
        match self {
            Self::Tick => ffi::ALSATIMER_EVENT_DATA_TYPE_TICK,
            Self::Tstamp => ffi::ALSATIMER_EVENT_DATA_TYPE_TSTAMP,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerEventDataType> for EventDataType {
    unsafe fn from_glib(value: ffi::ALSATimerEventDataType) -> Self {
        match value {
            ffi::ALSATIMER_EVENT_DATA_TYPE_TICK => Self::Tick,
            ffi::ALSATIMER_EVENT_DATA_TYPE_TSTAMP => Self::Tstamp,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for EventDataType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_event_data_type_get_type()) }
    }
}

impl glib::value::ValueType for EventDataType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for EventDataType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for EventDataType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerEventType")]
pub enum EventType {
    #[doc(alias = "ALSATIMER_EVENT_TYPE_RESOLUTION")]
    Resolution,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_TICK")]
    Tick,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_START")]
    Start,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_STOP")]
    Stop,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_CONTINUE")]
    Continue,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_PAUSE")]
    Pause,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_EARLY")]
    Early,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_SUSPEND")]
    Suspend,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_RESUME")]
    Resume,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MSTART")]
    Mstart,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MSTOP")]
    Mstop,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MCONTINUE")]
    Mcontinue,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MPAUSE")]
    Mpause,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MSUSPEND")]
    Msuspend,
    #[doc(alias = "ALSATIMER_EVENT_TYPE_MRESUME")]
    Mresume,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventType::{}",
            match *self {
                Self::Resolution => "Resolution",
                Self::Tick => "Tick",
                Self::Start => "Start",
                Self::Stop => "Stop",
                Self::Continue => "Continue",
                Self::Pause => "Pause",
                Self::Early => "Early",
                Self::Suspend => "Suspend",
                Self::Resume => "Resume",
                Self::Mstart => "Mstart",
                Self::Mstop => "Mstop",
                Self::Mcontinue => "Mcontinue",
                Self::Mpause => "Mpause",
                Self::Msuspend => "Msuspend",
                Self::Mresume => "Mresume",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for EventType {
    type GlibType = ffi::ALSATimerEventType;

    fn into_glib(self) -> ffi::ALSATimerEventType {
        match self {
            Self::Resolution => ffi::ALSATIMER_EVENT_TYPE_RESOLUTION,
            Self::Tick => ffi::ALSATIMER_EVENT_TYPE_TICK,
            Self::Start => ffi::ALSATIMER_EVENT_TYPE_START,
            Self::Stop => ffi::ALSATIMER_EVENT_TYPE_STOP,
            Self::Continue => ffi::ALSATIMER_EVENT_TYPE_CONTINUE,
            Self::Pause => ffi::ALSATIMER_EVENT_TYPE_PAUSE,
            Self::Early => ffi::ALSATIMER_EVENT_TYPE_EARLY,
            Self::Suspend => ffi::ALSATIMER_EVENT_TYPE_SUSPEND,
            Self::Resume => ffi::ALSATIMER_EVENT_TYPE_RESUME,
            Self::Mstart => ffi::ALSATIMER_EVENT_TYPE_MSTART,
            Self::Mstop => ffi::ALSATIMER_EVENT_TYPE_MSTOP,
            Self::Mcontinue => ffi::ALSATIMER_EVENT_TYPE_MCONTINUE,
            Self::Mpause => ffi::ALSATIMER_EVENT_TYPE_MPAUSE,
            Self::Msuspend => ffi::ALSATIMER_EVENT_TYPE_MSUSPEND,
            Self::Mresume => ffi::ALSATIMER_EVENT_TYPE_MRESUME,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerEventType> for EventType {
    unsafe fn from_glib(value: ffi::ALSATimerEventType) -> Self {
        match value {
            ffi::ALSATIMER_EVENT_TYPE_RESOLUTION => Self::Resolution,
            ffi::ALSATIMER_EVENT_TYPE_TICK => Self::Tick,
            ffi::ALSATIMER_EVENT_TYPE_START => Self::Start,
            ffi::ALSATIMER_EVENT_TYPE_STOP => Self::Stop,
            ffi::ALSATIMER_EVENT_TYPE_CONTINUE => Self::Continue,
            ffi::ALSATIMER_EVENT_TYPE_PAUSE => Self::Pause,
            ffi::ALSATIMER_EVENT_TYPE_EARLY => Self::Early,
            ffi::ALSATIMER_EVENT_TYPE_SUSPEND => Self::Suspend,
            ffi::ALSATIMER_EVENT_TYPE_RESUME => Self::Resume,
            ffi::ALSATIMER_EVENT_TYPE_MSTART => Self::Mstart,
            ffi::ALSATIMER_EVENT_TYPE_MSTOP => Self::Mstop,
            ffi::ALSATIMER_EVENT_TYPE_MCONTINUE => Self::Mcontinue,
            ffi::ALSATIMER_EVENT_TYPE_MPAUSE => Self::Mpause,
            ffi::ALSATIMER_EVENT_TYPE_MSUSPEND => Self::Msuspend,
            ffi::ALSATIMER_EVENT_TYPE_MRESUME => Self::Mresume,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for EventType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_event_type_get_type()) }
    }
}

impl glib::value::ValueType for EventType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for EventType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for EventType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerSlaveClass")]
pub enum SlaveClass {
    #[doc(alias = "ALSATIMER_SLAVE_CLASS_NONE")]
    None,
    #[doc(alias = "ALSATIMER_SLAVE_CLASS_APPLICATION")]
    Application,
    #[doc(alias = "ALSATIMER_SLAVE_CLASS_SEQUENCER")]
    Sequencer,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SlaveClass {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SlaveClass::{}",
            match *self {
                Self::None => "None",
                Self::Application => "Application",
                Self::Sequencer => "Sequencer",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for SlaveClass {
    type GlibType = ffi::ALSATimerSlaveClass;

    fn into_glib(self) -> ffi::ALSATimerSlaveClass {
        match self {
            Self::None => ffi::ALSATIMER_SLAVE_CLASS_NONE,
            Self::Application => ffi::ALSATIMER_SLAVE_CLASS_APPLICATION,
            Self::Sequencer => ffi::ALSATIMER_SLAVE_CLASS_SEQUENCER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerSlaveClass> for SlaveClass {
    unsafe fn from_glib(value: ffi::ALSATimerSlaveClass) -> Self {
        match value {
            ffi::ALSATIMER_SLAVE_CLASS_NONE => Self::None,
            ffi::ALSATIMER_SLAVE_CLASS_APPLICATION => Self::Application,
            ffi::ALSATIMER_SLAVE_CLASS_SEQUENCER => Self::Sequencer,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SlaveClass {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_slave_class_get_type()) }
    }
}

impl glib::value::ValueType for SlaveClass {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SlaveClass {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SlaveClass {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerSpecificGlobalDevice")]
pub enum SpecificGlobalDevice {
    #[doc(alias = "ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM")]
    System,
    #[doc(alias = "ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER")]
    Hrtimer,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificGlobalDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SpecificGlobalDevice::{}",
            match *self {
                Self::System => "System",
                Self::Hrtimer => "Hrtimer",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for SpecificGlobalDevice {
    type GlibType = ffi::ALSATimerSpecificGlobalDevice;

    fn into_glib(self) -> ffi::ALSATimerSpecificGlobalDevice {
        match self {
            Self::System => ffi::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM,
            Self::Hrtimer => ffi::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerSpecificGlobalDevice> for SpecificGlobalDevice {
    unsafe fn from_glib(value: ffi::ALSATimerSpecificGlobalDevice) -> Self {
        match value {
            ffi::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM => Self::System,
            ffi::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER => Self::Hrtimer,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SpecificGlobalDevice {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_specific_global_device_get_type()) }
    }
}

impl glib::value::ValueType for SpecificGlobalDevice {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SpecificGlobalDevice {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SpecificGlobalDevice {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSATimerUserInstanceError")]
pub enum UserInstanceError {
    #[doc(alias = "ALSATIMER_USER_INSTANCE_ERROR_FAILED")]
    Failed,
    #[doc(alias = "ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND")]
    TimerNotFound,
    #[doc(alias = "ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED")]
    NotAttached,
    #[doc(alias = "ALSATIMER_USER_INSTANCE_ERROR_ATTACHED")]
    Attached,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for UserInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "UserInstanceError::{}",
            match *self {
                Self::Failed => "Failed",
                Self::TimerNotFound => "TimerNotFound",
                Self::NotAttached => "NotAttached",
                Self::Attached => "Attached",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for UserInstanceError {
    type GlibType = ffi::ALSATimerUserInstanceError;

    fn into_glib(self) -> ffi::ALSATimerUserInstanceError {
        match self {
            Self::Failed => ffi::ALSATIMER_USER_INSTANCE_ERROR_FAILED,
            Self::TimerNotFound => ffi::ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND,
            Self::NotAttached => ffi::ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED,
            Self::Attached => ffi::ALSATIMER_USER_INSTANCE_ERROR_ATTACHED,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSATimerUserInstanceError> for UserInstanceError {
    unsafe fn from_glib(value: ffi::ALSATimerUserInstanceError) -> Self {
        match value {
            ffi::ALSATIMER_USER_INSTANCE_ERROR_FAILED => Self::Failed,
            ffi::ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND => Self::TimerNotFound,
            ffi::ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED => Self::NotAttached,
            ffi::ALSATIMER_USER_INSTANCE_ERROR_ATTACHED => Self::Attached,
            value => Self::__Unknown(value),
        }
    }
}

impl ErrorDomain for UserInstanceError {
    fn domain() -> Quark {
        unsafe { from_glib(ffi::alsatimer_user_instance_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            ffi::ALSATIMER_USER_INSTANCE_ERROR_FAILED => Some(Self::Failed),
            ffi::ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND => Some(Self::TimerNotFound),
            ffi::ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED => Some(Self::NotAttached),
            ffi::ALSATIMER_USER_INSTANCE_ERROR_ATTACHED => Some(Self::Attached),
            _ => Some(Self::Failed),
        }
    }
}

impl StaticType for UserInstanceError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsatimer_user_instance_error_get_type()) }
    }
}

impl glib::value::ValueType for UserInstanceError {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for UserInstanceError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for UserInstanceError {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsatimer_sys;
use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum Class {
    None,
    Global,
    Card,
    Pcm,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Class {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Class::{}", match *self {
            Class::None => "None",
            Class::Global => "Global",
            Class::Card => "Card",
            Class::Pcm => "Pcm",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Class {
    type GlibType = alsatimer_sys::ALSATimerClass;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerClass {
        match *self {
            Class::None => alsatimer_sys::ALSATIMER_CLASS_NONE,
            Class::Global => alsatimer_sys::ALSATIMER_CLASS_GLOBAL,
            Class::Card => alsatimer_sys::ALSATIMER_CLASS_CARD,
            Class::Pcm => alsatimer_sys::ALSATIMER_CLASS_PCM,
            Class::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerClass> for Class {
    fn from_glib(value: alsatimer_sys::ALSATimerClass) -> Self {
        match value {
            -1 => Class::None,
            1 => Class::Global,
            2 => Class::Card,
            3 => Class::Pcm,
            value => Class::__Unknown(value),
}
    }
}

impl StaticType for Class {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_class_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for Class {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for Class {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for Class {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum EventDataType {
    Tick,
    Tstamp,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventDataType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EventDataType::{}", match *self {
            EventDataType::Tick => "Tick",
            EventDataType::Tstamp => "Tstamp",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for EventDataType {
    type GlibType = alsatimer_sys::ALSATimerEventDataType;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerEventDataType {
        match *self {
            EventDataType::Tick => alsatimer_sys::ALSATIMER_EVENT_DATA_TYPE_TICK,
            EventDataType::Tstamp => alsatimer_sys::ALSATIMER_EVENT_DATA_TYPE_TSTAMP,
            EventDataType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerEventDataType> for EventDataType {
    fn from_glib(value: alsatimer_sys::ALSATimerEventDataType) -> Self {
        match value {
            0 => EventDataType::Tick,
            1 => EventDataType::Tstamp,
            value => EventDataType::__Unknown(value),
}
    }
}

impl StaticType for EventDataType {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_event_data_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventDataType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventDataType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventDataType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum EventType {
    Resolution,
    Tick,
    Start,
    Stop,
    Continue,
    Pause,
    Early,
    Suspend,
    Resume,
    Mstart,
    Mstop,
    Mcontinue,
    Mpause,
    Msuspend,
    Mresume,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EventType::{}", match *self {
            EventType::Resolution => "Resolution",
            EventType::Tick => "Tick",
            EventType::Start => "Start",
            EventType::Stop => "Stop",
            EventType::Continue => "Continue",
            EventType::Pause => "Pause",
            EventType::Early => "Early",
            EventType::Suspend => "Suspend",
            EventType::Resume => "Resume",
            EventType::Mstart => "Mstart",
            EventType::Mstop => "Mstop",
            EventType::Mcontinue => "Mcontinue",
            EventType::Mpause => "Mpause",
            EventType::Msuspend => "Msuspend",
            EventType::Mresume => "Mresume",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for EventType {
    type GlibType = alsatimer_sys::ALSATimerEventType;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerEventType {
        match *self {
            EventType::Resolution => alsatimer_sys::ALSATIMER_EVENT_TYPE_RESOLUTION,
            EventType::Tick => alsatimer_sys::ALSATIMER_EVENT_TYPE_TICK,
            EventType::Start => alsatimer_sys::ALSATIMER_EVENT_TYPE_START,
            EventType::Stop => alsatimer_sys::ALSATIMER_EVENT_TYPE_STOP,
            EventType::Continue => alsatimer_sys::ALSATIMER_EVENT_TYPE_CONTINUE,
            EventType::Pause => alsatimer_sys::ALSATIMER_EVENT_TYPE_PAUSE,
            EventType::Early => alsatimer_sys::ALSATIMER_EVENT_TYPE_EARLY,
            EventType::Suspend => alsatimer_sys::ALSATIMER_EVENT_TYPE_SUSPEND,
            EventType::Resume => alsatimer_sys::ALSATIMER_EVENT_TYPE_RESUME,
            EventType::Mstart => alsatimer_sys::ALSATIMER_EVENT_TYPE_MSTART,
            EventType::Mstop => alsatimer_sys::ALSATIMER_EVENT_TYPE_MSTOP,
            EventType::Mcontinue => alsatimer_sys::ALSATIMER_EVENT_TYPE_MCONTINUE,
            EventType::Mpause => alsatimer_sys::ALSATIMER_EVENT_TYPE_MPAUSE,
            EventType::Msuspend => alsatimer_sys::ALSATIMER_EVENT_TYPE_MSUSPEND,
            EventType::Mresume => alsatimer_sys::ALSATIMER_EVENT_TYPE_MRESUME,
            EventType::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerEventType> for EventType {
    fn from_glib(value: alsatimer_sys::ALSATimerEventType) -> Self {
        match value {
            0 => EventType::Resolution,
            1 => EventType::Tick,
            2 => EventType::Start,
            3 => EventType::Stop,
            4 => EventType::Continue,
            5 => EventType::Pause,
            6 => EventType::Early,
            7 => EventType::Suspend,
            8 => EventType::Resume,
            12 => EventType::Mstart,
            13 => EventType::Mstop,
            14 => EventType::Mcontinue,
            15 => EventType::Mpause,
            17 => EventType::Msuspend,
            18 => EventType::Mresume,
            value => EventType::__Unknown(value),
}
    }
}

impl StaticType for EventType {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_event_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum SlaveClass {
    None,
    Application,
    Sequencer,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SlaveClass {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SlaveClass::{}", match *self {
            SlaveClass::None => "None",
            SlaveClass::Application => "Application",
            SlaveClass::Sequencer => "Sequencer",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SlaveClass {
    type GlibType = alsatimer_sys::ALSATimerSlaveClass;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerSlaveClass {
        match *self {
            SlaveClass::None => alsatimer_sys::ALSATIMER_SLAVE_CLASS_NONE,
            SlaveClass::Application => alsatimer_sys::ALSATIMER_SLAVE_CLASS_APPLICATION,
            SlaveClass::Sequencer => alsatimer_sys::ALSATIMER_SLAVE_CLASS_SEQUENCER,
            SlaveClass::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerSlaveClass> for SlaveClass {
    fn from_glib(value: alsatimer_sys::ALSATimerSlaveClass) -> Self {
        match value {
            0 => SlaveClass::None,
            1 => SlaveClass::Application,
            2 => SlaveClass::Sequencer,
            value => SlaveClass::__Unknown(value),
}
    }
}

impl StaticType for SlaveClass {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_slave_class_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SlaveClass {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SlaveClass {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SlaveClass {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum SpecificGlobalDevice {
    System,
    Hrtimer,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificGlobalDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SpecificGlobalDevice::{}", match *self {
            SpecificGlobalDevice::System => "System",
            SpecificGlobalDevice::Hrtimer => "Hrtimer",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SpecificGlobalDevice {
    type GlibType = alsatimer_sys::ALSATimerSpecificGlobalDevice;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerSpecificGlobalDevice {
        match *self {
            SpecificGlobalDevice::System => alsatimer_sys::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_SYSTEM,
            SpecificGlobalDevice::Hrtimer => alsatimer_sys::ALSATIMER_SPECIFIC_GLOBAL_DEVICE_HRTIMER,
            SpecificGlobalDevice::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerSpecificGlobalDevice> for SpecificGlobalDevice {
    fn from_glib(value: alsatimer_sys::ALSATimerSpecificGlobalDevice) -> Self {
        match value {
            0 => SpecificGlobalDevice::System,
            3 => SpecificGlobalDevice::Hrtimer,
            value => SpecificGlobalDevice::__Unknown(value),
}
    }
}

impl StaticType for SpecificGlobalDevice {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_specific_global_device_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpecificGlobalDevice {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpecificGlobalDevice {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SpecificGlobalDevice {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
pub enum UserInstanceError {
    Failed,
    TimerNotFound,
    NotAttached,
    Attached,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for UserInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "UserInstanceError::{}", match *self {
            UserInstanceError::Failed => "Failed",
            UserInstanceError::TimerNotFound => "TimerNotFound",
            UserInstanceError::NotAttached => "NotAttached",
            UserInstanceError::Attached => "Attached",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for UserInstanceError {
    type GlibType = alsatimer_sys::ALSATimerUserInstanceError;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerUserInstanceError {
        match *self {
            UserInstanceError::Failed => alsatimer_sys::ALSATIMER_USER_INSTANCE_ERROR_FAILED,
            UserInstanceError::TimerNotFound => alsatimer_sys::ALSATIMER_USER_INSTANCE_ERROR_TIMER_NOT_FOUND,
            UserInstanceError::NotAttached => alsatimer_sys::ALSATIMER_USER_INSTANCE_ERROR_NOT_ATTACHED,
            UserInstanceError::Attached => alsatimer_sys::ALSATIMER_USER_INSTANCE_ERROR_ATTACHED,
            UserInstanceError::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerUserInstanceError> for UserInstanceError {
    fn from_glib(value: alsatimer_sys::ALSATimerUserInstanceError) -> Self {
        match value {
            0 => UserInstanceError::Failed,
            1 => UserInstanceError::TimerNotFound,
            2 => UserInstanceError::NotAttached,
            3 => UserInstanceError::Attached,
            value => UserInstanceError::__Unknown(value),
}
    }
}

impl ErrorDomain for UserInstanceError {
    fn domain() -> Quark {
        
        unsafe { from_glib(alsatimer_sys::alsatimer_user_instance_error_quark()) }
    }

    fn code(self) -> i32 {
        self.to_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            0 => Some(UserInstanceError::Failed),
            1 => Some(UserInstanceError::TimerNotFound),
            2 => Some(UserInstanceError::NotAttached),
            3 => Some(UserInstanceError::Attached),
            _ => Some(UserInstanceError::Failed),
}
    }
}

impl StaticType for UserInstanceError {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_user_instance_error_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for UserInstanceError {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for UserInstanceError {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for UserInstanceError {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}


// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsatimer_sys;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;

bitflags! {
    pub struct DeviceInfoFlag: u32 {
        const SLAVE = 1;
    }
}

#[doc(hidden)]
impl ToGlib for DeviceInfoFlag {
    type GlibType = alsatimer_sys::ALSATimerDeviceInfoFlag;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerDeviceInfoFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerDeviceInfoFlag> for DeviceInfoFlag {
    fn from_glib(value: alsatimer_sys::ALSATimerDeviceInfoFlag) -> DeviceInfoFlag {
        DeviceInfoFlag::from_bits_truncate(value)
    }
}

impl StaticType for DeviceInfoFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_device_info_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for DeviceInfoFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for DeviceInfoFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for DeviceInfoFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct InstanceParamFlag: u32 {
        const AUTO = 1;
        const EXCLUSIVE = 2;
        const EARLY_EVENT = 4;
    }
}

#[doc(hidden)]
impl ToGlib for InstanceParamFlag {
    type GlibType = alsatimer_sys::ALSATimerInstanceParamFlag;

    fn to_glib(&self) -> alsatimer_sys::ALSATimerInstanceParamFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsatimer_sys::ALSATimerInstanceParamFlag> for InstanceParamFlag {
    fn from_glib(value: alsatimer_sys::ALSATimerInstanceParamFlag) -> InstanceParamFlag {
        InstanceParamFlag::from_bits_truncate(value)
    }
}

impl StaticType for InstanceParamFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsatimer_sys::alsatimer_instance_param_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for InstanceParamFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for InstanceParamFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for InstanceParamFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::DeviceId;
use crate::Event;
use crate::EventDataType;
use crate::InstanceInfo;
use crate::SlaveClass;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "ALSATimerUserInstance")]
    pub struct UserInstance(Object<ffi::ALSATimerUserInstance, ffi::ALSATimerUserInstanceClass>);

    match fn {
        type_ => || ffi::alsatimer_user_instance_get_type(),
    }
}

impl UserInstance {
    pub const NONE: Option<&'static UserInstance> = None;

    #[doc(alias = "alsatimer_user_instance_new")]
    pub fn new() -> UserInstance {
        unsafe { from_glib_full(ffi::alsatimer_user_instance_new()) }
    }
}

impl Default for UserInstance {
    fn default() -> Self {
        Self::new()
    }
}

pub trait UserInstanceExt: 'static {
    #[doc(alias = "alsatimer_user_instance_attach")]
    fn attach(&self, device_id: &mut DeviceId) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_attach_as_slave")]
    fn attach_as_slave(&self, slave_class: SlaveClass, slave_id: i32) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_choose_event_data_type")]
    fn choose_event_data_type(&self, event_data_type: EventDataType) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_continue")]
    #[doc(alias = "continue")]
    fn continue_(&self) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "alsatimer_user_instance_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> Result<InstanceInfo, glib::Error>;

    #[doc(alias = "alsatimer_user_instance_open")]
    fn open(&self, open_flag: i32) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_pause")]
    fn pause(&self) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_start")]
    fn start(&self) -> Result<(), glib::Error>;

    #[doc(alias = "alsatimer_user_instance_stop")]
    fn stop(&self) -> Result<(), glib::Error>;

    #[doc(alias = "handle-disconnection")]
    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "handle-event")]
    fn connect_handle_event<F: Fn(&Self, &Event) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<UserInstance>> UserInstanceExt for O {
    fn attach(&self, device_id: &mut DeviceId) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_attach(
                self.as_ref().to_glib_none().0,
                device_id.to_glib_none_mut().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn attach_as_slave(&self, slave_class: SlaveClass, slave_id: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_attach_as_slave(
                self.as_ref().to_glib_none().0,
                slave_class.into_glib(),
                slave_id,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn choose_event_data_type(&self, event_data_type: EventDataType) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_choose_event_data_type(
                self.as_ref().to_glib_none().0,
                event_data_type.into_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn continue_(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ =
                ffi::alsatimer_user_instance_continue(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_create_source(
                self.as_ref().to_glib_none().0,
                &mut gsrc,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(gsrc))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn info(&self) -> Result<InstanceInfo, glib::Error> {
        unsafe {
            let mut instance_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_get_info(
                self.as_ref().to_glib_none().0,
                &mut instance_info,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(instance_info))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn open(&self, open_flag: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_open(
                self.as_ref().to_glib_none().0,
                open_flag,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn pause(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_pause(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn start(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_start(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn stop(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsatimer_user_instance_stop(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_disconnection_trampoline<
            P: IsA<UserInstance>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSATimerUserInstance,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(UserInstance::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-disconnection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_disconnection_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_handle_event<F: Fn(&Self, &Event) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_event_trampoline<
            P: IsA<UserInstance>,
            F: Fn(&P, &Event) + 'static,
        >(
            this: *mut ffi::ALSATimerUserInstance,
            event: *mut ffi::ALSATimerEvent,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                UserInstance::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_none(event),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_event_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for UserInstance {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("UserInstance")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// A GObject-derived object to express parameter of timer device.
    ///
    /// A [`DeviceParams`][crate::DeviceParams] is a GObject-derived object to express parameter of timer device. The
    /// call of alsatimer_set_device_params() requires the instance of object.
    ///
    /// The object wraps `struct snd_timer_gparams` in UAPI of Linux sound subsystem.
    ///
    /// ## Properties
    ///
    ///
    /// #### `period-denominator`
    ///  The denominator of period for timer.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `period-numerator`
    ///  The numerator of period for timer.
    ///
    /// Readable | Writeable
    ///
    /// # Implements
    ///
    /// [`DeviceParamsExt`][trait@crate::prelude::DeviceParamsExt]
    #[doc(alias = "ALSATimerDeviceParams")]
    pub struct DeviceParams(Object<ffi::ALSATimerDeviceParams, ffi::ALSATimerDeviceParamsClass>);

    match fn {
        type_ => || ffi::alsatimer_device_params_get_type(),
    }
}

impl DeviceParams {
    pub const NONE: Option<&'static DeviceParams> = None;

    /// Instantiate [`DeviceParams`][crate::DeviceParams] object and return the instance.
    ///
    /// # Returns
    ///
    /// an instance of [`DeviceParams`][crate::DeviceParams].
    #[doc(alias = "alsatimer_device_params_new")]
    pub fn new() -> DeviceParams {
        unsafe { from_glib_full(ffi::alsatimer_device_params_new()) }
    }
}

impl Default for DeviceParams {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DeviceParams>> Sealed for T {}
}

/// Trait containing all [`struct@DeviceParams`] methods.
///
/// # Implementors
///
/// [`DeviceParams`][struct@crate::DeviceParams]
pub trait DeviceParamsExt: IsA<DeviceParams> + sealed::Sealed + 'static {
    /// The denominator of period for timer.
    #[doc(alias = "period-denominator")]
    fn period_denominator(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "period-denominator")
    }

    /// The denominator of period for timer.
    #[doc(alias = "period-denominator")]
    fn set_period_denominator(&self, period_denominator: u64) {
        ObjectExt::set_property(self.as_ref(), "period-denominator", period_denominator)
    }

    /// The numerator of period for timer.
    #[doc(alias = "period-numerator")]
    fn period_numerator(&self) -> u64 {
        ObjectExt::property(self.as_ref(), "period-numerator")
    }

    /// The numerator of period for timer.
    #[doc(alias = "period-numerator")]
    fn set_period_numerator(&self, period_numerator: u64) {
        ObjectExt::set_property(self.as_ref(), "period-numerator", period_numerator)
    }

    #[doc(alias = "period-denominator")]
    fn connect_period_denominator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_period_denominator_trampoline<
            P: IsA<DeviceParams>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSATimerDeviceParams,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceParams::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::period-denominator\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_period_denominator_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "period-numerator")]
    fn connect_period_numerator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_period_numerator_trampoline<
            P: IsA<DeviceParams>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSATimerDeviceParams,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceParams::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::period-numerator\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_period_numerator_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<DeviceParams>> DeviceParamsExt for O {}

impl fmt::Display for DeviceParams {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceParams")
    }
}

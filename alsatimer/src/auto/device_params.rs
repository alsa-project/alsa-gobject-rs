// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSATimerDeviceParams")]
    pub struct DeviceParams(Object<ffi::ALSATimerDeviceParams, ffi::ALSATimerDeviceParamsClass>);

    match fn {
        type_ => || ffi::alsatimer_device_params_get_type(),
    }
}

impl DeviceParams {
    pub const NONE: Option<&'static DeviceParams> = None;

    #[doc(alias = "alsatimer_device_params_new")]
    pub fn new() -> DeviceParams {
        unsafe { from_glib_full(ffi::alsatimer_device_params_new()) }
    }
}

impl Default for DeviceParams {
    fn default() -> Self {
        Self::new()
    }
}

pub trait DeviceParamsExt: 'static {
    #[doc(alias = "period-denominator")]
    fn period_denominator(&self) -> u64;

    #[doc(alias = "period-denominator")]
    fn set_period_denominator(&self, period_denominator: u64);

    #[doc(alias = "period-numerator")]
    fn period_numerator(&self) -> u64;

    #[doc(alias = "period-numerator")]
    fn set_period_numerator(&self, period_numerator: u64);

    #[doc(alias = "period-denominator")]
    fn connect_period_denominator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "period-numerator")]
    fn connect_period_numerator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DeviceParams>> DeviceParamsExt for O {
    fn period_denominator(&self) -> u64 {
        glib::ObjectExt::property(self.as_ref(), "period-denominator")
    }

    fn set_period_denominator(&self, period_denominator: u64) {
        glib::ObjectExt::set_property(self.as_ref(), "period-denominator", &period_denominator)
    }

    fn period_numerator(&self) -> u64 {
        glib::ObjectExt::property(self.as_ref(), "period-numerator")
    }

    fn set_period_numerator(&self, period_numerator: u64) {
        glib::ObjectExt::set_property(self.as_ref(), "period-numerator", &period_numerator)
    }

    fn connect_period_denominator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_period_denominator_trampoline<
            P: IsA<DeviceParams>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSATimerDeviceParams,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceParams::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::period-denominator\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_period_denominator_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_period_numerator_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_period_numerator_trampoline<
            P: IsA<DeviceParams>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSATimerDeviceParams,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DeviceParams::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::period-numerator\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_period_numerator_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DeviceParams {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DeviceParams")
    }
}

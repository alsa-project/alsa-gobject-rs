// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::EventType;
use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EventDataTstamp(Boxed<ffi::ALSATimerEventDataTstamp>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsatimer_event_data_tstamp_get_type(), ptr as *mut _) as *mut ffi::ALSATimerEventDataTstamp,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsatimer_event_data_tstamp_get_type(), ptr as *mut _),
        type_ => || ffi::alsatimer_event_data_tstamp_get_type(),
    }
}

impl EventDataTstamp {
    #[doc(alias = "alsatimer_event_data_tstamp_get_event")]
    #[doc(alias = "get_event")]
    pub fn event(&self) -> EventType {
        unsafe {
            let mut event = mem::MaybeUninit::uninit();
            ffi::alsatimer_event_data_tstamp_get_event(self.to_glib_none().0, event.as_mut_ptr());
            let event = event.assume_init();
            from_glib(event)
        }
    }

    #[doc(alias = "alsatimer_event_data_tstamp_get_val")]
    #[doc(alias = "get_val")]
    pub fn val(&self) -> u32 {
        unsafe {
            let mut val = mem::MaybeUninit::uninit();
            ffi::alsatimer_event_data_tstamp_get_val(self.to_glib_none().0, val.as_mut_ptr());
            let val = val.assume_init();
            val
        }
    }
}

unsafe impl Send for EventDataTstamp {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Class;
use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct DeviceId(Boxed<ffi::ALSATimerDeviceId>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsatimer_device_id_get_type(), ptr as *mut _) as *mut ffi::ALSATimerDeviceId,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsatimer_device_id_get_type(), ptr as *mut _),
        type_ => || ffi::alsatimer_device_id_get_type(),
    }
}

impl DeviceId {
    #[doc(alias = "alsatimer_device_id_new")]
    pub fn new(class: Class, card_id: i32, device_id: i32, subdevice_id: i32) -> DeviceId {
        unsafe {
            from_glib_full(ffi::alsatimer_device_id_new(
                class.into_glib(),
                card_id,
                device_id,
                subdevice_id,
            ))
        }
    }

    #[doc(alias = "alsatimer_device_id_get_card_id")]
    #[doc(alias = "get_card_id")]
    pub fn card_id(&self) -> i32 {
        unsafe {
            let mut card_id = mem::MaybeUninit::uninit();
            ffi::alsatimer_device_id_get_card_id(self.to_glib_none().0, card_id.as_mut_ptr());
            let card_id = card_id.assume_init();
            card_id
        }
    }

    #[doc(alias = "alsatimer_device_id_get_class")]
    #[doc(alias = "get_class")]
    pub fn class(&self) -> Class {
        unsafe {
            let mut class = mem::MaybeUninit::uninit();
            ffi::alsatimer_device_id_get_class(self.to_glib_none().0, class.as_mut_ptr());
            let class = class.assume_init();
            from_glib(class)
        }
    }

    #[doc(alias = "alsatimer_device_id_get_device_id")]
    #[doc(alias = "get_device_id")]
    pub fn device_id(&self) -> i32 {
        unsafe {
            let mut device_id = mem::MaybeUninit::uninit();
            ffi::alsatimer_device_id_get_device_id(self.to_glib_none().0, device_id.as_mut_ptr());
            let device_id = device_id.assume_init();
            device_id
        }
    }

    #[doc(alias = "alsatimer_device_id_get_subdevice_id")]
    #[doc(alias = "get_subdevice_id")]
    pub fn subdevice_id(&self) -> i32 {
        unsafe {
            let mut subdevice_id = mem::MaybeUninit::uninit();
            ffi::alsatimer_device_id_get_subdevice_id(
                self.to_glib_none().0,
                subdevice_id.as_mut_ptr(),
            );
            let subdevice_id = subdevice_id.assume_init();
            subdevice_id
        }
    }
}

unsafe impl Send for DeviceId {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EventDataTick(Boxed<ffi::ALSATimerEventDataTick>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsatimer_event_data_tick_get_type(), ptr as *mut _) as *mut ffi::ALSATimerEventDataTick,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsatimer_event_data_tick_get_type(), ptr as *mut _),
        type_ => || ffi::alsatimer_event_data_tick_get_type(),
    }
}

impl EventDataTick {
    #[doc(alias = "alsatimer_event_data_tick_get_resolution")]
    #[doc(alias = "get_resolution")]
    pub fn resolution(&self) -> u32 {
        unsafe {
            let mut resolution = mem::MaybeUninit::uninit();
            ffi::alsatimer_event_data_tick_get_resolution(
                self.to_glib_none().0,
                resolution.as_mut_ptr(),
            );
            let resolution = resolution.assume_init();
            resolution
        }
    }

    #[doc(alias = "alsatimer_event_data_tick_get_ticks")]
    #[doc(alias = "get_ticks")]
    pub fn ticks(&self) -> u32 {
        unsafe {
            let mut ticks = mem::MaybeUninit::uninit();
            ffi::alsatimer_event_data_tick_get_ticks(self.to_glib_none().0, ticks.as_mut_ptr());
            let ticks = ticks.assume_init();
            ticks
        }
    }
}

unsafe impl Send for EventDataTick {}

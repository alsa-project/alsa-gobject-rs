// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ElemId;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSACtlElemValue")]
    pub struct ElemValue(Object<ffi::ALSACtlElemValue, ffi::ALSACtlElemValueClass>);

    match fn {
        type_ => || ffi::alsactl_elem_value_get_type(),
    }
}

impl ElemValue {
    pub const NONE: Option<&'static ElemValue> = None;

    #[doc(alias = "alsactl_elem_value_new")]
    pub fn new() -> ElemValue {
        unsafe { from_glib_full(ffi::alsactl_elem_value_new()) }
    }
}

impl Default for ElemValue {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ElemValueExt: 'static {
    #[doc(alias = "alsactl_elem_value_equal")]
    fn equal(&self, target: &impl IsA<ElemValue>) -> bool;

    #[doc(alias = "alsactl_elem_value_set_bytes")]
    fn set_bytes(&self, values: &[u8]);

    #[doc(alias = "alsactl_elem_value_set_enum")]
    fn set_enum(&self, values: &[u32]);

    #[doc(alias = "alsactl_elem_value_set_iec60958_channel_status")]
    fn set_iec60958_channel_status(&self, status: &[u8]);

    #[doc(alias = "alsactl_elem_value_set_iec60958_user_data")]
    fn set_iec60958_user_data(&self, data: &[u8]);

    #[doc(alias = "alsactl_elem_value_set_int")]
    fn set_int(&self, values: &[i32]);

    #[doc(alias = "alsactl_elem_value_set_int64")]
    fn set_int64(&self, values: &[i64]);

    #[doc(alias = "elem-id")]
    fn elem_id(&self) -> Option<ElemId>;

    #[doc(alias = "elem-id")]
    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ElemValue>> ElemValueExt for O {
    fn equal(&self, target: &impl IsA<ElemValue>) -> bool {
        unsafe {
            from_glib(ffi::alsactl_elem_value_equal(
                const_override(self.as_ref().to_glib_none().0),
                target.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_bytes(&self, values: &[u8]) {
        let value_count = values.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_bytes(
                self.as_ref().to_glib_none().0,
                values.to_glib_none().0,
                value_count,
            );
        }
    }

    fn set_enum(&self, values: &[u32]) {
        let value_count = values.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_enum(
                self.as_ref().to_glib_none().0,
                values.to_glib_none().0,
                value_count,
            );
        }
    }

    fn set_iec60958_channel_status(&self, status: &[u8]) {
        let length = status.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_iec60958_channel_status(
                self.as_ref().to_glib_none().0,
                status.to_glib_none().0,
                length,
            );
        }
    }

    fn set_iec60958_user_data(&self, data: &[u8]) {
        let length = data.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_iec60958_user_data(
                self.as_ref().to_glib_none().0,
                data.to_glib_none().0,
                length,
            );
        }
    }

    fn set_int(&self, values: &[i32]) {
        let value_count = values.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_int(
                self.as_ref().to_glib_none().0,
                values.to_glib_none().0,
                value_count,
            );
        }
    }

    fn set_int64(&self, values: &[i64]) {
        let value_count = values.len() as usize;
        unsafe {
            ffi::alsactl_elem_value_set_int64(
                self.as_ref().to_glib_none().0,
                values.to_glib_none().0,
                value_count,
            );
        }
    }

    fn elem_id(&self) -> Option<ElemId> {
        glib::ObjectExt::property(self.as_ref(), "elem-id")
    }

    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_elem_id_trampoline<P: IsA<ElemValue>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlElemValue,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemValue::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::elem-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_elem_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ElemValue {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ElemValue")
    }
}

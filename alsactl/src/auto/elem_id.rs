// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ElemIfaceType;
use glib::translate::*;
use std::mem;
use std::ptr;

glib::wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct ElemId(Boxed<ffi::ALSACtlElemId>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsactl_elem_id_get_type(), ptr as *mut _) as *mut ffi::ALSACtlElemId,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsactl_elem_id_get_type(), ptr as *mut _),
        type_ => || ffi::alsactl_elem_id_get_type(),
    }
}

impl ElemId {
    #[doc(alias = "alsactl_elem_id_new_by_name")]
    pub fn new_by_name(
        iface: ElemIfaceType,
        device_id: u32,
        subdevice_id: u32,
        name: &str,
        index: u32,
    ) -> ElemId {
        unsafe {
            from_glib_full(ffi::alsactl_elem_id_new_by_name(
                iface.into_glib(),
                device_id,
                subdevice_id,
                name.to_glib_none().0,
                index,
            ))
        }
    }

    #[doc(alias = "alsactl_elem_id_new_by_numid")]
    pub fn new_by_numid(numid: u32) -> ElemId {
        unsafe { from_glib_full(ffi::alsactl_elem_id_new_by_numid(numid)) }
    }

    #[doc(alias = "alsactl_elem_id_equal")]
    fn equal(&self, target: &ElemId) -> bool {
        unsafe {
            from_glib(ffi::alsactl_elem_id_equal(
                self.to_glib_none().0,
                target.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "alsactl_elem_id_get_device_id")]
    #[doc(alias = "get_device_id")]
    pub fn device_id(&self) -> u32 {
        unsafe {
            let mut device_id = mem::MaybeUninit::uninit();
            ffi::alsactl_elem_id_get_device_id(self.to_glib_none().0, device_id.as_mut_ptr());
            let device_id = device_id.assume_init();
            device_id
        }
    }

    #[doc(alias = "alsactl_elem_id_get_iface")]
    #[doc(alias = "get_iface")]
    pub fn iface(&self) -> ElemIfaceType {
        unsafe {
            let mut iface = mem::MaybeUninit::uninit();
            ffi::alsactl_elem_id_get_iface(self.to_glib_none().0, iface.as_mut_ptr());
            let iface = iface.assume_init();
            from_glib(iface)
        }
    }

    #[doc(alias = "alsactl_elem_id_get_index")]
    #[doc(alias = "get_index")]
    pub fn index(&self) -> u32 {
        unsafe {
            let mut index = mem::MaybeUninit::uninit();
            ffi::alsactl_elem_id_get_index(self.to_glib_none().0, index.as_mut_ptr());
            let index = index.assume_init();
            index
        }
    }

    #[doc(alias = "alsactl_elem_id_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> glib::GString {
        unsafe {
            let mut name = ptr::null();
            ffi::alsactl_elem_id_get_name(self.to_glib_none().0, &mut name);
            from_glib_none(name)
        }
    }

    #[doc(alias = "alsactl_elem_id_get_numid")]
    #[doc(alias = "get_numid")]
    pub fn numid(&self) -> u32 {
        unsafe {
            let mut numid = mem::MaybeUninit::uninit();
            ffi::alsactl_elem_id_get_numid(self.to_glib_none().0, numid.as_mut_ptr());
            let numid = numid.assume_init();
            numid
        }
    }

    #[doc(alias = "alsactl_elem_id_get_subdevice_id")]
    #[doc(alias = "get_subdevice_id")]
    pub fn subdevice_id(&self) -> u32 {
        unsafe {
            let mut subdevice_id = mem::MaybeUninit::uninit();
            ffi::alsactl_elem_id_get_subdevice_id(self.to_glib_none().0, subdevice_id.as_mut_ptr());
            let subdevice_id = subdevice_id.assume_init();
            subdevice_id
        }
    }
}

impl PartialEq for ElemId {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for ElemId {}

unsafe impl Send for ElemId {}
unsafe impl Sync for ElemId {}

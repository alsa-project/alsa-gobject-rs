// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsactl_sys;
use glib::translate::*;
use gobject_sys;
use std::mem;
use std::ptr;
use ElemIfaceType;

use glib::GString;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct ElemId(Boxed<alsactl_sys::ALSACtlElemId>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(alsactl_sys::alsactl_elem_id_get_type(), ptr as *mut _) as *mut alsactl_sys::ALSACtlElemId,
        free => |ptr| gobject_sys::g_boxed_free(alsactl_sys::alsactl_elem_id_get_type(), ptr as *mut _),
        get_type => || alsactl_sys::alsactl_elem_id_get_type(),
    }
}

impl ElemId {
    pub fn new_by_name(iface: ElemIfaceType, device_id: u32, subdevice_id: u32, name: &str, index: u32) -> ElemId {
        unsafe {
            from_glib_full(alsactl_sys::alsactl_elem_id_new_by_name(iface.to_glib(), device_id, subdevice_id, name.to_glib_none().0, index))
        }
    }

    pub fn new_by_numid(numid: u32) -> ElemId {
        unsafe {
            from_glib_full(alsactl_sys::alsactl_elem_id_new_by_numid(numid))
        }
    }

    fn equal(&self, target: &ElemId) -> bool {
        unsafe {
            from_glib(alsactl_sys::alsactl_elem_id_equal(self.to_glib_none().0, target.to_glib_none().0))
        }
    }

    pub fn get_device_id(&self) -> u32 {
        unsafe {
            let mut device_id = mem::MaybeUninit::uninit();
            alsactl_sys::alsactl_elem_id_get_device_id(self.to_glib_none().0, device_id.as_mut_ptr());
            let device_id = device_id.assume_init();
            device_id
        }
    }

    pub fn get_iface(&self) -> ElemIfaceType {
        unsafe {
            let mut iface = mem::MaybeUninit::uninit();
            alsactl_sys::alsactl_elem_id_get_iface(self.to_glib_none().0, iface.as_mut_ptr());
            let iface = iface.assume_init();
            from_glib(iface)
        }
    }

    pub fn get_index(&self) -> u32 {
        unsafe {
            let mut index = mem::MaybeUninit::uninit();
            alsactl_sys::alsactl_elem_id_get_index(self.to_glib_none().0, index.as_mut_ptr());
            let index = index.assume_init();
            index
        }
    }

    pub fn get_name(&self) -> GString {
        unsafe {
            let mut name = ptr::null();
            alsactl_sys::alsactl_elem_id_get_name(self.to_glib_none().0, &mut name);
            from_glib_none(name)
        }
    }

    pub fn get_numid(&self) -> u32 {
        unsafe {
            let mut numid = mem::MaybeUninit::uninit();
            alsactl_sys::alsactl_elem_id_get_numid(self.to_glib_none().0, numid.as_mut_ptr());
            let numid = numid.assume_init();
            numid
        }
    }

    pub fn get_subdevice_id(&self) -> u32 {
        unsafe {
            let mut subdevice_id = mem::MaybeUninit::uninit();
            alsactl_sys::alsactl_elem_id_get_subdevice_id(self.to_glib_none().0, subdevice_id.as_mut_ptr());
            let subdevice_id = subdevice_id.assume_init();
            subdevice_id
        }
    }
}

impl PartialEq for ElemId {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for ElemId {}

unsafe impl Send for ElemId {}
unsafe impl Sync for ElemId {}

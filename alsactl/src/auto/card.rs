// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::CardInfo;
use crate::ElemEventMask;
use crate::ElemId;
use crate::ElemInfo;
use crate::ElemValue;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "ALSACtlCard")]
    pub struct Card(Object<ffi::ALSACtlCard, ffi::ALSACtlCardClass>);

    match fn {
        type_ => || ffi::alsactl_card_get_type(),
    }
}

impl Card {
    pub const NONE: Option<&'static Card> = None;

    #[doc(alias = "alsactl_card_new")]
    pub fn new() -> Card {
        unsafe { from_glib_full(ffi::alsactl_card_new()) }
    }
}

impl Default for Card {
    fn default() -> Self {
        Self::new()
    }
}

pub trait CardExt: 'static {
    #[doc(alias = "alsactl_card_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "alsactl_card_get_elem_info")]
    #[doc(alias = "get_elem_info")]
    fn elem_info(&self, elem_id: &ElemId) -> Result<ElemInfo, glib::Error>;

    #[doc(alias = "alsactl_card_get_info")]
    #[doc(alias = "get_info")]
    fn info(&self) -> Result<CardInfo, glib::Error>;

    #[doc(alias = "alsactl_card_lock_elem")]
    fn lock_elem(&self, elem_id: &ElemId, lock: bool) -> Result<(), glib::Error>;

    #[doc(alias = "alsactl_card_open")]
    fn open(&self, card_id: u32, open_flag: i32) -> Result<(), glib::Error>;

    #[doc(alias = "alsactl_card_remove_elems")]
    fn remove_elems(&self, elem_id: &ElemId) -> Result<(), glib::Error>;

    #[doc(alias = "alsactl_card_write_elem_tlv")]
    fn write_elem_tlv(&self, elem_id: &ElemId, container: &[u32]) -> Result<(), glib::Error>;

    #[doc(alias = "alsactl_card_write_elem_value")]
    fn write_elem_value(
        &self,
        elem_id: &ElemId,
        elem_value: &impl IsA<ElemValue>,
    ) -> Result<(), glib::Error>;

    fn devnode(&self) -> Option<glib::GString>;

    fn is_subscribed(&self) -> bool;

    #[doc(alias = "handle-disconnection")]
    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "handle-elem-event")]
    fn connect_handle_elem_event<F: Fn(&Self, &ElemId, ElemEventMask) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "devnode")]
    fn connect_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "subscribed")]
    fn connect_subscribed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Card>> CardExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_create_source(
                self.as_ref().to_glib_none().0,
                &mut gsrc,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(gsrc))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn elem_info(&self, elem_id: &ElemId) -> Result<ElemInfo, glib::Error> {
        unsafe {
            let mut elem_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_get_elem_info(
                self.as_ref().to_glib_none().0,
                elem_id.to_glib_none().0,
                &mut elem_info,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(elem_info))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn info(&self) -> Result<CardInfo, glib::Error> {
        unsafe {
            let mut card_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_get_info(
                self.as_ref().to_glib_none().0,
                &mut card_info,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(card_info))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn lock_elem(&self, elem_id: &ElemId, lock: bool) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_lock_elem(
                self.as_ref().to_glib_none().0,
                elem_id.to_glib_none().0,
                lock.into_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn open(&self, card_id: u32, open_flag: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_open(
                self.as_ref().to_glib_none().0,
                card_id,
                open_flag,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn remove_elems(&self, elem_id: &ElemId) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_remove_elems(
                self.as_ref().to_glib_none().0,
                elem_id.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn write_elem_tlv(&self, elem_id: &ElemId, container: &[u32]) -> Result<(), glib::Error> {
        let container_count = container.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_write_elem_tlv(
                self.as_ref().to_glib_none().0,
                elem_id.to_glib_none().0,
                container.to_glib_none().0,
                container_count,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn write_elem_value(
        &self,
        elem_id: &ElemId,
        elem_value: &impl IsA<ElemValue>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_card_write_elem_value(
                self.as_ref().to_glib_none().0,
                elem_id.to_glib_none().0,
                elem_value.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn devnode(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "devnode")
    }

    fn is_subscribed(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "subscribed")
    }

    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_disconnection_trampoline<P: IsA<Card>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlCard,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Card::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-disconnection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_disconnection_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_handle_elem_event<F: Fn(&Self, &ElemId, ElemEventMask) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn handle_elem_event_trampoline<
            P: IsA<Card>,
            F: Fn(&P, &ElemId, ElemEventMask) + 'static,
        >(
            this: *mut ffi::ALSACtlCard,
            elem_id: *mut ffi::ALSACtlElemId,
            events: ffi::ALSACtlElemEventMask,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                Card::from_glib_borrow(this).unsafe_cast_ref(),
                &from_glib_borrow(elem_id),
                from_glib(events),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-elem-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_elem_event_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devnode_trampoline<P: IsA<Card>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlCard,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Card::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devnode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devnode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_subscribed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_subscribed_trampoline<P: IsA<Card>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlCard,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Card::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::subscribed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_subscribed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Card {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Card")
    }
}

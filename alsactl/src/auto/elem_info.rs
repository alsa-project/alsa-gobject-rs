// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ElemAccessFlag;
use crate::ElemId;
use crate::ElemType;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "ALSACtlElemInfo")]
    pub struct ElemInfo(Object<ffi::ALSACtlElemInfo, ffi::ALSACtlElemInfoClass>);

    match fn {
        type_ => || ffi::alsactl_elem_info_get_type(),
    }
}

impl ElemInfo {
    pub const NONE: Option<&'static ElemInfo> = None;

    #[doc(alias = "alsactl_elem_info_new")]
    pub fn new(elem_type: ElemType) -> Result<ElemInfo, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsactl_elem_info_new(elem_type.into_glib(), &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

pub trait ElemInfoExt: 'static {
    #[doc(alias = "alsactl_elem_info_get_enum_data")]
    #[doc(alias = "get_enum_data")]
    fn enum_data(&self) -> Result<Vec<glib::GString>, glib::Error>;

    #[doc(alias = "alsactl_elem_info_set_enum_data")]
    fn set_enum_data(&self, data: &[&str]) -> Result<(), glib::Error>;

    fn access(&self) -> ElemAccessFlag;

    fn set_access(&self, access: ElemAccessFlag);

    #[doc(alias = "elem-id")]
    fn elem_id(&self) -> Option<ElemId>;

    fn owner(&self) -> i32;

    #[doc(alias = "type")]
    fn type_(&self) -> ElemType;

    #[doc(alias = "value-count")]
    fn value_count(&self) -> u32;

    #[doc(alias = "value-count")]
    fn set_value_count(&self, value_count: u32);

    #[doc(alias = "access")]
    fn connect_access_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "elem-id")]
    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "owner")]
    fn connect_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "value-count")]
    fn connect_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ElemInfo>> ElemInfoExt for O {
    fn enum_data(&self) -> Result<Vec<glib::GString>, glib::Error> {
        unsafe {
            let mut data = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_elem_info_get_enum_data(
                self.as_ref().to_glib_none().0,
                &mut data,
                &mut error,
            );
            if error.is_null() {
                Ok(FromGlibPtrContainer::from_glib_none(data))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn set_enum_data(&self, data: &[&str]) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::alsactl_elem_info_set_enum_data(
                self.as_ref().to_glib_none().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn access(&self) -> ElemAccessFlag {
        glib::ObjectExt::property(self.as_ref(), "access")
    }

    fn set_access(&self, access: ElemAccessFlag) {
        glib::ObjectExt::set_property(self.as_ref(), "access", &access)
    }

    fn elem_id(&self) -> Option<ElemId> {
        glib::ObjectExt::property(self.as_ref(), "elem-id")
    }

    fn owner(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "owner")
    }

    fn type_(&self) -> ElemType {
        glib::ObjectExt::property(self.as_ref(), "type")
    }

    fn value_count(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "value-count")
    }

    fn set_value_count(&self, value_count: u32) {
        glib::ObjectExt::set_property(self.as_ref(), "value-count", &value_count)
    }

    fn connect_access_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_access_trampoline<P: IsA<ElemInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlElemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::access\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_access_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_elem_id_trampoline<P: IsA<ElemInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlElemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::elem-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_elem_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_owner_trampoline<P: IsA<ElemInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSACtlElemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_owner_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_count_trampoline<
            P: IsA<ElemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::value-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_value_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ElemInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ElemInfo")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ElemAccessFlag;
use crate::ElemId;
use crate::ElemType;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSACtlElemInfoCommon")]
    pub struct ElemInfoCommon(Interface<ffi::ALSACtlElemInfoCommon, ffi::ALSACtlElemInfoCommonInterface>);

    match fn {
        type_ => || ffi::alsactl_elem_info_common_get_type(),
    }
}

impl ElemInfoCommon {
    pub const NONE: Option<&'static ElemInfoCommon> = None;
}

pub trait ElemInfoCommonExt: 'static {
    fn access(&self) -> ElemAccessFlag;

    fn set_access(&self, access: ElemAccessFlag);

    #[doc(alias = "elem-id")]
    fn elem_id(&self) -> Option<ElemId>;

    #[doc(alias = "elem-type")]
    fn elem_type(&self) -> ElemType;

    fn owner(&self) -> i32;

    #[doc(alias = "access")]
    fn connect_access_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "elem-id")]
    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "owner")]
    fn connect_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ElemInfoCommon>> ElemInfoCommonExt for O {
    fn access(&self) -> ElemAccessFlag {
        glib::ObjectExt::property(self.as_ref(), "access")
    }

    fn set_access(&self, access: ElemAccessFlag) {
        glib::ObjectExt::set_property(self.as_ref(), "access", &access)
    }

    fn elem_id(&self) -> Option<ElemId> {
        glib::ObjectExt::property(self.as_ref(), "elem-id")
    }

    fn elem_type(&self) -> ElemType {
        glib::ObjectExt::property(self.as_ref(), "elem-type")
    }

    fn owner(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "owner")
    }

    fn connect_access_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_access_trampoline<
            P: IsA<ElemInfoCommon>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfoCommon,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfoCommon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::access\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_access_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_elem_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_elem_id_trampoline<
            P: IsA<ElemInfoCommon>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfoCommon,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfoCommon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::elem-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_elem_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_owner_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_owner_trampoline<
            P: IsA<ElemInfoCommon>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfoCommon,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfoCommon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::owner\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_owner_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ElemInfoCommon {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ElemInfoCommon")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "ALSACtlElemAccessFlag")]
    pub struct ElemAccessFlag: u32 {
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_READ")]
        const READ = ffi::ALSACTL_ELEM_ACCESS_FLAG_READ as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_WRITE")]
        const WRITE = ffi::ALSACTL_ELEM_ACCESS_FLAG_WRITE as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_VOLATILE")]
        const VOLATILE = ffi::ALSACTL_ELEM_ACCESS_FLAG_VOLATILE as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_TLV_READ")]
        const TLV_READ = ffi::ALSACTL_ELEM_ACCESS_FLAG_TLV_READ as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_TLV_WRITE")]
        const TLV_WRITE = ffi::ALSACTL_ELEM_ACCESS_FLAG_TLV_WRITE as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_TLV_COMMAND")]
        const TLV_COMMAND = ffi::ALSACTL_ELEM_ACCESS_FLAG_TLV_COMMAND as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_INACTIVE")]
        const INACTIVE = ffi::ALSACTL_ELEM_ACCESS_FLAG_INACTIVE as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_LOCK")]
        const LOCK = ffi::ALSACTL_ELEM_ACCESS_FLAG_LOCK as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_OWNER")]
        const OWNER = ffi::ALSACTL_ELEM_ACCESS_FLAG_OWNER as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_TLV_CALLBACK")]
        const TLV_CALLBACK = ffi::ALSACTL_ELEM_ACCESS_FLAG_TLV_CALLBACK as u32;
        #[doc(alias = "ALSACTL_ELEM_ACCESS_FLAG_USER")]
        const USER = ffi::ALSACTL_ELEM_ACCESS_FLAG_USER as u32;
    }
}

impl fmt::Display for ElemAccessFlag {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for ElemAccessFlag {
    type GlibType = ffi::ALSACtlElemAccessFlag;

    fn into_glib(self) -> ffi::ALSACtlElemAccessFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSACtlElemAccessFlag> for ElemAccessFlag {
    unsafe fn from_glib(value: ffi::ALSACtlElemAccessFlag) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ElemAccessFlag {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsactl_elem_access_flag_get_type()) }
    }
}

impl glib::value::ValueType for ElemAccessFlag {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ElemAccessFlag {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ElemAccessFlag {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "ALSACtlElemEventMask")]
    pub struct ElemEventMask: u32 {
        #[doc(alias = "ALSACTL_ELEM_EVENT_MASK_VALUE")]
        const VALUE = ffi::ALSACTL_ELEM_EVENT_MASK_VALUE as u32;
        #[doc(alias = "ALSACTL_ELEM_EVENT_MASK_INFO")]
        const INFO = ffi::ALSACTL_ELEM_EVENT_MASK_INFO as u32;
        #[doc(alias = "ALSACTL_ELEM_EVENT_MASK_ADD")]
        const ADD = ffi::ALSACTL_ELEM_EVENT_MASK_ADD as u32;
        #[doc(alias = "ALSACTL_ELEM_EVENT_MASK_TLV")]
        const TLV = ffi::ALSACTL_ELEM_EVENT_MASK_TLV as u32;
        #[doc(alias = "ALSACTL_ELEM_EVENT_MASK_REMOVE")]
        const REMOVE = ffi::ALSACTL_ELEM_EVENT_MASK_REMOVE as u32;
    }
}

impl fmt::Display for ElemEventMask {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for ElemEventMask {
    type GlibType = ffi::ALSACtlElemEventMask;

    fn into_glib(self) -> ffi::ALSACtlElemEventMask {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSACtlElemEventMask> for ElemEventMask {
    unsafe fn from_glib(value: ffi::ALSACtlElemEventMask) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ElemEventMask {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsactl_elem_event_mask_get_type()) }
    }
}

impl glib::value::ValueType for ElemEventMask {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ElemEventMask {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ElemEventMask {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsactl_sys;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;

bitflags! {
    pub struct ElemAccessFlag: u32 {
        const READ = 1;
        const WRITE = 2;
        const VOLATILE = 4;
        const TLV_READ = 16;
        const TLV_WRITE = 32;
        const TLV_COMMAND = 64;
        const INACTIVE = 256;
        const LOCK = 512;
        const OWNER = 1024;
        const TLV_CALLBACK = 268435456;
        const USER = 536870912;
    }
}

#[doc(hidden)]
impl ToGlib for ElemAccessFlag {
    type GlibType = alsactl_sys::ALSACtlElemAccessFlag;

    fn to_glib(&self) -> alsactl_sys::ALSACtlElemAccessFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsactl_sys::ALSACtlElemAccessFlag> for ElemAccessFlag {
    fn from_glib(value: alsactl_sys::ALSACtlElemAccessFlag) -> ElemAccessFlag {
        ElemAccessFlag::from_bits_truncate(value)
    }
}

impl StaticType for ElemAccessFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsactl_sys::alsactl_elem_access_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ElemAccessFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ElemAccessFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for ElemAccessFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct ElemEventMask: u32 {
        const VALUE = 1;
        const INFO = 2;
        const ADD = 4;
        const TLV = 8;
        const REMOVE = 16;
    }
}

#[doc(hidden)]
impl ToGlib for ElemEventMask {
    type GlibType = alsactl_sys::ALSACtlElemEventMask;

    fn to_glib(&self) -> alsactl_sys::ALSACtlElemEventMask {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsactl_sys::ALSACtlElemEventMask> for ElemEventMask {
    fn from_glib(value: alsactl_sys::ALSACtlElemEventMask) -> ElemEventMask {
        ElemEventMask::from_bits_truncate(value)
    }
}

impl StaticType for ElemEventMask {
    fn static_type() -> Type {
        unsafe { from_glib(alsactl_sys::alsactl_elem_event_mask_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ElemEventMask {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ElemEventMask {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for ElemEventMask {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}


// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, ElemInfoCommon};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    /// An interface to express information of element which has single value array.
    ///
    /// A [`ElemInfoSingleArray`][crate::ElemInfoSingleArray] should be implemented by the type of information for element
    /// whieh has single value array.
    ///
    /// ## Properties
    ///
    ///
    /// #### `value-count`
    ///  The count of elements in value array of the element.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>ElemInfoCommon</h4></summary>
    ///
    ///
    /// #### `access`
    ///  The access permission for the element with [`ElemAccessFlag`][crate::ElemAccessFlag].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `elem-id`
    ///  The identifier of element.
    ///
    /// Readable
    ///
    ///
    /// #### `elem-type`
    ///  The type of element, one of [`ElemType`][crate::ElemType].
    ///
    /// Readable | Writeable | Construct Only
    ///
    ///
    /// #### `owner`
    ///  The value of PID for process to own the element.
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`ElemInfoSingleArrayExt`][trait@crate::prelude::ElemInfoSingleArrayExt], [`ElemInfoCommonExt`][trait@crate::prelude::ElemInfoCommonExt]
    #[doc(alias = "ALSACtlElemInfoSingleArray")]
    pub struct ElemInfoSingleArray(Interface<ffi::ALSACtlElemInfoSingleArray, ffi::ALSACtlElemInfoSingleArrayInterface>) @requires ElemInfoCommon;

    match fn {
        type_ => || ffi::alsactl_elem_info_single_array_get_type(),
    }
}

impl ElemInfoSingleArray {
    pub const NONE: Option<&'static ElemInfoSingleArray> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ElemInfoSingleArray>> Sealed for T {}
}

/// Trait containing all [`struct@ElemInfoSingleArray`] methods.
///
/// # Implementors
///
/// [`ElemInfoBoolean`][struct@crate::ElemInfoBoolean], [`ElemInfoBytes`][struct@crate::ElemInfoBytes], [`ElemInfoEnumerated`][struct@crate::ElemInfoEnumerated], [`ElemInfoInteger64`][struct@crate::ElemInfoInteger64], [`ElemInfoInteger`][struct@crate::ElemInfoInteger], [`ElemInfoSingleArray`][struct@crate::ElemInfoSingleArray]
pub trait ElemInfoSingleArrayExt: IsA<ElemInfoSingleArray> + sealed::Sealed + 'static {
    /// The count of elements in value array of the element.
    #[doc(alias = "value-count")]
    fn value_count(&self) -> u32 {
        ObjectExt::property(self.as_ref(), "value-count")
    }

    /// The count of elements in value array of the element.
    #[doc(alias = "value-count")]
    fn set_value_count(&self, value_count: u32) {
        ObjectExt::set_property(self.as_ref(), "value-count", value_count)
    }

    #[doc(alias = "value-count")]
    fn connect_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_count_trampoline<
            P: IsA<ElemInfoSingleArray>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfoSingleArray,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfoSingleArray::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::value-count\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_value_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<ElemInfoSingleArray>> ElemInfoSingleArrayExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsactl_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use ElemInfoCommon;

glib_wrapper! {
    pub struct ElemInfoSingleArray(Interface<alsactl_sys::ALSACtlElemInfoSingleArray>) @requires ElemInfoCommon;

    match fn {
        get_type => || alsactl_sys::alsactl_elem_info_single_array_get_type(),
    }
}

pub const NONE_ELEM_INFO_SINGLE_ARRAY: Option<&ElemInfoSingleArray> = None;

pub trait ElemInfoSingleArrayExt: 'static {
    fn get_property_value_count(&self) -> u32;

    fn set_property_value_count(&self, value_count: u32);

    fn connect_property_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ElemInfoSingleArray>> ElemInfoSingleArrayExt for O {
    fn get_property_value_count(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"value-count\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `value-count` getter")
                .unwrap()
        }
    }

    fn set_property_value_count(&self, value_count: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"value-count\0".as_ptr() as *const _,
                Value::from(&value_count).to_glib_none().0,
            );
        }
    }

    fn connect_property_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_count_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsactl_sys::ALSACtlElemInfoSingleArray,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ElemInfoSingleArray>,
        {
            let f: &F = &*(f as *const F);
            f(&ElemInfoSingleArray::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::value-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_value_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ElemInfoSingleArray {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ElemInfoSingleArray")
    }
}

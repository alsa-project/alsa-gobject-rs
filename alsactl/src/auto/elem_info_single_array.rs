// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ElemInfoCommon;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSACtlElemInfoSingleArray")]
    pub struct ElemInfoSingleArray(Interface<ffi::ALSACtlElemInfoSingleArray, ffi::ALSACtlElemInfoSingleArrayInterface>) @requires ElemInfoCommon;

    match fn {
        type_ => || ffi::alsactl_elem_info_single_array_get_type(),
    }
}

impl ElemInfoSingleArray {
    pub const NONE: Option<&'static ElemInfoSingleArray> = None;
}

pub trait ElemInfoSingleArrayExt: 'static {
    #[doc(alias = "value-count")]
    fn value_count(&self) -> u32;

    #[doc(alias = "value-count")]
    fn set_value_count(&self, value_count: u32);

    #[doc(alias = "value-count")]
    fn connect_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ElemInfoSingleArray>> ElemInfoSingleArrayExt for O {
    fn value_count(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "value-count")
    }

    fn set_value_count(&self, value_count: u32) {
        glib::ObjectExt::set_property(self.as_ref(), "value-count", &value_count)
    }

    fn connect_value_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_count_trampoline<
            P: IsA<ElemInfoSingleArray>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSACtlElemInfoSingleArray,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ElemInfoSingleArray::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::value-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_value_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ElemInfoSingleArray {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ElemInfoSingleArray")
    }
}

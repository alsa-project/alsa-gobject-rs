// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSARawmidiSubstreamStatus")]
    pub struct SubstreamStatus(Object<ffi::ALSARawmidiSubstreamStatus, ffi::ALSARawmidiSubstreamStatusClass>);

    match fn {
        type_ => || ffi::alsarawmidi_substream_status_get_type(),
    }
}

impl SubstreamStatus {
    pub const NONE: Option<&'static SubstreamStatus> = None;

    #[doc(alias = "alsarawmidi_substream_status_new")]
    pub fn new() -> SubstreamStatus {
        unsafe { from_glib_full(ffi::alsarawmidi_substream_status_new()) }
    }
}

impl Default for SubstreamStatus {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SubstreamStatusExt: 'static {
    fn avail(&self) -> u64;

    fn xruns(&self) -> u64;

    #[doc(alias = "avail")]
    fn connect_avail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "xruns")]
    fn connect_xruns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SubstreamStatus>> SubstreamStatusExt for O {
    fn avail(&self) -> u64 {
        glib::ObjectExt::property(self.as_ref(), "avail")
    }

    fn xruns(&self) -> u64 {
        glib::ObjectExt::property(self.as_ref(), "xruns")
    }

    fn connect_avail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_avail_trampoline<
            P: IsA<SubstreamStatus>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSARawmidiSubstreamStatus,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubstreamStatus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::avail\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_avail_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_xruns_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_xruns_trampoline<
            P: IsA<SubstreamStatus>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSARawmidiSubstreamStatus,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubstreamStatus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::xruns\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_xruns_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SubstreamStatus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SubstreamStatus")
    }
}

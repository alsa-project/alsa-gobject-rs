// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::StreamDirection;
use crate::StreamPairInfoFlag;
use crate::SubstreamInfo;
use crate::SubstreamParams;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "ALSARawmidiStreamPair")]
    pub struct StreamPair(Object<ffi::ALSARawmidiStreamPair, ffi::ALSARawmidiStreamPairClass>);

    match fn {
        type_ => || ffi::alsarawmidi_stream_pair_get_type(),
    }
}

impl StreamPair {
    pub const NONE: Option<&'static StreamPair> = None;

    #[doc(alias = "alsarawmidi_stream_pair_new")]
    pub fn new() -> StreamPair {
        unsafe { from_glib_full(ffi::alsarawmidi_stream_pair_new()) }
    }
}

impl Default for StreamPair {
    fn default() -> Self {
        Self::new()
    }
}

pub trait StreamPairExt: 'static {
    #[doc(alias = "alsarawmidi_stream_pair_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_drain_substream")]
    fn drain_substream(&self, direction: StreamDirection) -> Result<(), glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_drop_substream")]
    fn drop_substream(&self, direction: StreamDirection) -> Result<(), glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_get_substream_info")]
    #[doc(alias = "get_substream_info")]
    fn substream_info(&self, direction: StreamDirection) -> Result<SubstreamInfo, glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_open")]
    fn open(
        &self,
        card_id: u32,
        device_id: u32,
        subdevice_id: u32,
        access_modes: StreamPairInfoFlag,
        open_flag: i32,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_set_substream_params")]
    fn set_substream_params(
        &self,
        direction: StreamDirection,
        substream_params: &impl IsA<SubstreamParams>,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "alsarawmidi_stream_pair_write_to_substream")]
    fn write_to_substream(&self, buf: &[u8]) -> Result<(), glib::Error>;

    fn devnode(&self) -> Option<glib::GString>;

    #[doc(alias = "handle-disconnection")]
    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "handle-messages")]
    fn connect_handle_messages<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "devnode")]
    fn connect_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StreamPair>> StreamPairExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_create_source(
                self.as_ref().to_glib_none().0,
                &mut gsrc,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(from_glib_full(gsrc))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn drain_substream(&self, direction: StreamDirection) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_drain_substream(
                self.as_ref().to_glib_none().0,
                direction.into_glib(),
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn drop_substream(&self, direction: StreamDirection) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_drop_substream(
                self.as_ref().to_glib_none().0,
                direction.into_glib(),
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn substream_info(&self, direction: StreamDirection) -> Result<SubstreamInfo, glib::Error> {
        unsafe {
            let mut substream_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_get_substream_info(
                self.as_ref().to_glib_none().0,
                direction.into_glib(),
                &mut substream_info,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(from_glib_full(substream_info))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn open(
        &self,
        card_id: u32,
        device_id: u32,
        subdevice_id: u32,
        access_modes: StreamPairInfoFlag,
        open_flag: i32,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_open(
                self.as_ref().to_glib_none().0,
                card_id,
                device_id,
                subdevice_id,
                access_modes.into_glib(),
                open_flag,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn set_substream_params(
        &self,
        direction: StreamDirection,
        substream_params: &impl IsA<SubstreamParams>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_set_substream_params(
                self.as_ref().to_glib_none().0,
                direction.into_glib(),
                substream_params.as_ref().to_glib_none().0,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn write_to_substream(&self, buf: &[u8]) -> Result<(), glib::Error> {
        let buf_size = buf.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::alsarawmidi_stream_pair_write_to_substream(
                self.as_ref().to_glib_none().0,
                buf.to_glib_none().0,
                buf_size,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn devnode(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "devnode")
    }

    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_disconnection_trampoline<
            P: IsA<StreamPair>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSARawmidiStreamPair,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-disconnection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_disconnection_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_handle_messages<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_messages_trampoline<P: IsA<StreamPair>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSARawmidiStreamPair,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"handle-messages\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    handle_messages_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devnode_trampoline<P: IsA<StreamPair>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSARawmidiStreamPair,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::devnode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_devnode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for StreamPair {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StreamPair")
    }
}

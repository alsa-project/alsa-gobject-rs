// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsarawmidi_sys;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use StreamDirection;
use StreamPairInfoFlag;
use SubstreamInfo;
use SubstreamParams;

glib_wrapper! {
    pub struct StreamPair(Object<alsarawmidi_sys::ALSARawmidiStreamPair, alsarawmidi_sys::ALSARawmidiStreamPairClass, StreamPairClass>);

    match fn {
        get_type => || alsarawmidi_sys::alsarawmidi_stream_pair_get_type(),
    }
}

impl StreamPair {
    pub fn new() -> StreamPair {
        unsafe {
            from_glib_full(alsarawmidi_sys::alsarawmidi_stream_pair_new())
        }
    }
}

impl Default for StreamPair {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_STREAM_PAIR: Option<&StreamPair> = None;

pub trait StreamPairExt: 'static {
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    fn drain_substream(&self, direction: StreamDirection) -> Result<(), glib::Error>;

    fn drop_substream(&self, direction: StreamDirection) -> Result<(), glib::Error>;

    fn get_substream_info(&self, direction: StreamDirection) -> Result<SubstreamInfo, glib::Error>;

    fn open(&self, card_id: u32, device_id: u32, subdevice_id: u32, access_modes: StreamPairInfoFlag, open_flag: i32) -> Result<(), glib::Error>;

    fn set_substream_params<P: IsA<SubstreamParams>>(&self, direction: StreamDirection, substream_params: &P) -> Result<(), glib::Error>;

    fn write_to_substream(&self, buf: &[u8]) -> Result<(), glib::Error>;

    fn get_property_devnode(&self) -> Option<GString>;

    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_handle_messages<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StreamPair>> StreamPairExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_create_source(self.as_ref().to_glib_none().0, &mut gsrc, &mut error);
            if error.is_null() { Ok(from_glib_full(gsrc)) } else { Err(from_glib_full(error)) }
        }
    }

    fn drain_substream(&self, direction: StreamDirection) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_drain_substream(self.as_ref().to_glib_none().0, direction.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn drop_substream(&self, direction: StreamDirection) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_drop_substream(self.as_ref().to_glib_none().0, direction.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_substream_info(&self, direction: StreamDirection) -> Result<SubstreamInfo, glib::Error> {
        unsafe {
            let mut substream_info = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_get_substream_info(self.as_ref().to_glib_none().0, direction.to_glib(), &mut substream_info, &mut error);
            if error.is_null() { Ok(from_glib_full(substream_info)) } else { Err(from_glib_full(error)) }
        }
    }

    fn open(&self, card_id: u32, device_id: u32, subdevice_id: u32, access_modes: StreamPairInfoFlag, open_flag: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_open(self.as_ref().to_glib_none().0, card_id, device_id, subdevice_id, access_modes.to_glib(), open_flag, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_substream_params<P: IsA<SubstreamParams>>(&self, direction: StreamDirection, substream_params: &P) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_set_substream_params(self.as_ref().to_glib_none().0, direction.to_glib(), substream_params.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn write_to_substream(&self, buf: &[u8]) -> Result<(), glib::Error> {
        let buf_size = buf.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsarawmidi_sys::alsarawmidi_stream_pair_write_to_substream(self.as_ref().to_glib_none().0, buf.to_glib_none().0, buf_size, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_devnode(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"devnode\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `devnode` getter")
        }
    }

    fn connect_handle_disconnection<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_disconnection_trampoline<P, F: Fn(&P) + 'static>(this: *mut alsarawmidi_sys::ALSARawmidiStreamPair, f: glib_sys::gpointer)
            where P: IsA<StreamPair>
        {
            let f: &F = &*(f as *const F);
            f(&StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"handle-disconnection\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(handle_disconnection_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_handle_messages<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn handle_messages_trampoline<P, F: Fn(&P) + 'static>(this: *mut alsarawmidi_sys::ALSARawmidiStreamPair, f: glib_sys::gpointer)
            where P: IsA<StreamPair>
        {
            let f: &F = &*(f as *const F);
            f(&StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"handle-messages\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(handle_messages_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_devnode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_devnode_trampoline<P, F: Fn(&P) + 'static>(this: *mut alsarawmidi_sys::ALSARawmidiStreamPair, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<StreamPair>
        {
            let f: &F = &*(f as *const F);
            f(&StreamPair::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::devnode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_devnode_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for StreamPair {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamPair")
    }
}

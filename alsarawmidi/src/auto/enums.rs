// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use std::fmt;

/// A set of enumerations for the direction of stream.
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSARawmidiStreamDirection")]
pub enum StreamDirection {
    #[doc(alias = "ALSARAWMIDI_STREAM_DIRECTION_OUTPUT")]
    Output,
    #[doc(alias = "ALSARAWMIDI_STREAM_DIRECTION_INPUT")]
    Input,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StreamDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "StreamDirection::{}",
            match *self {
                Self::Output => "Output",
                Self::Input => "Input",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for StreamDirection {
    type GlibType = ffi::ALSARawmidiStreamDirection;

    fn into_glib(self) -> ffi::ALSARawmidiStreamDirection {
        match self {
            Self::Output => ffi::ALSARAWMIDI_STREAM_DIRECTION_OUTPUT,
            Self::Input => ffi::ALSARAWMIDI_STREAM_DIRECTION_INPUT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSARawmidiStreamDirection> for StreamDirection {
    unsafe fn from_glib(value: ffi::ALSARawmidiStreamDirection) -> Self {
        match value {
            ffi::ALSARAWMIDI_STREAM_DIRECTION_OUTPUT => Self::Output,
            ffi::ALSARAWMIDI_STREAM_DIRECTION_INPUT => Self::Input,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for StreamDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsarawmidi_stream_direction_get_type()) }
    }
}

impl glib::value::ValueType for StreamDirection {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for StreamDirection {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for StreamDirection {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

/// A set of error code for [`glib::Error`][crate::glib::Error] with
/// [`StreamPairError`][crate::StreamPairError] domain.
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ALSARawmidiStreamPairError")]
pub enum StreamPairError {
    #[doc(alias = "ALSARAWMIDI_STREAM_PAIR_ERROR_FAILED")]
    Failed,
    #[doc(alias = "ALSARAWMIDI_STREAM_PAIR_ERROR_DISCONNECTED")]
    Disconnected,
    #[doc(alias = "ALSARAWMIDI_STREAM_PAIR_ERROR_UNREADABLE")]
    Unreadable,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StreamPairError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "StreamPairError::{}",
            match *self {
                Self::Failed => "Failed",
                Self::Disconnected => "Disconnected",
                Self::Unreadable => "Unreadable",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for StreamPairError {
    type GlibType = ffi::ALSARawmidiStreamPairError;

    fn into_glib(self) -> ffi::ALSARawmidiStreamPairError {
        match self {
            Self::Failed => ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_FAILED,
            Self::Disconnected => ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_DISCONNECTED,
            Self::Unreadable => ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_UNREADABLE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ALSARawmidiStreamPairError> for StreamPairError {
    unsafe fn from_glib(value: ffi::ALSARawmidiStreamPairError) -> Self {
        match value {
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_FAILED => Self::Failed,
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_DISCONNECTED => Self::Disconnected,
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_UNREADABLE => Self::Unreadable,
            value => Self::__Unknown(value),
        }
    }
}

impl ErrorDomain for StreamPairError {
    fn domain() -> Quark {
        unsafe { from_glib(ffi::alsarawmidi_stream_pair_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_FAILED => Some(Self::Failed),
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_DISCONNECTED => Some(Self::Disconnected),
            ffi::ALSARAWMIDI_STREAM_PAIR_ERROR_UNREADABLE => Some(Self::Unreadable),
            _ => Some(Self::Failed),
        }
    }
}

impl StaticType for StreamPairError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::alsarawmidi_stream_pair_error_get_type()) }
    }
}

impl glib::value::ValueType for StreamPairError {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for StreamPairError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for StreamPairError {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EventDataCtl(Boxed<ffi::ALSASeqEventDataCtl>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsaseq_event_data_ctl_get_type(), ptr as *mut _) as *mut ffi::ALSASeqEventDataCtl,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsaseq_event_data_ctl_get_type(), ptr as *mut _),
        type_ => || ffi::alsaseq_event_data_ctl_get_type(),
    }
}

impl EventDataCtl {
    #[doc(alias = "alsaseq_event_data_ctl_get_channel")]
    #[doc(alias = "get_channel")]
    pub fn channel(&self) -> u8 {
        unsafe {
            let mut channel = mem::MaybeUninit::uninit();
            ffi::alsaseq_event_data_ctl_get_channel(self.to_glib_none().0, channel.as_mut_ptr());
            let channel = channel.assume_init();
            channel
        }
    }

    #[doc(alias = "alsaseq_event_data_ctl_get_param")]
    #[doc(alias = "get_param")]
    pub fn param(&self) -> u32 {
        unsafe {
            let mut param = mem::MaybeUninit::uninit();
            ffi::alsaseq_event_data_ctl_get_param(self.to_glib_none().0, param.as_mut_ptr());
            let param = param.assume_init();
            param
        }
    }

    #[doc(alias = "alsaseq_event_data_ctl_get_value")]
    #[doc(alias = "get_value")]
    pub fn value(&self) -> i32 {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            ffi::alsaseq_event_data_ctl_get_value(self.to_glib_none().0, value.as_mut_ptr());
            let value = value.assume_init();
            value
        }
    }

    #[doc(alias = "alsaseq_event_data_ctl_set_channel")]
    pub fn set_channel(&mut self, channel: u8) {
        unsafe {
            ffi::alsaseq_event_data_ctl_set_channel(self.to_glib_none_mut().0, channel);
        }
    }

    #[doc(alias = "alsaseq_event_data_ctl_set_param")]
    pub fn set_param(&mut self, param: u32) {
        unsafe {
            ffi::alsaseq_event_data_ctl_set_param(self.to_glib_none_mut().0, param);
        }
    }

    #[doc(alias = "alsaseq_event_data_ctl_set_value")]
    pub fn set_value(&mut self, value: i32) {
        unsafe {
            ffi::alsaseq_event_data_ctl_set_value(self.to_glib_none_mut().0, value);
        }
    }
}

unsafe impl Send for EventDataCtl {}

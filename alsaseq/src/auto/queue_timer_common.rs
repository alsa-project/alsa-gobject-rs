// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::QueueTimerType;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSASeqQueueTimerCommon")]
    pub struct QueueTimerCommon(Interface<ffi::ALSASeqQueueTimerCommon, ffi::ALSASeqQueueTimerCommonInterface>);

    match fn {
        type_ => || ffi::alsaseq_queue_timer_common_get_type(),
    }
}

impl QueueTimerCommon {
    pub const NONE: Option<&'static QueueTimerCommon> = None;
}

pub trait QueueTimerCommonExt: 'static {
    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8;

    #[doc(alias = "timer-type")]
    fn timer_type(&self) -> QueueTimerType;

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "timer-type")]
    fn connect_timer_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<QueueTimerCommon>> QueueTimerCommonExt for O {
    fn queue_id(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "queue-id")
    }

    fn timer_type(&self) -> QueueTimerType {
        glib::ObjectExt::property(self.as_ref(), "timer-type")
    }

    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<
            P: IsA<QueueTimerCommon>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueTimerCommon,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueTimerCommon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_timer_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timer_type_trampoline<
            P: IsA<QueueTimerCommon>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueTimerCommon,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueTimerCommon::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::timer-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_timer_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for QueueTimerCommon {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("QueueTimerCommon")
    }
}

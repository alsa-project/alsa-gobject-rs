// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib;
use glib::translate::*;
use std::mem;
use std::ptr;
use ClientInfo;
use ClientPool;
use PortInfo;
use QueueInfo;
use SystemInfo;

use glib::GString;

pub fn get_client_id_list() -> Result<Vec<u8>, glib::Error> {
    unsafe {
        let mut entries = ptr::null_mut();
        let mut entry_count = mem::MaybeUninit::uninit();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_client_id_list(
            &mut entries,
            entry_count.as_mut_ptr(),
            &mut error,
        );
        if error.is_null() {
            Ok(FromGlibContainer::from_glib_full_num(
                entries,
                entry_count.assume_init() as usize,
            ))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_client_info(client_id: u8) -> Result<ClientInfo, glib::Error> {
    unsafe {
        let mut client_info = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_client_info(client_id, &mut client_info, &mut error);
        if error.is_null() {
            Ok(from_glib_full(client_info))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_client_pool(client_id: u8) -> Result<ClientPool, glib::Error> {
    unsafe {
        let mut client_pool = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_client_pool(client_id, &mut client_pool, &mut error);
        if error.is_null() {
            Ok(from_glib_full(client_pool))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_port_id_list(client_id: u8) -> Result<Vec<u8>, glib::Error> {
    unsafe {
        let mut entries = ptr::null_mut();
        let mut entry_count = mem::MaybeUninit::uninit();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_port_id_list(
            client_id,
            &mut entries,
            entry_count.as_mut_ptr(),
            &mut error,
        );
        if error.is_null() {
            Ok(FromGlibContainer::from_glib_full_num(
                entries,
                entry_count.assume_init() as usize,
            ))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_port_info(client_id: u8, port_id: u8) -> Result<PortInfo, glib::Error> {
    unsafe {
        let mut port_info = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_port_info(client_id, port_id, &mut port_info, &mut error);
        if error.is_null() {
            Ok(from_glib_full(port_info))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_queue_id_list() -> Result<Vec<u8>, glib::Error> {
    unsafe {
        let mut entries = ptr::null_mut();
        let mut entry_count = mem::MaybeUninit::uninit();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_queue_id_list(
            &mut entries,
            entry_count.as_mut_ptr(),
            &mut error,
        );
        if error.is_null() {
            Ok(FromGlibContainer::from_glib_full_num(
                entries,
                entry_count.assume_init() as usize,
            ))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_queue_info_by_id(queue_id: u8) -> Result<QueueInfo, glib::Error> {
    unsafe {
        let mut queue_info = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_queue_info_by_id(queue_id, &mut queue_info, &mut error);
        if error.is_null() {
            Ok(from_glib_full(queue_info))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_queue_info_by_name(name: &str) -> Result<QueueInfo, glib::Error> {
    unsafe {
        let mut queue_info = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_queue_info_by_name(
            name.to_glib_none().0,
            &mut queue_info,
            &mut error,
        );
        if error.is_null() {
            Ok(from_glib_full(queue_info))
        } else {
            Err(from_glib_full(error))
        }
    }
}

//pub fn get_queue_status<P: IsA<QueueStatus>>(queue_id: u8, queue_status: &P) -> Result<(), glib::Error> {
//    unsafe { TODO: call alsaseq_sys:alsaseq_get_queue_status() }
//}

pub fn get_seq_devnode() -> Result<GString, glib::Error> {
    unsafe {
        let mut devnode = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_seq_devnode(&mut devnode, &mut error);
        if error.is_null() {
            Ok(from_glib_full(devnode))
        } else {
            Err(from_glib_full(error))
        }
    }
}

pub fn get_seq_sysname() -> Result<GString, glib::Error> {
    unsafe {
        let mut sysname = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_seq_sysname(&mut sysname, &mut error);
        if error.is_null() {
            Ok(from_glib_full(sysname))
        } else {
            Err(from_glib_full(error))
        }
    }
}

//pub fn get_subscription_list(addr: &Addr, query_type: QuerySubscribeType, entries: /*Unimplemented*/Vec<SubscribeData>) -> Result<(), glib::Error> {
//    unsafe { TODO: call alsaseq_sys:alsaseq_get_subscription_list() }
//}

pub fn get_system_info() -> Result<SystemInfo, glib::Error> {
    unsafe {
        let mut system_info = ptr::null_mut();
        let mut error = ptr::null_mut();
        let _ = alsaseq_sys::alsaseq_get_system_info(&mut system_info, &mut error);
        if error.is_null() {
            Ok(from_glib_full(system_info))
        } else {
            Err(from_glib_full(error))
        }
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// A GObject-derived object to express information of queue.
    ///
    /// A [`QueueInfo`][crate::QueueInfo] is a GObject-derived object to express information of queue. The call of
    /// [`queue_info_by_id()`][crate::queue_info_by_id()] and [`queue_info_by_name()`][crate::queue_info_by_name()] returns the instance of object.
    /// The call of [`UserClientExtManual::create_queue()`][crate::prelude::UserClientExtManual::create_queue()] and [`UserClientExt::update_queue()`][crate::prelude::UserClientExt::update_queue()] requires the
    /// instance of object.
    ///
    /// The object wraps `struct snd_seq_queue_info` in UAPI of Linux sound subsystem.
    ///
    /// ## Properties
    ///
    ///
    /// #### `client-id`
    ///  The numeric ID of client which owns the queue, including one of ALSASeqSpecificClientId.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `locked`
    ///  Whether to be locked by the other queues or not.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `name`
    ///  The name of queue.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `queue-id`
    ///  The numeric ID of queue. An entry of ALSASeqSpecificQueueId is available as well.
    ///
    /// Readable | Writeable
    ///
    /// # Implements
    ///
    /// [`QueueInfoExt`][trait@crate::prelude::QueueInfoExt]
    #[doc(alias = "ALSASeqQueueInfo")]
    pub struct QueueInfo(Object<ffi::ALSASeqQueueInfo, ffi::ALSASeqQueueInfoClass>);

    match fn {
        type_ => || ffi::alsaseq_queue_info_get_type(),
    }
}

impl QueueInfo {
    pub const NONE: Option<&'static QueueInfo> = None;

    /// Allocate and return an instance of [`QueueInfo`][crate::QueueInfo].
    ///
    /// # Returns
    ///
    /// An instance of [`QueueInfo`][crate::QueueInfo].
    #[doc(alias = "alsaseq_queue_info_new")]
    pub fn new() -> QueueInfo {
        unsafe { from_glib_full(ffi::alsaseq_queue_info_new()) }
    }
}

impl Default for QueueInfo {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::QueueInfo>> Sealed for T {}
}

/// Trait containing all [`struct@QueueInfo`] methods.
///
/// # Implementors
///
/// [`QueueInfo`][struct@crate::QueueInfo]
pub trait QueueInfoExt: IsA<QueueInfo> + sealed::Sealed + 'static {
    /// The numeric ID of client which owns the queue, including one of ALSASeqSpecificClientId.
    #[doc(alias = "client-id")]
    fn client_id(&self) -> u8 {
        ObjectExt::property(self.as_ref(), "client-id")
    }

    /// The numeric ID of client which owns the queue, including one of ALSASeqSpecificClientId.
    #[doc(alias = "client-id")]
    fn set_client_id(&self, client_id: u8) {
        ObjectExt::set_property(self.as_ref(), "client-id", client_id)
    }

    /// Whether to be locked by the other queues or not.
    fn is_locked(&self) -> bool {
        ObjectExt::property(self.as_ref(), "locked")
    }

    /// Whether to be locked by the other queues or not.
    fn set_locked(&self, locked: bool) {
        ObjectExt::set_property(self.as_ref(), "locked", locked)
    }

    /// The name of queue.
    fn name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "name")
    }

    /// The name of queue.
    fn set_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(), "name", name)
    }

    /// The numeric ID of queue. An entry of ALSASeqSpecificQueueId is available as well.
    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8 {
        ObjectExt::property(self.as_ref(), "queue-id")
    }

    /// The numeric ID of queue. An entry of ALSASeqSpecificQueueId is available as well.
    #[doc(alias = "queue-id")]
    fn set_queue_id(&self, queue_id: u8) {
        ObjectExt::set_property(self.as_ref(), "queue-id", queue_id)
    }

    #[doc(alias = "client-id")]
    fn connect_client_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_client_id_trampoline<P: IsA<QueueInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqQueueInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::client-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_client_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "locked")]
    fn connect_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locked_trampoline<P: IsA<QueueInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqQueueInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::locked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_locked_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<QueueInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqQueueInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<P: IsA<QueueInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqQueueInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<QueueInfo>> QueueInfoExt for O {}

impl fmt::Display for QueueInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("QueueInfo")
    }
}

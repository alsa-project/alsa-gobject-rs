// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;

bitflags! {
    pub struct FilterAttrFlag: u32 {
        const BROADCAST = 1;
        const MULTICAST = 2;
        const BOUNCE = 4;
    }
}

#[doc(hidden)]
impl ToGlib for FilterAttrFlag {
    type GlibType = alsaseq_sys::ALSASeqFilterAttrFlag;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqFilterAttrFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqFilterAttrFlag> for FilterAttrFlag {
    fn from_glib(value: alsaseq_sys::ALSASeqFilterAttrFlag) -> FilterAttrFlag {
        FilterAttrFlag::from_bits_truncate(value)
    }
}

impl StaticType for FilterAttrFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_filter_attr_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FilterAttrFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FilterAttrFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for FilterAttrFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct PortAttrFlag: u32 {
        const SPECIFIC = 1;
        const MIDI_GENERIC = 2;
        const MIDI_GM = 4;
        const MIDI_GS = 8;
        const MIDI_XG = 16;
        const MIDI_MT32 = 32;
        const MIDI_GM2 = 64;
        const HARDWARE = 65536;
        const SOFTWARE = 131072;
        const SYNTHESIZER = 262144;
        const PORT = 524288;
        const APPLICATION = 1048576;
    }
}

#[doc(hidden)]
impl ToGlib for PortAttrFlag {
    type GlibType = alsaseq_sys::ALSASeqPortAttrFlag;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqPortAttrFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqPortAttrFlag> for PortAttrFlag {
    fn from_glib(value: alsaseq_sys::ALSASeqPortAttrFlag) -> PortAttrFlag {
        PortAttrFlag::from_bits_truncate(value)
    }
}

impl StaticType for PortAttrFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_port_attr_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for PortAttrFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PortAttrFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for PortAttrFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct PortCapFlag: u32 {
        const READ = 1;
        const WRITE = 2;
        const DUPLEX = 16;
        const SUBS_READ = 32;
        const SUBS_WRITE = 64;
        const NO_EXPORT = 128;
    }
}

#[doc(hidden)]
impl ToGlib for PortCapFlag {
    type GlibType = alsaseq_sys::ALSASeqPortCapFlag;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqPortCapFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqPortCapFlag> for PortCapFlag {
    fn from_glib(value: alsaseq_sys::ALSASeqPortCapFlag) -> PortCapFlag {
        PortCapFlag::from_bits_truncate(value)
    }
}

impl StaticType for PortCapFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_port_cap_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for PortCapFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PortCapFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for PortCapFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct PortSubscribeFlag: u32 {
        const EXCLUSIVE = 1;
        const TIMESTAMP = 2;
        const TIME_REAL = 4;
    }
}

#[doc(hidden)]
impl ToGlib for PortSubscribeFlag {
    type GlibType = alsaseq_sys::ALSASeqPortSubscribeFlag;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqPortSubscribeFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqPortSubscribeFlag> for PortSubscribeFlag {
    fn from_glib(value: alsaseq_sys::ALSASeqPortSubscribeFlag) -> PortSubscribeFlag {
        PortSubscribeFlag::from_bits_truncate(value)
    }
}

impl StaticType for PortSubscribeFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_port_subscribe_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for PortSubscribeFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PortSubscribeFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for PortSubscribeFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

bitflags! {
    pub struct RemoveFilterFlag: u32 {
        const INPUT = 1;
        const OUTPUT = 2;
    }
}

#[doc(hidden)]
impl ToGlib for RemoveFilterFlag {
    type GlibType = alsaseq_sys::ALSASeqRemoveFilterFlag;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqRemoveFilterFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqRemoveFilterFlag> for RemoveFilterFlag {
    fn from_glib(value: alsaseq_sys::ALSASeqRemoveFilterFlag) -> RemoveFilterFlag {
        RemoveFilterFlag::from_bits_truncate(value)
    }
}

impl StaticType for RemoveFilterFlag {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_remove_filter_flag_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for RemoveFilterFlag {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for RemoveFilterFlag {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for RemoveFilterFlag {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSASeqQueueStatus")]
    pub struct QueueStatus(Object<ffi::ALSASeqQueueStatus, ffi::ALSASeqQueueStatusClass>);

    match fn {
        type_ => || ffi::alsaseq_queue_status_get_type(),
    }
}

impl QueueStatus {
    pub const NONE: Option<&'static QueueStatus> = None;

    #[doc(alias = "alsaseq_queue_status_new")]
    pub fn new() -> QueueStatus {
        unsafe { from_glib_full(ffi::alsaseq_queue_status_new()) }
    }
}

impl Default for QueueStatus {
    fn default() -> Self {
        Self::new()
    }
}

pub trait QueueStatusExt: 'static {
    #[doc(alias = "alsaseq_queue_status_get_tick_time")]
    #[doc(alias = "get_tick_time")]
    fn tick_time(&self) -> u32;

    #[doc(alias = "event-count")]
    fn event_count(&self) -> i32;

    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8;

    fn is_running(&self) -> bool;

    #[doc(alias = "event-count")]
    fn connect_event_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "running")]
    fn connect_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<QueueStatus>> QueueStatusExt for O {
    fn tick_time(&self) -> u32 {
        unsafe {
            let mut tick_time = mem::MaybeUninit::uninit();
            ffi::alsaseq_queue_status_get_tick_time(
                self.as_ref().to_glib_none().0,
                tick_time.as_mut_ptr(),
            );
            let tick_time = tick_time.assume_init();
            tick_time
        }
    }

    fn event_count(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "event-count")
    }

    fn queue_id(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "queue-id")
    }

    fn is_running(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "running")
    }

    fn connect_event_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_event_count_trampoline<
            P: IsA<QueueStatus>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueStatus,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueStatus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::event-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_event_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<
            P: IsA<QueueStatus>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueStatus,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueStatus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_running_trampoline<P: IsA<QueueStatus>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqQueueStatus,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueStatus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::running\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_running_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for QueueStatus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("QueueStatus")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Addr;
use crate::EventTstampMode;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSASeqSubscribeData")]
    pub struct SubscribeData(Object<ffi::ALSASeqSubscribeData, ffi::ALSASeqSubscribeDataClass>);

    match fn {
        type_ => || ffi::alsaseq_subscribe_data_get_type(),
    }
}

impl SubscribeData {
    pub const NONE: Option<&'static SubscribeData> = None;

    #[doc(alias = "alsaseq_subscribe_data_new")]
    pub fn new() -> SubscribeData {
        unsafe { from_glib_full(ffi::alsaseq_subscribe_data_new()) }
    }
}

impl Default for SubscribeData {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SubscribeDataExt: 'static {
    fn dest(&self) -> Option<Addr>;

    fn set_dest(&self, dest: Option<&Addr>);

    #[doc(alias = "has-tstamp")]
    fn has_tstamp(&self) -> bool;

    #[doc(alias = "has-tstamp")]
    fn set_has_tstamp(&self, has_tstamp: bool);

    #[doc(alias = "is-exclusive")]
    fn is_exclusive(&self) -> bool;

    #[doc(alias = "is-exclusive")]
    fn set_is_exclusive(&self, is_exclusive: bool);

    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8;

    #[doc(alias = "queue-id")]
    fn set_queue_id(&self, queue_id: u8);

    fn sender(&self) -> Option<Addr>;

    fn set_sender(&self, sender: Option<&Addr>);

    #[doc(alias = "tstamp-mode")]
    fn tstamp_mode(&self) -> EventTstampMode;

    #[doc(alias = "tstamp-mode")]
    fn set_tstamp_mode(&self, tstamp_mode: EventTstampMode);

    #[doc(alias = "dest")]
    fn connect_dest_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "has-tstamp")]
    fn connect_has_tstamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "is-exclusive")]
    fn connect_is_exclusive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "sender")]
    fn connect_sender_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "tstamp-mode")]
    fn connect_tstamp_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SubscribeData>> SubscribeDataExt for O {
    fn dest(&self) -> Option<Addr> {
        glib::ObjectExt::property(self.as_ref(), "dest")
    }

    fn set_dest(&self, dest: Option<&Addr>) {
        glib::ObjectExt::set_property(self.as_ref(), "dest", &dest)
    }

    fn has_tstamp(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "has-tstamp")
    }

    fn set_has_tstamp(&self, has_tstamp: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "has-tstamp", &has_tstamp)
    }

    fn is_exclusive(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "is-exclusive")
    }

    fn set_is_exclusive(&self, is_exclusive: bool) {
        glib::ObjectExt::set_property(self.as_ref(), "is-exclusive", &is_exclusive)
    }

    fn queue_id(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "queue-id")
    }

    fn set_queue_id(&self, queue_id: u8) {
        glib::ObjectExt::set_property(self.as_ref(), "queue-id", &queue_id)
    }

    fn sender(&self) -> Option<Addr> {
        glib::ObjectExt::property(self.as_ref(), "sender")
    }

    fn set_sender(&self, sender: Option<&Addr>) {
        glib::ObjectExt::set_property(self.as_ref(), "sender", &sender)
    }

    fn tstamp_mode(&self) -> EventTstampMode {
        glib::ObjectExt::property(self.as_ref(), "tstamp-mode")
    }

    fn set_tstamp_mode(&self, tstamp_mode: EventTstampMode) {
        glib::ObjectExt::set_property(self.as_ref(), "tstamp-mode", &tstamp_mode)
    }

    fn connect_dest_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_dest_trampoline<P: IsA<SubscribeData>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::dest\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_dest_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_has_tstamp_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_tstamp_trampoline<
            P: IsA<SubscribeData>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-tstamp\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_tstamp_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_is_exclusive_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_exclusive_trampoline<
            P: IsA<SubscribeData>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::is-exclusive\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_is_exclusive_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<
            P: IsA<SubscribeData>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_sender_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sender_trampoline<
            P: IsA<SubscribeData>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sender\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sender_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_tstamp_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tstamp_mode_trampoline<
            P: IsA<SubscribeData>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSubscribeData,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SubscribeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tstamp-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_tstamp_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SubscribeData {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SubscribeData")
    }
}

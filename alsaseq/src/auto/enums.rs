// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum ClientType {
    None,
    User,
    Kernel,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ClientType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ClientType::{}",
            match *self {
                ClientType::None => "None",
                ClientType::User => "User",
                ClientType::Kernel => "Kernel",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for ClientType {
    type GlibType = alsaseq_sys::ALSASeqClientType;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqClientType {
        match *self {
            ClientType::None => alsaseq_sys::ALSASEQ_CLIENT_TYPE_NONE,
            ClientType::User => alsaseq_sys::ALSASEQ_CLIENT_TYPE_USER,
            ClientType::Kernel => alsaseq_sys::ALSASEQ_CLIENT_TYPE_KERNEL,
            ClientType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqClientType> for ClientType {
    fn from_glib(value: alsaseq_sys::ALSASeqClientType) -> Self {
        match value {
            0 => ClientType::None,
            1 => ClientType::User,
            2 => ClientType::Kernel,
            value => ClientType::__Unknown(value),
        }
    }
}

impl StaticType for ClientType {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_client_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ClientType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ClientType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ClientType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventLengthMode {
    Fixed,
    Variable,
    Pointer,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventLengthMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventLengthMode::{}",
            match *self {
                EventLengthMode::Fixed => "Fixed",
                EventLengthMode::Variable => "Variable",
                EventLengthMode::Pointer => "Pointer",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventLengthMode {
    type GlibType = alsaseq_sys::ALSASeqEventLengthMode;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqEventLengthMode {
        match *self {
            EventLengthMode::Fixed => alsaseq_sys::ALSASEQ_EVENT_LENGTH_MODE_FIXED,
            EventLengthMode::Variable => alsaseq_sys::ALSASEQ_EVENT_LENGTH_MODE_VARIABLE,
            EventLengthMode::Pointer => alsaseq_sys::ALSASEQ_EVENT_LENGTH_MODE_POINTER,
            EventLengthMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqEventLengthMode> for EventLengthMode {
    fn from_glib(value: alsaseq_sys::ALSASeqEventLengthMode) -> Self {
        match value {
            0 => EventLengthMode::Fixed,
            4 => EventLengthMode::Variable,
            8 => EventLengthMode::Pointer,
            value => EventLengthMode::__Unknown(value),
        }
    }
}

impl StaticType for EventLengthMode {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_event_length_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventLengthMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventLengthMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventLengthMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventPriorityMode {
    Normal,
    High,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventPriorityMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventPriorityMode::{}",
            match *self {
                EventPriorityMode::Normal => "Normal",
                EventPriorityMode::High => "High",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventPriorityMode {
    type GlibType = alsaseq_sys::ALSASeqEventPriorityMode;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqEventPriorityMode {
        match *self {
            EventPriorityMode::Normal => alsaseq_sys::ALSASEQ_EVENT_PRIORITY_MODE_NORMAL,
            EventPriorityMode::High => alsaseq_sys::ALSASEQ_EVENT_PRIORITY_MODE_HIGH,
            EventPriorityMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqEventPriorityMode> for EventPriorityMode {
    fn from_glib(value: alsaseq_sys::ALSASeqEventPriorityMode) -> Self {
        match value {
            0 => EventPriorityMode::Normal,
            16 => EventPriorityMode::High,
            value => EventPriorityMode::__Unknown(value),
        }
    }
}

impl StaticType for EventPriorityMode {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_event_priority_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventPriorityMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventPriorityMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventPriorityMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventTimeMode {
    Abs,
    Rel,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventTimeMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventTimeMode::{}",
            match *self {
                EventTimeMode::Abs => "Abs",
                EventTimeMode::Rel => "Rel",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventTimeMode {
    type GlibType = alsaseq_sys::ALSASeqEventTimeMode;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqEventTimeMode {
        match *self {
            EventTimeMode::Abs => alsaseq_sys::ALSASEQ_EVENT_TIME_MODE_ABS,
            EventTimeMode::Rel => alsaseq_sys::ALSASEQ_EVENT_TIME_MODE_REL,
            EventTimeMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqEventTimeMode> for EventTimeMode {
    fn from_glib(value: alsaseq_sys::ALSASeqEventTimeMode) -> Self {
        match value {
            0 => EventTimeMode::Abs,
            2 => EventTimeMode::Rel,
            value => EventTimeMode::__Unknown(value),
        }
    }
}

impl StaticType for EventTimeMode {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_event_time_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventTimeMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventTimeMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventTimeMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventTimestampMode {
    Tick,
    Real,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventTimestampMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventTimestampMode::{}",
            match *self {
                EventTimestampMode::Tick => "Tick",
                EventTimestampMode::Real => "Real",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventTimestampMode {
    type GlibType = alsaseq_sys::ALSASeqEventTimestampMode;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqEventTimestampMode {
        match *self {
            EventTimestampMode::Tick => alsaseq_sys::ALSASEQ_EVENT_TIMESTAMP_MODE_TICK,
            EventTimestampMode::Real => alsaseq_sys::ALSASEQ_EVENT_TIMESTAMP_MODE_REAL,
            EventTimestampMode::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqEventTimestampMode> for EventTimestampMode {
    fn from_glib(value: alsaseq_sys::ALSASeqEventTimestampMode) -> Self {
        match value {
            0 => EventTimestampMode::Tick,
            1 => EventTimestampMode::Real,
            value => EventTimestampMode::__Unknown(value),
        }
    }
}

impl StaticType for EventTimestampMode {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_event_timestamp_mode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventTimestampMode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventTimestampMode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventTimestampMode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum EventType {
    System,
    Result,
    Note,
    Noteon,
    Noteoff,
    Keypress,
    Controller,
    Pgmchange,
    Chanpress,
    Pitchbend,
    Control14,
    Nonregparam,
    Regparam,
    Songpos,
    Songsel,
    Qframe,
    Timesign,
    Keysign,
    Start,
    Continue,
    Stop,
    SetposTick,
    SetposTime,
    Tempo,
    Clock,
    Tick,
    QueueSkew,
    TuneRequest,
    Reset,
    Sensing,
    Echo,
    Oss,
    ClientStart,
    ClientExit,
    ClientChange,
    PortStart,
    PortExit,
    PortChange,
    PortSubscribed,
    PortUnsubscribed,
    Usr0,
    Usr1,
    Usr2,
    Usr3,
    Usr4,
    Usr5,
    Usr6,
    Usr7,
    Usr8,
    Usr9,
    Sysex,
    Bounce,
    UsrVar0,
    UsrVar1,
    UsrVar2,
    UsrVar3,
    UsrVar4,
    None,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EventType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "EventType::{}",
            match *self {
                EventType::System => "System",
                EventType::Result => "Result",
                EventType::Note => "Note",
                EventType::Noteon => "Noteon",
                EventType::Noteoff => "Noteoff",
                EventType::Keypress => "Keypress",
                EventType::Controller => "Controller",
                EventType::Pgmchange => "Pgmchange",
                EventType::Chanpress => "Chanpress",
                EventType::Pitchbend => "Pitchbend",
                EventType::Control14 => "Control14",
                EventType::Nonregparam => "Nonregparam",
                EventType::Regparam => "Regparam",
                EventType::Songpos => "Songpos",
                EventType::Songsel => "Songsel",
                EventType::Qframe => "Qframe",
                EventType::Timesign => "Timesign",
                EventType::Keysign => "Keysign",
                EventType::Start => "Start",
                EventType::Continue => "Continue",
                EventType::Stop => "Stop",
                EventType::SetposTick => "SetposTick",
                EventType::SetposTime => "SetposTime",
                EventType::Tempo => "Tempo",
                EventType::Clock => "Clock",
                EventType::Tick => "Tick",
                EventType::QueueSkew => "QueueSkew",
                EventType::TuneRequest => "TuneRequest",
                EventType::Reset => "Reset",
                EventType::Sensing => "Sensing",
                EventType::Echo => "Echo",
                EventType::Oss => "Oss",
                EventType::ClientStart => "ClientStart",
                EventType::ClientExit => "ClientExit",
                EventType::ClientChange => "ClientChange",
                EventType::PortStart => "PortStart",
                EventType::PortExit => "PortExit",
                EventType::PortChange => "PortChange",
                EventType::PortSubscribed => "PortSubscribed",
                EventType::PortUnsubscribed => "PortUnsubscribed",
                EventType::Usr0 => "Usr0",
                EventType::Usr1 => "Usr1",
                EventType::Usr2 => "Usr2",
                EventType::Usr3 => "Usr3",
                EventType::Usr4 => "Usr4",
                EventType::Usr5 => "Usr5",
                EventType::Usr6 => "Usr6",
                EventType::Usr7 => "Usr7",
                EventType::Usr8 => "Usr8",
                EventType::Usr9 => "Usr9",
                EventType::Sysex => "Sysex",
                EventType::Bounce => "Bounce",
                EventType::UsrVar0 => "UsrVar0",
                EventType::UsrVar1 => "UsrVar1",
                EventType::UsrVar2 => "UsrVar2",
                EventType::UsrVar3 => "UsrVar3",
                EventType::UsrVar4 => "UsrVar4",
                EventType::None => "None",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for EventType {
    type GlibType = alsaseq_sys::ALSASeqEventType;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqEventType {
        match *self {
            EventType::System => alsaseq_sys::ALSASEQ_EVENT_TYPE_SYSTEM,
            EventType::Result => alsaseq_sys::ALSASEQ_EVENT_TYPE_RESULT,
            EventType::Note => alsaseq_sys::ALSASEQ_EVENT_TYPE_NOTE,
            EventType::Noteon => alsaseq_sys::ALSASEQ_EVENT_TYPE_NOTEON,
            EventType::Noteoff => alsaseq_sys::ALSASEQ_EVENT_TYPE_NOTEOFF,
            EventType::Keypress => alsaseq_sys::ALSASEQ_EVENT_TYPE_KEYPRESS,
            EventType::Controller => alsaseq_sys::ALSASEQ_EVENT_TYPE_CONTROLLER,
            EventType::Pgmchange => alsaseq_sys::ALSASEQ_EVENT_TYPE_PGMCHANGE,
            EventType::Chanpress => alsaseq_sys::ALSASEQ_EVENT_TYPE_CHANPRESS,
            EventType::Pitchbend => alsaseq_sys::ALSASEQ_EVENT_TYPE_PITCHBEND,
            EventType::Control14 => alsaseq_sys::ALSASEQ_EVENT_TYPE_CONTROL14,
            EventType::Nonregparam => alsaseq_sys::ALSASEQ_EVENT_TYPE_NONREGPARAM,
            EventType::Regparam => alsaseq_sys::ALSASEQ_EVENT_TYPE_REGPARAM,
            EventType::Songpos => alsaseq_sys::ALSASEQ_EVENT_TYPE_SONGPOS,
            EventType::Songsel => alsaseq_sys::ALSASEQ_EVENT_TYPE_SONGSEL,
            EventType::Qframe => alsaseq_sys::ALSASEQ_EVENT_TYPE_QFRAME,
            EventType::Timesign => alsaseq_sys::ALSASEQ_EVENT_TYPE_TIMESIGN,
            EventType::Keysign => alsaseq_sys::ALSASEQ_EVENT_TYPE_KEYSIGN,
            EventType::Start => alsaseq_sys::ALSASEQ_EVENT_TYPE_START,
            EventType::Continue => alsaseq_sys::ALSASEQ_EVENT_TYPE_CONTINUE,
            EventType::Stop => alsaseq_sys::ALSASEQ_EVENT_TYPE_STOP,
            EventType::SetposTick => alsaseq_sys::ALSASEQ_EVENT_TYPE_SETPOS_TICK,
            EventType::SetposTime => alsaseq_sys::ALSASEQ_EVENT_TYPE_SETPOS_TIME,
            EventType::Tempo => alsaseq_sys::ALSASEQ_EVENT_TYPE_TEMPO,
            EventType::Clock => alsaseq_sys::ALSASEQ_EVENT_TYPE_CLOCK,
            EventType::Tick => alsaseq_sys::ALSASEQ_EVENT_TYPE_TICK,
            EventType::QueueSkew => alsaseq_sys::ALSASEQ_EVENT_TYPE_QUEUE_SKEW,
            EventType::TuneRequest => alsaseq_sys::ALSASEQ_EVENT_TYPE_TUNE_REQUEST,
            EventType::Reset => alsaseq_sys::ALSASEQ_EVENT_TYPE_RESET,
            EventType::Sensing => alsaseq_sys::ALSASEQ_EVENT_TYPE_SENSING,
            EventType::Echo => alsaseq_sys::ALSASEQ_EVENT_TYPE_ECHO,
            EventType::Oss => alsaseq_sys::ALSASEQ_EVENT_TYPE_OSS,
            EventType::ClientStart => alsaseq_sys::ALSASEQ_EVENT_TYPE_CLIENT_START,
            EventType::ClientExit => alsaseq_sys::ALSASEQ_EVENT_TYPE_CLIENT_EXIT,
            EventType::ClientChange => alsaseq_sys::ALSASEQ_EVENT_TYPE_CLIENT_CHANGE,
            EventType::PortStart => alsaseq_sys::ALSASEQ_EVENT_TYPE_PORT_START,
            EventType::PortExit => alsaseq_sys::ALSASEQ_EVENT_TYPE_PORT_EXIT,
            EventType::PortChange => alsaseq_sys::ALSASEQ_EVENT_TYPE_PORT_CHANGE,
            EventType::PortSubscribed => alsaseq_sys::ALSASEQ_EVENT_TYPE_PORT_SUBSCRIBED,
            EventType::PortUnsubscribed => alsaseq_sys::ALSASEQ_EVENT_TYPE_PORT_UNSUBSCRIBED,
            EventType::Usr0 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR0,
            EventType::Usr1 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR1,
            EventType::Usr2 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR2,
            EventType::Usr3 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR3,
            EventType::Usr4 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR4,
            EventType::Usr5 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR5,
            EventType::Usr6 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR6,
            EventType::Usr7 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR7,
            EventType::Usr8 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR8,
            EventType::Usr9 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR9,
            EventType::Sysex => alsaseq_sys::ALSASEQ_EVENT_TYPE_SYSEX,
            EventType::Bounce => alsaseq_sys::ALSASEQ_EVENT_TYPE_BOUNCE,
            EventType::UsrVar0 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR_VAR0,
            EventType::UsrVar1 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR_VAR1,
            EventType::UsrVar2 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR_VAR2,
            EventType::UsrVar3 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR_VAR3,
            EventType::UsrVar4 => alsaseq_sys::ALSASEQ_EVENT_TYPE_USR_VAR4,
            EventType::None => alsaseq_sys::ALSASEQ_EVENT_TYPE_NONE,
            EventType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqEventType> for EventType {
    fn from_glib(value: alsaseq_sys::ALSASeqEventType) -> Self {
        match value {
            0 => EventType::System,
            1 => EventType::Result,
            5 => EventType::Note,
            6 => EventType::Noteon,
            7 => EventType::Noteoff,
            8 => EventType::Keypress,
            10 => EventType::Controller,
            11 => EventType::Pgmchange,
            12 => EventType::Chanpress,
            13 => EventType::Pitchbend,
            14 => EventType::Control14,
            15 => EventType::Nonregparam,
            16 => EventType::Regparam,
            20 => EventType::Songpos,
            21 => EventType::Songsel,
            22 => EventType::Qframe,
            23 => EventType::Timesign,
            24 => EventType::Keysign,
            30 => EventType::Start,
            31 => EventType::Continue,
            32 => EventType::Stop,
            33 => EventType::SetposTick,
            34 => EventType::SetposTime,
            35 => EventType::Tempo,
            36 => EventType::Clock,
            37 => EventType::Tick,
            38 => EventType::QueueSkew,
            40 => EventType::TuneRequest,
            41 => EventType::Reset,
            42 => EventType::Sensing,
            50 => EventType::Echo,
            51 => EventType::Oss,
            60 => EventType::ClientStart,
            61 => EventType::ClientExit,
            62 => EventType::ClientChange,
            63 => EventType::PortStart,
            64 => EventType::PortExit,
            65 => EventType::PortChange,
            66 => EventType::PortSubscribed,
            67 => EventType::PortUnsubscribed,
            90 => EventType::Usr0,
            91 => EventType::Usr1,
            92 => EventType::Usr2,
            93 => EventType::Usr3,
            94 => EventType::Usr4,
            95 => EventType::Usr5,
            96 => EventType::Usr6,
            97 => EventType::Usr7,
            98 => EventType::Usr8,
            99 => EventType::Usr9,
            130 => EventType::Sysex,
            131 => EventType::Bounce,
            135 => EventType::UsrVar0,
            136 => EventType::UsrVar1,
            137 => EventType::UsrVar2,
            138 => EventType::UsrVar3,
            139 => EventType::UsrVar4,
            255 => EventType::None,
            value => EventType::__Unknown(value),
        }
    }
}

impl StaticType for EventType {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_event_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for EventType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for EventType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for EventType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum QuerySubscribeType {
    Read,
    Write,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for QuerySubscribeType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "QuerySubscribeType::{}",
            match *self {
                QuerySubscribeType::Read => "Read",
                QuerySubscribeType::Write => "Write",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for QuerySubscribeType {
    type GlibType = alsaseq_sys::ALSASeqQuerySubscribeType;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqQuerySubscribeType {
        match *self {
            QuerySubscribeType::Read => alsaseq_sys::ALSASEQ_QUERY_SUBSCRIBE_TYPE_READ,
            QuerySubscribeType::Write => alsaseq_sys::ALSASEQ_QUERY_SUBSCRIBE_TYPE_WRITE,
            QuerySubscribeType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqQuerySubscribeType> for QuerySubscribeType {
    fn from_glib(value: alsaseq_sys::ALSASeqQuerySubscribeType) -> Self {
        match value {
            0 => QuerySubscribeType::Read,
            1 => QuerySubscribeType::Write,
            value => QuerySubscribeType::__Unknown(value),
        }
    }
}

impl StaticType for QuerySubscribeType {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_query_subscribe_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for QuerySubscribeType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for QuerySubscribeType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for QuerySubscribeType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum QueueTimerType {
    Alsa,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for QueueTimerType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "QueueTimerType::{}",
            match *self {
                QueueTimerType::Alsa => "Alsa",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for QueueTimerType {
    type GlibType = alsaseq_sys::ALSASeqQueueTimerType;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqQueueTimerType {
        match *self {
            QueueTimerType::Alsa => alsaseq_sys::ALSASEQ_QUEUE_TIMER_TYPE_ALSA,
            QueueTimerType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqQueueTimerType> for QueueTimerType {
    fn from_glib(value: alsaseq_sys::ALSASeqQueueTimerType) -> Self {
        match value {
            0 => QueueTimerType::Alsa,
            value => QueueTimerType::__Unknown(value),
        }
    }
}

impl StaticType for QueueTimerType {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_queue_timer_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for QueueTimerType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for QueueTimerType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for QueueTimerType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SpecificAddress {
    Unknown,
    Subscribers,
    Broadcast,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificAddress {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SpecificAddress::{}",
            match *self {
                SpecificAddress::Unknown => "Unknown",
                SpecificAddress::Subscribers => "Subscribers",
                SpecificAddress::Broadcast => "Broadcast",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SpecificAddress {
    type GlibType = alsaseq_sys::ALSASeqSpecificAddress;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqSpecificAddress {
        match *self {
            SpecificAddress::Unknown => alsaseq_sys::ALSASEQ_SPECIFIC_ADDRESS_UNKNOWN,
            SpecificAddress::Subscribers => alsaseq_sys::ALSASEQ_SPECIFIC_ADDRESS_SUBSCRIBERS,
            SpecificAddress::Broadcast => alsaseq_sys::ALSASEQ_SPECIFIC_ADDRESS_BROADCAST,
            SpecificAddress::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqSpecificAddress> for SpecificAddress {
    fn from_glib(value: alsaseq_sys::ALSASeqSpecificAddress) -> Self {
        match value {
            253 => SpecificAddress::Unknown,
            254 => SpecificAddress::Subscribers,
            255 => SpecificAddress::Broadcast,
            value => SpecificAddress::__Unknown(value),
        }
    }
}

impl StaticType for SpecificAddress {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_specific_address_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpecificAddress {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpecificAddress {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SpecificAddress {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SpecificClientId {
    System,
    Dummy,
    Oss,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificClientId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SpecificClientId::{}",
            match *self {
                SpecificClientId::System => "System",
                SpecificClientId::Dummy => "Dummy",
                SpecificClientId::Oss => "Oss",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SpecificClientId {
    type GlibType = alsaseq_sys::ALSASeqSpecificClientId;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqSpecificClientId {
        match *self {
            SpecificClientId::System => alsaseq_sys::ALSASEQ_SPECIFIC_CLIENT_ID_SYSTEM,
            SpecificClientId::Dummy => alsaseq_sys::ALSASEQ_SPECIFIC_CLIENT_ID_DUMMY,
            SpecificClientId::Oss => alsaseq_sys::ALSASEQ_SPECIFIC_CLIENT_ID_OSS,
            SpecificClientId::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqSpecificClientId> for SpecificClientId {
    fn from_glib(value: alsaseq_sys::ALSASeqSpecificClientId) -> Self {
        match value {
            0 => SpecificClientId::System,
            14 => SpecificClientId::Dummy,
            15 => SpecificClientId::Oss,
            value => SpecificClientId::__Unknown(value),
        }
    }
}

impl StaticType for SpecificClientId {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_specific_client_id_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpecificClientId {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpecificClientId {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SpecificClientId {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SpecificPortId {
    Timer,
    Announce,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificPortId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SpecificPortId::{}",
            match *self {
                SpecificPortId::Timer => "Timer",
                SpecificPortId::Announce => "Announce",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SpecificPortId {
    type GlibType = alsaseq_sys::ALSASeqSpecificPortId;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqSpecificPortId {
        match *self {
            SpecificPortId::Timer => alsaseq_sys::ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_TIMER,
            SpecificPortId::Announce => alsaseq_sys::ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_ANNOUNCE,
            SpecificPortId::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqSpecificPortId> for SpecificPortId {
    fn from_glib(value: alsaseq_sys::ALSASeqSpecificPortId) -> Self {
        match value {
            0 => SpecificPortId::Timer,
            1 => SpecificPortId::Announce,
            value => SpecificPortId::__Unknown(value),
        }
    }
}

impl StaticType for SpecificPortId {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_specific_port_id_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpecificPortId {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpecificPortId {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SpecificPortId {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum SpecificQueueId {
    Direct,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SpecificQueueId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SpecificQueueId::{}",
            match *self {
                SpecificQueueId::Direct => "Direct",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SpecificQueueId {
    type GlibType = alsaseq_sys::ALSASeqSpecificQueueId;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqSpecificQueueId {
        match *self {
            SpecificQueueId::Direct => alsaseq_sys::ALSASEQ_SPECIFIC_QUEUE_ID_DIRECT,
            SpecificQueueId::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqSpecificQueueId> for SpecificQueueId {
    fn from_glib(value: alsaseq_sys::ALSASeqSpecificQueueId) -> Self {
        match value {
            253 => SpecificQueueId::Direct,
            value => SpecificQueueId::__Unknown(value),
        }
    }
}

impl StaticType for SpecificQueueId {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_specific_queue_id_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SpecificQueueId {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SpecificQueueId {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SpecificQueueId {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
pub enum UserClientError {
    Failed,
    PortPermission,
    QueuePermission,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for UserClientError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "UserClientError::{}",
            match *self {
                UserClientError::Failed => "Failed",
                UserClientError::PortPermission => "PortPermission",
                UserClientError::QueuePermission => "QueuePermission",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for UserClientError {
    type GlibType = alsaseq_sys::ALSASeqUserClientError;

    fn to_glib(&self) -> alsaseq_sys::ALSASeqUserClientError {
        match *self {
            UserClientError::Failed => alsaseq_sys::ALSASEQ_USER_CLIENT_ERROR_FAILED,
            UserClientError::PortPermission => {
                alsaseq_sys::ALSASEQ_USER_CLIENT_ERROR_PORT_PERMISSION
            }
            UserClientError::QueuePermission => {
                alsaseq_sys::ALSASEQ_USER_CLIENT_ERROR_QUEUE_PERMISSION
            }
            UserClientError::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<alsaseq_sys::ALSASeqUserClientError> for UserClientError {
    fn from_glib(value: alsaseq_sys::ALSASeqUserClientError) -> Self {
        match value {
            0 => UserClientError::Failed,
            1 => UserClientError::PortPermission,
            2 => UserClientError::QueuePermission,
            value => UserClientError::__Unknown(value),
        }
    }
}

impl ErrorDomain for UserClientError {
    fn domain() -> Quark {
        unsafe { from_glib(alsaseq_sys::alsaseq_user_client_error_quark()) }
    }

    fn code(self) -> i32 {
        self.to_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            0 => Some(UserClientError::Failed),
            1 => Some(UserClientError::PortPermission),
            2 => Some(UserClientError::QueuePermission),
            _ => Some(UserClientError::Failed),
        }
    }
}

impl StaticType for UserClientError {
    fn static_type() -> Type {
        unsafe { from_glib(alsaseq_sys::alsaseq_user_client_error_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for UserClientError {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for UserClientError {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for UserClientError {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

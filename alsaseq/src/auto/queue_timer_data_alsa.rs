// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::translate::*;
use gobject_sys;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct QueueTimerDataAlsa(Boxed<alsaseq_sys::ALSASeqQueueTimerDataAlsa>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(alsaseq_sys::alsaseq_queue_timer_data_alsa_get_type(), ptr as *mut _) as *mut alsaseq_sys::ALSASeqQueueTimerDataAlsa,
        free => |ptr| gobject_sys::g_boxed_free(alsaseq_sys::alsaseq_queue_timer_data_alsa_get_type(), ptr as *mut _),
        get_type => || alsaseq_sys::alsaseq_queue_timer_data_alsa_get_type(),
    }
}

impl QueueTimerDataAlsa {
    pub fn get_resolution(&self) -> u32 {
        unsafe {
            let mut resolution = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_queue_timer_data_alsa_get_resolution(self.to_glib_none().0, resolution.as_mut_ptr());
            let resolution = resolution.assume_init();
            resolution
        }
    }

    pub fn set_resolution(&mut self, resolution: u32) {
        unsafe {
            alsaseq_sys::alsaseq_queue_timer_data_alsa_set_resolution(self.to_glib_none_mut().0, resolution);
        }
    }
}

unsafe impl Send for QueueTimerDataAlsa {}

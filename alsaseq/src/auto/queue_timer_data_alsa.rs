// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct QueueTimerDataAlsa(Boxed<ffi::ALSASeqQueueTimerDataAlsa>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsaseq_queue_timer_data_alsa_get_type(), ptr as *mut _) as *mut ffi::ALSASeqQueueTimerDataAlsa,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsaseq_queue_timer_data_alsa_get_type(), ptr as *mut _),
        type_ => || ffi::alsaseq_queue_timer_data_alsa_get_type(),
    }
}

impl QueueTimerDataAlsa {
    #[doc(alias = "alsaseq_queue_timer_data_alsa_get_resolution")]
    #[doc(alias = "get_resolution")]
    pub fn resolution(&self) -> u32 {
        unsafe {
            let mut resolution = mem::MaybeUninit::uninit();
            ffi::alsaseq_queue_timer_data_alsa_get_resolution(
                self.to_glib_none().0,
                resolution.as_mut_ptr(),
            );
            let resolution = resolution.assume_init();
            resolution
        }
    }

    #[doc(alias = "alsaseq_queue_timer_data_alsa_set_device_id")]
    pub fn set_device_id(&mut self, device_id: &alsatimer::DeviceId) {
        unsafe {
            ffi::alsaseq_queue_timer_data_alsa_set_device_id(
                self.to_glib_none_mut().0,
                device_id.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "alsaseq_queue_timer_data_alsa_set_resolution")]
    pub fn set_resolution(&mut self, resolution: u32) {
        unsafe {
            ffi::alsaseq_queue_timer_data_alsa_set_resolution(
                self.to_glib_none_mut().0,
                resolution,
            );
        }
    }
}

unsafe impl Send for QueueTimerDataAlsa {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct ClientPool(Object<alsaseq_sys::ALSASeqClientPool, alsaseq_sys::ALSASeqClientPoolClass, ClientPoolClass>);

    match fn {
        get_type => || alsaseq_sys::alsaseq_client_pool_get_type(),
    }
}

impl ClientPool {
    pub fn new() -> ClientPool {
        unsafe { from_glib_full(alsaseq_sys::alsaseq_client_pool_new()) }
    }
}

impl Default for ClientPool {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_CLIENT_POOL: Option<&ClientPool> = None;

pub trait ClientPoolExt: 'static {
    fn get_property_client_id(&self) -> u8;

    fn get_property_input_free(&self) -> u32;

    fn set_property_input_free(&self, input_free: u32);

    fn get_property_input_pool(&self) -> u32;

    fn set_property_input_pool(&self, input_pool: u32);

    fn get_property_output_free(&self) -> u32;

    fn set_property_output_free(&self, output_free: u32);

    fn get_property_output_pool(&self) -> u32;

    fn set_property_output_pool(&self, output_pool: u32);

    fn get_property_output_room(&self) -> u32;

    fn set_property_output_room(&self, output_room: u32);

    fn connect_property_client_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_input_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_output_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_output_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_output_room_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ClientPool>> ClientPoolExt for O {
    fn get_property_client_id(&self) -> u8 {
        unsafe {
            let mut value = Value::from_type(<u8 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"client-id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `client-id` getter")
                .unwrap()
        }
    }

    fn get_property_input_free(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"input-free\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `input-free` getter")
                .unwrap()
        }
    }

    fn set_property_input_free(&self, input_free: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"input-free\0".as_ptr() as *const _,
                Value::from(&input_free).to_glib_none().0,
            );
        }
    }

    fn get_property_input_pool(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"input-pool\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `input-pool` getter")
                .unwrap()
        }
    }

    fn set_property_input_pool(&self, input_pool: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"input-pool\0".as_ptr() as *const _,
                Value::from(&input_pool).to_glib_none().0,
            );
        }
    }

    fn get_property_output_free(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-free\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `output-free` getter")
                .unwrap()
        }
    }

    fn set_property_output_free(&self, output_free: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-free\0".as_ptr() as *const _,
                Value::from(&output_free).to_glib_none().0,
            );
        }
    }

    fn get_property_output_pool(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-pool\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `output-pool` getter")
                .unwrap()
        }
    }

    fn set_property_output_pool(&self, output_pool: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-pool\0".as_ptr() as *const _,
                Value::from(&output_pool).to_glib_none().0,
            );
        }
    }

    fn get_property_output_room(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-room\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `output-room` getter")
                .unwrap()
        }
    }

    fn set_property_output_room(&self, output_room: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"output-room\0".as_ptr() as *const _,
                Value::from(&output_room).to_glib_none().0,
            );
        }
    }

    fn connect_property_client_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_client_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::client-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_client_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_input_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_free_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-free\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_free_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_input_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_pool_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-pool\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_pool_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_output_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_free_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-free\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_free_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_output_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_pool_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-pool\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_pool_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_output_room_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_room_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqClientPool,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<ClientPool>,
        {
            let f: &F = &*(f as *const F);
            f(&ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-room\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_room_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ClientPool {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ClientPool")
    }
}

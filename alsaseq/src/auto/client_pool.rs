// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSASeqClientPool")]
    pub struct ClientPool(Object<ffi::ALSASeqClientPool, ffi::ALSASeqClientPoolClass>);

    match fn {
        type_ => || ffi::alsaseq_client_pool_get_type(),
    }
}

impl ClientPool {
    pub const NONE: Option<&'static ClientPool> = None;

    #[doc(alias = "alsaseq_client_pool_new")]
    pub fn new() -> ClientPool {
        unsafe { from_glib_full(ffi::alsaseq_client_pool_new()) }
    }
}

impl Default for ClientPool {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ClientPoolExt: 'static {
    #[doc(alias = "client-id")]
    fn client_id(&self) -> u8;

    #[doc(alias = "input-free")]
    fn input_free(&self) -> i32;

    #[doc(alias = "input-free")]
    fn set_input_free(&self, input_free: i32);

    #[doc(alias = "input-pool")]
    fn input_pool(&self) -> i32;

    #[doc(alias = "input-pool")]
    fn set_input_pool(&self, input_pool: i32);

    #[doc(alias = "output-free")]
    fn output_free(&self) -> i32;

    #[doc(alias = "output-free")]
    fn set_output_free(&self, output_free: i32);

    #[doc(alias = "output-pool")]
    fn output_pool(&self) -> i32;

    #[doc(alias = "output-pool")]
    fn set_output_pool(&self, output_pool: i32);

    #[doc(alias = "output-room")]
    fn output_room(&self) -> i32;

    #[doc(alias = "output-room")]
    fn set_output_room(&self, output_room: i32);

    #[doc(alias = "client-id")]
    fn connect_client_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "input-free")]
    fn connect_input_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "input-pool")]
    fn connect_input_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "output-free")]
    fn connect_output_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "output-pool")]
    fn connect_output_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "output-room")]
    fn connect_output_room_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ClientPool>> ClientPoolExt for O {
    fn client_id(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "client-id")
    }

    fn input_free(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "input-free")
    }

    fn set_input_free(&self, input_free: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "input-free", &input_free)
    }

    fn input_pool(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "input-pool")
    }

    fn set_input_pool(&self, input_pool: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "input-pool", &input_pool)
    }

    fn output_free(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "output-free")
    }

    fn set_output_free(&self, output_free: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "output-free", &output_free)
    }

    fn output_pool(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "output-pool")
    }

    fn set_output_pool(&self, output_pool: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "output-pool", &output_pool)
    }

    fn output_room(&self) -> i32 {
        glib::ObjectExt::property(self.as_ref(), "output-room")
    }

    fn set_output_room(&self, output_room: i32) {
        glib::ObjectExt::set_property(self.as_ref(), "output-room", &output_room)
    }

    fn connect_client_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_client_id_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::client-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_client_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_input_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_free_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-free\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_free_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_input_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_input_pool_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::input-pool\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_input_pool_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_output_free_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_free_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-free\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_free_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_output_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_pool_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-pool\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_pool_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_output_room_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_output_room_trampoline<
            P: IsA<ClientPool>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqClientPool,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ClientPool::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::output-room\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_output_room_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for ClientPool {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ClientPool")
    }
}

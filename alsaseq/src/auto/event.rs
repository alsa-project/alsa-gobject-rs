// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib;
use glib::translate::*;
use gobject_sys;
use std::mem;
use std::ptr;
use Addr;
use EventDataConnect;
use EventDataCtl;
use EventDataNote;
use EventDataQueue;
use EventDataResult;
use EventLengthMode;
use EventPriorityMode;
use EventTimeMode;
use EventTstampMode;
use EventType;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Event(Boxed<alsaseq_sys::ALSASeqEvent>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(alsaseq_sys::alsaseq_event_get_type(), ptr as *mut _) as *mut alsaseq_sys::ALSASeqEvent,
        free => |ptr| gobject_sys::g_boxed_free(alsaseq_sys::alsaseq_event_get_type(), ptr as *mut _),
        get_type => || alsaseq_sys::alsaseq_event_get_type(),
    }
}

impl Event {
    pub fn new(event_type: EventType) -> Event {
        unsafe { from_glib_full(alsaseq_sys::alsaseq_event_new(event_type.to_glib())) }
    }

    pub fn calculate_pool_consumption(&self) -> u32 {
        unsafe {
            let mut cells = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_calculate_pool_consumption(
                self.to_glib_none().0,
                cells.as_mut_ptr(),
            );
            let cells = cells.assume_init();
            cells
        }
    }

    pub fn get_event_type(&self) -> EventType {
        unsafe {
            let mut event_type = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_event_type(
                self.to_glib_none().0,
                event_type.as_mut_ptr(),
            );
            let event_type = event_type.assume_init();
            from_glib(event_type)
        }
    }

    pub fn get_length_mode(&self) -> EventLengthMode {
        unsafe {
            let mut length_mode = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_length_mode(
                self.to_glib_none().0,
                length_mode.as_mut_ptr(),
            );
            let length_mode = length_mode.assume_init();
            from_glib(length_mode)
        }
    }

    pub fn get_priority_mode(&self) -> EventPriorityMode {
        unsafe {
            let mut priority_mode = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_priority_mode(
                self.to_glib_none().0,
                priority_mode.as_mut_ptr(),
            );
            let priority_mode = priority_mode.assume_init();
            from_glib(priority_mode)
        }
    }

    pub fn get_queue_id(&self) -> u8 {
        unsafe {
            let mut queue_id = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_queue_id(self.to_glib_none().0, queue_id.as_mut_ptr());
            let queue_id = queue_id.assume_init();
            queue_id
        }
    }

    pub fn get_tag(&self) -> i8 {
        unsafe {
            let mut tag = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_tag(self.to_glib_none().0, tag.as_mut_ptr());
            let tag = tag.assume_init();
            tag
        }
    }

    pub fn get_time_mode(&self) -> EventTimeMode {
        unsafe {
            let mut time_mode = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_time_mode(self.to_glib_none().0, time_mode.as_mut_ptr());
            let time_mode = time_mode.assume_init();
            from_glib(time_mode)
        }
    }

    pub fn get_tstamp_mode(&self) -> EventTstampMode {
        unsafe {
            let mut tstamp_mode = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_get_tstamp_mode(
                self.to_glib_none().0,
                tstamp_mode.as_mut_ptr(),
            );
            let tstamp_mode = tstamp_mode.assume_init();
            from_glib(tstamp_mode)
        }
    }

    pub fn set_addr_data(&mut self, data: &Addr) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_addr_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_blob_data(&mut self, data: &[u8]) -> Result<(), glib::Error> {
        let length = data.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_blob_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                length,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_connect_data(&mut self, data: &EventDataConnect) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_connect_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_ctl_data(&mut self, data: &EventDataCtl) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_ctl_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_destination(&mut self, addr: &Addr) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_destination(
                self.to_glib_none_mut().0,
                addr.to_glib_none().0,
            );
        }
    }

    pub fn set_note_data(&mut self, data: &EventDataNote) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_note_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_priority_mode(&mut self, priority_mode: EventPriorityMode) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_priority_mode(
                self.to_glib_none_mut().0,
                priority_mode.to_glib(),
            );
        }
    }

    pub fn set_queue_data(&mut self, data: &EventDataQueue) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_queue_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_queue_id(&mut self, queue_id: u8) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_queue_id(self.to_glib_none_mut().0, queue_id);
        }
    }

    pub fn set_result_data(&mut self, data: &EventDataResult) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_result_data(
                self.to_glib_none_mut().0,
                data.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_source(&mut self, addr: &Addr) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_source(self.to_glib_none_mut().0, addr.to_glib_none().0);
        }
    }

    pub fn set_tag(&mut self, tag: i8) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_tag(self.to_glib_none_mut().0, tag);
        }
    }

    pub fn set_tick_time(&mut self, tick_time: u32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_tick_time(
                self.to_glib_none_mut().0,
                tick_time,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_tick_time_data(&mut self, tick_time: u32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = alsaseq_sys::alsaseq_event_set_tick_time_data(
                self.to_glib_none_mut().0,
                tick_time,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn set_time_mode(&mut self, time_mode: EventTimeMode) {
        unsafe {
            alsaseq_sys::alsaseq_event_set_time_mode(
                self.to_glib_none_mut().0,
                time_mode.to_glib(),
            );
        }
    }
}

unsafe impl Send for Event {}

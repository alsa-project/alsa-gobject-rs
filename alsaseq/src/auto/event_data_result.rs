// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::translate::*;
use gobject_sys;
use std::mem;
use EventType;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EventDataResult(Boxed<alsaseq_sys::ALSASeqEventDataResult>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(alsaseq_sys::alsaseq_event_data_result_get_type(), ptr as *mut _) as *mut alsaseq_sys::ALSASeqEventDataResult,
        free => |ptr| gobject_sys::g_boxed_free(alsaseq_sys::alsaseq_event_data_result_get_type(), ptr as *mut _),
        get_type => || alsaseq_sys::alsaseq_event_data_result_get_type(),
    }
}

impl EventDataResult {
    pub fn get_event(&self) -> EventType {
        unsafe {
            let mut event_type = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_data_result_get_event(
                self.to_glib_none().0,
                event_type.as_mut_ptr(),
            );
            let event_type = event_type.assume_init();
            from_glib(event_type)
        }
    }

    pub fn get_result(&self) -> i32 {
        unsafe {
            let mut result = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_event_data_result_get_result(
                self.to_glib_none().0,
                result.as_mut_ptr(),
            );
            let result = result.assume_init();
            result
        }
    }

    pub fn set_event(&mut self, event_type: EventType) {
        unsafe {
            alsaseq_sys::alsaseq_event_data_result_set_event(
                self.to_glib_none_mut().0,
                event_type.to_glib(),
            );
        }
    }

    pub fn set_result(&mut self, result: i32) {
        unsafe {
            alsaseq_sys::alsaseq_event_data_result_set_result(self.to_glib_none_mut().0, result);
        }
    }
}

unsafe impl Send for EventDataResult {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::EventType;
use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EventDataResult(Boxed<ffi::ALSASeqEventDataResult>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsaseq_event_data_result_get_type(), ptr as *mut _) as *mut ffi::ALSASeqEventDataResult,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsaseq_event_data_result_get_type(), ptr as *mut _),
        type_ => || ffi::alsaseq_event_data_result_get_type(),
    }
}

impl EventDataResult {
    #[doc(alias = "alsaseq_event_data_result_get_event")]
    #[doc(alias = "get_event")]
    pub fn event(&self) -> EventType {
        unsafe {
            let mut event_type = mem::MaybeUninit::uninit();
            ffi::alsaseq_event_data_result_get_event(
                self.to_glib_none().0,
                event_type.as_mut_ptr(),
            );
            let event_type = event_type.assume_init();
            from_glib(event_type)
        }
    }

    #[doc(alias = "alsaseq_event_data_result_get_result")]
    #[doc(alias = "get_result")]
    pub fn result(&self) -> i32 {
        unsafe {
            let mut result = mem::MaybeUninit::uninit();
            ffi::alsaseq_event_data_result_get_result(self.to_glib_none().0, result.as_mut_ptr());
            let result = result.assume_init();
            result
        }
    }

    #[doc(alias = "alsaseq_event_data_result_set_event")]
    pub fn set_event(&mut self, event_type: EventType) {
        unsafe {
            ffi::alsaseq_event_data_result_set_event(
                self.to_glib_none_mut().0,
                event_type.into_glib(),
            );
        }
    }

    #[doc(alias = "alsaseq_event_data_result_set_result")]
    pub fn set_result(&mut self, result: i32) {
        unsafe {
            ffi::alsaseq_event_data_result_set_result(self.to_glib_none_mut().0, result);
        }
    }
}

unsafe impl Send for EventDataResult {}

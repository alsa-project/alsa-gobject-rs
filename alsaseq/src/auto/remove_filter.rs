// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Addr;
use crate::EventType;
use crate::RemoveFilterFlag;
use glib::translate::*;
use std::ptr;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct RemoveFilter(Boxed<ffi::ALSASeqRemoveFilter>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::alsaseq_remove_filter_get_type(), ptr as *mut _) as *mut ffi::ALSASeqRemoveFilter,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::alsaseq_remove_filter_get_type(), ptr as *mut _),
        type_ => || ffi::alsaseq_remove_filter_get_type(),
    }
}

impl RemoveFilter {
    #[doc(alias = "alsaseq_remove_filter_new_with_dest_addr")]
    #[doc(alias = "new_with_dest_addr")]
    pub fn with_dest_addr(
        inout: RemoveFilterFlag,
        queue_id: u8,
        dest: &mut Addr,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_dest_addr(
                inout.into_glib(),
                queue_id,
                dest.to_glib_none_mut().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_event_type")]
    #[doc(alias = "new_with_event_type")]
    pub fn with_event_type(
        inout: RemoveFilterFlag,
        queue_id: u8,
        ev_type: EventType,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_event_type(
                inout.into_glib(),
                queue_id,
                ev_type.into_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_note")]
    #[doc(alias = "new_with_note")]
    pub fn with_note(inout: RemoveFilterFlag, queue_id: u8) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret =
                ffi::alsaseq_remove_filter_new_with_note(inout.into_glib(), queue_id, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_note_channel")]
    #[doc(alias = "new_with_note_channel")]
    pub fn with_note_channel(
        inout: RemoveFilterFlag,
        queue_id: u8,
        channel: u8,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_note_channel(
                inout.into_glib(),
                queue_id,
                channel,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_real_time")]
    #[doc(alias = "new_with_real_time")]
    pub fn with_real_time(
        inout: RemoveFilterFlag,
        queue_id: u8,
        tv_sec: i32,
        tv_nsec: u32,
        after: bool,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_real_time(
                inout.into_glib(),
                queue_id,
                tv_sec,
                tv_nsec,
                after.into_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_tag")]
    #[doc(alias = "new_with_tag")]
    pub fn with_tag(
        inout: RemoveFilterFlag,
        queue_id: u8,
        tag: i8,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_tag(
                inout.into_glib(),
                queue_id,
                tag,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "alsaseq_remove_filter_new_with_tick_time")]
    #[doc(alias = "new_with_tick_time")]
    pub fn with_tick_time(
        inout: RemoveFilterFlag,
        queue_id: u8,
        tick_time: i32,
        after: bool,
    ) -> Result<RemoveFilter, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::alsaseq_remove_filter_new_with_tick_time(
                inout.into_glib(),
                queue_id,
                tick_time,
                after.into_glib(),
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

unsafe impl Send for RemoveFilter {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use Addr;
use EventType;
use RemoveFilterFlag;

glib_wrapper! {
    pub struct RemoveFilter(Object<alsaseq_sys::ALSASeqRemoveFilter, alsaseq_sys::ALSASeqRemoveFilterClass, RemoveFilterClass>);

    match fn {
        get_type => || alsaseq_sys::alsaseq_remove_filter_get_type(),
    }
}

impl RemoveFilter {
    pub fn new() -> RemoveFilter {
        unsafe { from_glib_full(alsaseq_sys::alsaseq_remove_filter_new()) }
    }
}

impl Default for RemoveFilter {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for RemoveFilter {}

pub const NONE_REMOVE_FILTER: Option<&RemoveFilter> = None;

pub trait RemoveFilterExt: 'static {
    fn get_tick_time(&self) -> u32;

    fn set_tick_time(&self, tick_time: u32);

    fn get_property_channel(&self) -> u8;

    fn set_property_channel(&self, channel: u8);

    fn get_property_destination(&self) -> Option<Addr>;

    fn set_property_destination(&self, destination: Option<&Addr>);

    fn get_property_event_type(&self) -> EventType;

    fn set_property_event_type(&self, event_type: EventType);

    fn get_property_flags(&self) -> RemoveFilterFlag;

    fn set_property_flags(&self, flags: RemoveFilterFlag);

    fn get_property_queue_id(&self) -> u8;

    fn set_property_queue_id(&self, queue_id: u8);

    fn connect_property_channel_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_destination_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_event_type_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn connect_property_flags_notify<F: Fn(&Self) + Send + 'static>(&self, f: F)
        -> SignalHandlerId;

    fn connect_property_queue_id_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<RemoveFilter>> RemoveFilterExt for O {
    fn get_tick_time(&self) -> u32 {
        unsafe {
            let mut tick_time = mem::MaybeUninit::uninit();
            alsaseq_sys::alsaseq_remove_filter_get_tick_time(
                self.as_ref().to_glib_none().0,
                tick_time.as_mut_ptr(),
            );
            let tick_time = tick_time.assume_init();
            tick_time
        }
    }

    fn set_tick_time(&self, tick_time: u32) {
        unsafe {
            alsaseq_sys::alsaseq_remove_filter_set_tick_time(
                self.as_ref().to_glib_none().0,
                tick_time,
            );
        }
    }

    fn get_property_channel(&self) -> u8 {
        unsafe {
            let mut value = Value::from_type(<u8 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"channel\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `channel` getter")
                .unwrap()
        }
    }

    fn set_property_channel(&self, channel: u8) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"channel\0".as_ptr() as *const _,
                Value::from(&channel).to_glib_none().0,
            );
        }
    }

    fn get_property_destination(&self) -> Option<Addr> {
        unsafe {
            let mut value = Value::from_type(<Addr as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"destination\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `destination` getter")
        }
    }

    fn set_property_destination(&self, destination: Option<&Addr>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"destination\0".as_ptr() as *const _,
                Value::from(destination).to_glib_none().0,
            );
        }
    }

    fn get_property_event_type(&self) -> EventType {
        unsafe {
            let mut value = Value::from_type(<EventType as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"event-type\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `event-type` getter")
                .unwrap()
        }
    }

    fn set_property_event_type(&self, event_type: EventType) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"event-type\0".as_ptr() as *const _,
                Value::from(&event_type).to_glib_none().0,
            );
        }
    }

    fn get_property_flags(&self) -> RemoveFilterFlag {
        unsafe {
            let mut value = Value::from_type(<RemoveFilterFlag as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"flags\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `flags` getter")
                .unwrap()
        }
    }

    fn set_property_flags(&self, flags: RemoveFilterFlag) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"flags\0".as_ptr() as *const _,
                Value::from(&flags).to_glib_none().0,
            );
        }
    }

    fn get_property_queue_id(&self) -> u8 {
        unsafe {
            let mut value = Value::from_type(<u8 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"queue-id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `queue-id` getter")
                .unwrap()
        }
    }

    fn set_property_queue_id(&self, queue_id: u8) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"queue-id\0".as_ptr() as *const _,
                Value::from(&queue_id).to_glib_none().0,
            );
        }
    }

    fn connect_property_channel_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_channel_trampoline<P, F: Fn(&P) + Send + 'static>(
            this: *mut alsaseq_sys::ALSASeqRemoveFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<RemoveFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::channel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_channel_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_destination_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_destination_trampoline<P, F: Fn(&P) + Send + 'static>(
            this: *mut alsaseq_sys::ALSASeqRemoveFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<RemoveFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::destination\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_destination_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_event_type_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_event_type_trampoline<P, F: Fn(&P) + Send + 'static>(
            this: *mut alsaseq_sys::ALSASeqRemoveFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<RemoveFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::event-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_event_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<P, F: Fn(&P) + Send + 'static>(
            this: *mut alsaseq_sys::ALSASeqRemoveFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<RemoveFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_queue_id_notify<F: Fn(&Self) + Send + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<P, F: Fn(&P) + Send + 'static>(
            this: *mut alsaseq_sys::ALSASeqRemoveFilter,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<RemoveFilter>,
        {
            let f: &F = &*(f as *const F);
            f(&RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for RemoveFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RemoveFilter")
    }
}

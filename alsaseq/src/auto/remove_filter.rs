// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Addr;
use crate::EventType;
use crate::RemoveFilterFlag;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ALSASeqRemoveFilter")]
    pub struct RemoveFilter(Object<ffi::ALSASeqRemoveFilter, ffi::ALSASeqRemoveFilterClass>);

    match fn {
        type_ => || ffi::alsaseq_remove_filter_get_type(),
    }
}

impl RemoveFilter {
    pub const NONE: Option<&'static RemoveFilter> = None;

    #[doc(alias = "alsaseq_remove_filter_new")]
    pub fn new() -> RemoveFilter {
        unsafe { from_glib_full(ffi::alsaseq_remove_filter_new()) }
    }
}

impl Default for RemoveFilter {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for RemoveFilter {}

pub trait RemoveFilterExt: 'static {
    #[doc(alias = "alsaseq_remove_filter_get_tick_time")]
    #[doc(alias = "get_tick_time")]
    fn tick_time(&self) -> u32;

    #[doc(alias = "alsaseq_remove_filter_set_tick_time")]
    fn set_tick_time(&self, tick_time: u32);

    fn channel(&self) -> u8;

    fn set_channel(&self, channel: u8);

    fn destination(&self) -> Option<Addr>;

    fn set_destination(&self, destination: Option<&Addr>);

    #[doc(alias = "event-type")]
    fn event_type(&self) -> EventType;

    #[doc(alias = "event-type")]
    fn set_event_type(&self, event_type: EventType);

    fn flags(&self) -> RemoveFilterFlag;

    fn set_flags(&self, flags: RemoveFilterFlag);

    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8;

    #[doc(alias = "queue-id")]
    fn set_queue_id(&self, queue_id: u8);

    #[doc(alias = "channel")]
    fn connect_channel_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "destination")]
    fn connect_destination_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "event-type")]
    fn connect_event_type_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "flags")]
    fn connect_flags_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<RemoveFilter>> RemoveFilterExt for O {
    fn tick_time(&self) -> u32 {
        unsafe {
            let mut tick_time = mem::MaybeUninit::uninit();
            ffi::alsaseq_remove_filter_get_tick_time(
                self.as_ref().to_glib_none().0,
                tick_time.as_mut_ptr(),
            );
            let tick_time = tick_time.assume_init();
            tick_time
        }
    }

    fn set_tick_time(&self, tick_time: u32) {
        unsafe {
            ffi::alsaseq_remove_filter_set_tick_time(self.as_ref().to_glib_none().0, tick_time);
        }
    }

    fn channel(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "channel")
    }

    fn set_channel(&self, channel: u8) {
        glib::ObjectExt::set_property(self.as_ref(), "channel", &channel)
    }

    fn destination(&self) -> Option<Addr> {
        glib::ObjectExt::property(self.as_ref(), "destination")
    }

    fn set_destination(&self, destination: Option<&Addr>) {
        glib::ObjectExt::set_property(self.as_ref(), "destination", &destination)
    }

    fn event_type(&self) -> EventType {
        glib::ObjectExt::property(self.as_ref(), "event-type")
    }

    fn set_event_type(&self, event_type: EventType) {
        glib::ObjectExt::set_property(self.as_ref(), "event-type", &event_type)
    }

    fn flags(&self) -> RemoveFilterFlag {
        glib::ObjectExt::property(self.as_ref(), "flags")
    }

    fn set_flags(&self, flags: RemoveFilterFlag) {
        glib::ObjectExt::set_property(self.as_ref(), "flags", &flags)
    }

    fn queue_id(&self) -> u8 {
        glib::ObjectExt::property(self.as_ref(), "queue-id")
    }

    fn set_queue_id(&self, queue_id: u8) {
        glib::ObjectExt::set_property(self.as_ref(), "queue-id", &queue_id)
    }

    fn connect_channel_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_channel_trampoline<
            P: IsA<RemoveFilter>,
            F: Fn(&P) + Send + 'static,
        >(
            this: *mut ffi::ALSASeqRemoveFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::channel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_channel_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_destination_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_destination_trampoline<
            P: IsA<RemoveFilter>,
            F: Fn(&P) + Send + 'static,
        >(
            this: *mut ffi::ALSASeqRemoveFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::destination\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_destination_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_event_type_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_event_type_trampoline<
            P: IsA<RemoveFilter>,
            F: Fn(&P) + Send + 'static,
        >(
            this: *mut ffi::ALSASeqRemoveFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::event-type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_event_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_flags_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<
            P: IsA<RemoveFilter>,
            F: Fn(&P) + Send + 'static,
        >(
            this: *mut ffi::ALSASeqRemoveFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::flags\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_flags_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_queue_id_notify<F: Fn(&Self) + Send + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<
            P: IsA<RemoveFilter>,
            F: Fn(&P) + Send + 'static,
        >(
            this: *mut ffi::ALSASeqRemoveFilter,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(RemoveFilter::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for RemoveFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("RemoveFilter")
    }
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, Addr, EventTstampMode, PortAttrFlag, PortCapFlag};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    /// A GObject-derived object to express information of port.
    ///
    /// A [`PortInfo`][crate::PortInfo] is a GObject-derived object to express information of port. The call of
    /// [`port_info()`][crate::port_info()] returns the instance of object. The call of [`UserClientExtManual::create_port()`][crate::prelude::UserClientExtManual::create_port()]
    /// and [`UserClientExt::update_port()`][crate::prelude::UserClientExt::update_port()] requires the instance of object.
    ///
    /// The object wraps `struct snd_port_info` in UAPI of Linux sound subsystem.
    ///
    /// ## Properties
    ///
    ///
    /// #### `addr`
    ///  The address of port.
    ///
    /// Readable | Writeable | Construct Only
    ///
    ///
    /// #### `attrs`
    ///  The attributes of port, a set of [`PortAttrFlag`][crate::PortAttrFlag].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `caps`
    ///  The capabilities of port, a set of [`PortCapFlag`][crate::PortCapFlag].
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `midi-channels`
    ///  The number of channels per MIDI port.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `midi-voices`
    ///  The number of voices per MIDI port.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `name`
    ///  The name of port.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `queue-id`
    ///  The numeric ID of queue to update time stamp when [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// set to True. One of [`SpecificQueueId`][crate::SpecificQueueId] is available as well.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `read-users`
    ///  The current number of subscribers to read.
    ///
    /// Readable
    ///
    ///
    /// #### `synth-voices`
    ///  The number of voices per synth port.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `tstamp-mode`
    ///  The mode of time stamp. This is effective when the [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// enabled.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `tstamp-overwrite`
    ///  The mode whether to overwrite time stamp for event when the event is delivered from the port.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `write-users`
    ///  The current number of subscribers to write.
    ///
    /// Readable
    ///
    /// # Implements
    ///
    /// [`PortInfoExt`][trait@crate::prelude::PortInfoExt]
    #[doc(alias = "ALSASeqPortInfo")]
    pub struct PortInfo(Object<ffi::ALSASeqPortInfo, ffi::ALSASeqPortInfoClass>);

    match fn {
        type_ => || ffi::alsaseq_port_info_get_type(),
    }
}

impl PortInfo {
    pub const NONE: Option<&'static PortInfo> = None;

    /// Allocate and return an instance of [`PortInfo`][crate::PortInfo].
    ///
    /// # Returns
    ///
    /// An instance of [`PortInfo`][crate::PortInfo].
    #[doc(alias = "alsaseq_port_info_new")]
    pub fn new() -> PortInfo {
        unsafe { from_glib_full(ffi::alsaseq_port_info_new()) }
    }
}

impl Default for PortInfo {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::PortInfo>> Sealed for T {}
}

/// Trait containing all [`struct@PortInfo`] methods.
///
/// # Implementors
///
/// [`PortInfo`][struct@crate::PortInfo]
pub trait PortInfoExt: IsA<PortInfo> + sealed::Sealed + 'static {
    /// The address of port.
    fn addr(&self) -> Option<Addr> {
        ObjectExt::property(self.as_ref(), "addr")
    }

    /// The attributes of port, a set of [`PortAttrFlag`][crate::PortAttrFlag].
    fn attrs(&self) -> PortAttrFlag {
        ObjectExt::property(self.as_ref(), "attrs")
    }

    /// The attributes of port, a set of [`PortAttrFlag`][crate::PortAttrFlag].
    fn set_attrs(&self, attrs: PortAttrFlag) {
        ObjectExt::set_property(self.as_ref(), "attrs", attrs)
    }

    /// The capabilities of port, a set of [`PortCapFlag`][crate::PortCapFlag].
    fn caps(&self) -> PortCapFlag {
        ObjectExt::property(self.as_ref(), "caps")
    }

    /// The capabilities of port, a set of [`PortCapFlag`][crate::PortCapFlag].
    fn set_caps(&self, caps: PortCapFlag) {
        ObjectExt::set_property(self.as_ref(), "caps", caps)
    }

    /// The number of channels per MIDI port.
    #[doc(alias = "midi-channels")]
    fn midi_channels(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "midi-channels")
    }

    /// The number of channels per MIDI port.
    #[doc(alias = "midi-channels")]
    fn set_midi_channels(&self, midi_channels: i32) {
        ObjectExt::set_property(self.as_ref(), "midi-channels", midi_channels)
    }

    /// The number of voices per MIDI port.
    #[doc(alias = "midi-voices")]
    fn midi_voices(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "midi-voices")
    }

    /// The number of voices per MIDI port.
    #[doc(alias = "midi-voices")]
    fn set_midi_voices(&self, midi_voices: i32) {
        ObjectExt::set_property(self.as_ref(), "midi-voices", midi_voices)
    }

    /// The name of port.
    fn name(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "name")
    }

    /// The name of port.
    fn set_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(), "name", name)
    }

    /// The numeric ID of queue to update time stamp when [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// set to True. One of [`SpecificQueueId`][crate::SpecificQueueId] is available as well.
    #[doc(alias = "queue-id")]
    fn queue_id(&self) -> u8 {
        ObjectExt::property(self.as_ref(), "queue-id")
    }

    /// The numeric ID of queue to update time stamp when [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// set to True. One of [`SpecificQueueId`][crate::SpecificQueueId] is available as well.
    #[doc(alias = "queue-id")]
    fn set_queue_id(&self, queue_id: u8) {
        ObjectExt::set_property(self.as_ref(), "queue-id", queue_id)
    }

    /// The current number of subscribers to read.
    #[doc(alias = "read-users")]
    fn read_users(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "read-users")
    }

    /// The number of voices per synth port.
    #[doc(alias = "synth-voices")]
    fn synth_voices(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "synth-voices")
    }

    /// The number of voices per synth port.
    #[doc(alias = "synth-voices")]
    fn set_synth_voices(&self, synth_voices: i32) {
        ObjectExt::set_property(self.as_ref(), "synth-voices", synth_voices)
    }

    /// The mode of time stamp. This is effective when the [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// enabled.
    #[doc(alias = "tstamp-mode")]
    fn tstamp_mode(&self) -> EventTstampMode {
        ObjectExt::property(self.as_ref(), "tstamp-mode")
    }

    /// The mode of time stamp. This is effective when the [`tstamp-overwrite`][struct@crate::PortInfo#tstamp-overwrite] is
    /// enabled.
    #[doc(alias = "tstamp-mode")]
    fn set_tstamp_mode(&self, tstamp_mode: EventTstampMode) {
        ObjectExt::set_property(self.as_ref(), "tstamp-mode", tstamp_mode)
    }

    /// The mode whether to overwrite time stamp for event when the event is delivered from the port.
    #[doc(alias = "tstamp-overwrite")]
    fn is_tstamp_overwrite(&self) -> bool {
        ObjectExt::property(self.as_ref(), "tstamp-overwrite")
    }

    /// The mode whether to overwrite time stamp for event when the event is delivered from the port.
    #[doc(alias = "tstamp-overwrite")]
    fn set_tstamp_overwrite(&self, tstamp_overwrite: bool) {
        ObjectExt::set_property(self.as_ref(), "tstamp-overwrite", tstamp_overwrite)
    }

    /// The current number of subscribers to write.
    #[doc(alias = "write-users")]
    fn write_users(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "write-users")
    }

    #[doc(alias = "attrs")]
    fn connect_attrs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attrs_trampoline<P: IsA<PortInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::attrs\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_attrs_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "caps")]
    fn connect_caps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_caps_trampoline<P: IsA<PortInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::caps\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_caps_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "midi-channels")]
    fn connect_midi_channels_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_midi_channels_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::midi-channels\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_midi_channels_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "midi-voices")]
    fn connect_midi_voices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_midi_voices_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::midi-voices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_midi_voices_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<PortInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_name_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "queue-id")]
    fn connect_queue_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_id_trampoline<P: IsA<PortInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::queue-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_queue_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "read-users")]
    fn connect_read_users_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_users_trampoline<P: IsA<PortInfo>, F: Fn(&P) + 'static>(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::read-users\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_read_users_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "synth-voices")]
    fn connect_synth_voices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_synth_voices_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::synth-voices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_synth_voices_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "tstamp-mode")]
    fn connect_tstamp_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tstamp_mode_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tstamp-mode\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_tstamp_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "tstamp-overwrite")]
    fn connect_tstamp_overwrite_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tstamp_overwrite_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::tstamp-overwrite\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_tstamp_overwrite_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "write-users")]
    fn connect_write_users_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_write_users_trampoline<
            P: IsA<PortInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqPortInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(PortInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::write-users\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_write_users_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<PortInfo>> PortInfoExt for O {}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// A GObject-derived object to express information of ALSA Sequencer.
    ///
    /// A [`SystemInfo`][crate::SystemInfo] is a GObject-derived object to express information of ALSA Sequencer. The
    /// call of [`system_info()`][crate::system_info()] returns the instance of object.
    ///
    /// The object wraps `struct snd_seq_system_info` in UAPI of Linux sound subsystem.
    ///
    /// ## Properties
    ///
    ///
    /// #### `current-client-count`
    ///  The current number of clients.
    ///
    /// Readable
    ///
    ///
    /// #### `current-queue-count`
    ///  The current number of queues.
    ///
    /// Readable
    ///
    ///
    /// #### `maximum-channel-count`
    ///  The maximum number of channels.
    ///
    /// Readable
    ///
    ///
    /// #### `maximum-client-count`
    ///  The maximum number of clients.
    ///
    /// Readable
    ///
    ///
    /// #### `maximum-port-count`
    ///  The maximum number of ports.
    ///
    /// Readable
    ///
    ///
    /// #### `maximum-queue-count`
    ///  The maximum number of available queues.
    ///
    /// Readable
    ///
    /// # Implements
    ///
    /// [`SystemInfoExt`][trait@crate::prelude::SystemInfoExt]
    #[doc(alias = "ALSASeqSystemInfo")]
    pub struct SystemInfo(Object<ffi::ALSASeqSystemInfo, ffi::ALSASeqSystemInfoClass>);

    match fn {
        type_ => || ffi::alsaseq_system_info_get_type(),
    }
}

impl SystemInfo {
    pub const NONE: Option<&'static SystemInfo> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::SystemInfo>> Sealed for T {}
}

/// Trait containing all [`struct@SystemInfo`] methods.
///
/// # Implementors
///
/// [`SystemInfo`][struct@crate::SystemInfo]
pub trait SystemInfoExt: IsA<SystemInfo> + sealed::Sealed + 'static {
    /// The current number of clients.
    #[doc(alias = "current-client-count")]
    fn current_client_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "current-client-count")
    }

    /// The current number of queues.
    #[doc(alias = "current-queue-count")]
    fn current_queue_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "current-queue-count")
    }

    /// The maximum number of channels.
    #[doc(alias = "maximum-channel-count")]
    fn maximum_channel_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "maximum-channel-count")
    }

    /// The maximum number of clients.
    #[doc(alias = "maximum-client-count")]
    fn maximum_client_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "maximum-client-count")
    }

    /// The maximum number of ports.
    #[doc(alias = "maximum-port-count")]
    fn maximum_port_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "maximum-port-count")
    }

    /// The maximum number of available queues.
    #[doc(alias = "maximum-queue-count")]
    fn maximum_queue_count(&self) -> i32 {
        ObjectExt::property(self.as_ref(), "maximum-queue-count")
    }

    #[doc(alias = "current-client-count")]
    fn connect_current_client_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_client_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-client-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_client_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "current-queue-count")]
    fn connect_current_queue_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_queue_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::current-queue-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_current_queue_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "maximum-channel-count")]
    fn connect_maximum_channel_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_maximum_channel_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::maximum-channel-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_maximum_channel_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "maximum-client-count")]
    fn connect_maximum_client_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maximum_client_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::maximum-client-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_maximum_client_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "maximum-port-count")]
    fn connect_maximum_port_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maximum_port_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::maximum-port-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_maximum_port_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "maximum-queue-count")]
    fn connect_maximum_queue_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maximum_queue_count_trampoline<
            P: IsA<SystemInfo>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqSystemInfo,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SystemInfo::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::maximum-queue-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_maximum_queue_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<SystemInfo>> SystemInfoExt for O {}

impl fmt::Display for SystemInfo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SystemInfo")
    }
}

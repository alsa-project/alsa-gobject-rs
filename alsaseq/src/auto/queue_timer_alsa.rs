// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use alsaseq_sys;
use alsatimer;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use QueueTimerCommon;

glib_wrapper! {
    pub struct QueueTimerAlsa(Object<alsaseq_sys::ALSASeqQueueTimerAlsa, alsaseq_sys::ALSASeqQueueTimerAlsaClass, QueueTimerAlsaClass>) @implements QueueTimerCommon;

    match fn {
        get_type => || alsaseq_sys::alsaseq_queue_timer_alsa_get_type(),
    }
}

impl QueueTimerAlsa {
    pub fn new() -> QueueTimerAlsa {
        unsafe { from_glib_full(alsaseq_sys::alsaseq_queue_timer_alsa_new()) }
    }
}

impl Default for QueueTimerAlsa {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_QUEUE_TIMER_ALSA: Option<&QueueTimerAlsa> = None;

pub trait QueueTimerAlsaExt: 'static {
    fn get_property_device_id(&self) -> Option<alsatimer::DeviceId>;

    fn set_property_device_id(&self, device_id: Option<&alsatimer::DeviceId>);

    fn get_property_resolution_ticks(&self) -> u32;

    fn set_property_resolution_ticks(&self, resolution_ticks: u32);

    fn connect_property_device_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_resolution_ticks_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<QueueTimerAlsa>> QueueTimerAlsaExt for O {
    fn get_property_device_id(&self) -> Option<alsatimer::DeviceId> {
        unsafe {
            let mut value = Value::from_type(<alsatimer::DeviceId as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"device-id\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `device-id` getter")
        }
    }

    fn set_property_device_id(&self, device_id: Option<&alsatimer::DeviceId>) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"device-id\0".as_ptr() as *const _,
                Value::from(device_id).to_glib_none().0,
            );
        }
    }

    fn get_property_resolution_ticks(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"resolution-ticks\0".as_ptr() as *const _,
                value.to_glib_none_mut().0,
            );
            value
                .get()
                .expect("Return Value for property `resolution-ticks` getter")
                .unwrap()
        }
    }

    fn set_property_resolution_ticks(&self, resolution_ticks: u32) {
        unsafe {
            gobject_sys::g_object_set_property(
                self.to_glib_none().0 as *mut gobject_sys::GObject,
                b"resolution-ticks\0".as_ptr() as *const _,
                Value::from(&resolution_ticks).to_glib_none().0,
            );
        }
    }

    fn connect_property_device_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_id_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqQueueTimerAlsa,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<QueueTimerAlsa>,
        {
            let f: &F = &*(f as *const F);
            f(&QueueTimerAlsa::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::device-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_device_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_resolution_ticks_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_resolution_ticks_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut alsaseq_sys::ALSASeqQueueTimerAlsa,
            _param_spec: glib_sys::gpointer,
            f: glib_sys::gpointer,
        ) where
            P: IsA<QueueTimerAlsa>,
        {
            let f: &F = &*(f as *const F);
            f(&QueueTimerAlsa::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::resolution-ticks\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_resolution_ticks_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for QueueTimerAlsa {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "QueueTimerAlsa")
    }
}

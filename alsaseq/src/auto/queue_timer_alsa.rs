// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::QueueTimerCommon;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    /// An object to express queue timer specific to instance in ALSA Timer.
    ///
    /// A `GObject::Object` derived object class for queue timer specific to any instance in ALSA
    /// Timer.
    ///
    /// ## Properties
    ///
    ///
    /// #### `device-id`
    ///  The identifier of associated timer instance in ALSA Timer.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `resolution-ticks`
    ///  The number of ticks as resolution of timer.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>QueueTimerCommon</h4></summary>
    ///
    ///
    /// #### `queue-id`
    ///  The numeric identifier of queue. An entry of [`SpecificClientId`][crate::SpecificClientId] is available as well.
    ///
    /// Readable
    ///
    ///
    /// #### `timer-type`
    ///  The type of timer for the queue, one of [`QueueTimerType`][crate::QueueTimerType].
    ///
    /// Readable
    /// </details>
    ///
    /// # Implements
    ///
    /// [`QueueTimerAlsaExt`][trait@crate::prelude::QueueTimerAlsaExt], [`QueueTimerCommonExt`][trait@crate::prelude::QueueTimerCommonExt]
    #[doc(alias = "ALSASeqQueueTimerAlsa")]
    pub struct QueueTimerAlsa(Object<ffi::ALSASeqQueueTimerAlsa, ffi::ALSASeqQueueTimerAlsaClass>) @implements QueueTimerCommon;

    match fn {
        type_ => || ffi::alsaseq_queue_timer_alsa_get_type(),
    }
}

impl QueueTimerAlsa {
    pub const NONE: Option<&'static QueueTimerAlsa> = None;

    /// Allocate and return an instance of [`QueueTimerAlsa`][crate::QueueTimerAlsa].
    ///
    /// # Returns
    ///
    /// An instance of [`QueueTimerAlsa`][crate::QueueTimerAlsa].
    #[doc(alias = "alsaseq_queue_timer_alsa_new")]
    pub fn new() -> QueueTimerAlsa {
        unsafe { from_glib_full(ffi::alsaseq_queue_timer_alsa_new()) }
    }
}

impl Default for QueueTimerAlsa {
    fn default() -> Self {
        Self::new()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::QueueTimerAlsa>> Sealed for T {}
}

/// Trait containing all [`struct@QueueTimerAlsa`] methods.
///
/// # Implementors
///
/// [`QueueTimerAlsa`][struct@crate::QueueTimerAlsa]
pub trait QueueTimerAlsaExt: IsA<QueueTimerAlsa> + sealed::Sealed + 'static {
    /// The identifier of associated timer instance in ALSA Timer.
    #[doc(alias = "device-id")]
    fn device_id(&self) -> Option<alsatimer::DeviceId> {
        ObjectExt::property(self.as_ref(), "device-id")
    }

    /// The identifier of associated timer instance in ALSA Timer.
    #[doc(alias = "device-id")]
    fn set_device_id(&self, device_id: Option<&alsatimer::DeviceId>) {
        ObjectExt::set_property(self.as_ref(), "device-id", device_id)
    }

    /// The number of ticks as resolution of timer.
    #[doc(alias = "resolution-ticks")]
    fn resolution_ticks(&self) -> u32 {
        ObjectExt::property(self.as_ref(), "resolution-ticks")
    }

    /// The number of ticks as resolution of timer.
    #[doc(alias = "resolution-ticks")]
    fn set_resolution_ticks(&self, resolution_ticks: u32) {
        ObjectExt::set_property(self.as_ref(), "resolution-ticks", resolution_ticks)
    }

    #[doc(alias = "device-id")]
    fn connect_device_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_id_trampoline<
            P: IsA<QueueTimerAlsa>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueTimerAlsa,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueTimerAlsa::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::device-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_device_id_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "resolution-ticks")]
    fn connect_resolution_ticks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_resolution_ticks_trampoline<
            P: IsA<QueueTimerAlsa>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::ALSASeqQueueTimerAlsa,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(QueueTimerAlsa::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::resolution-ticks\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_resolution_ticks_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<QueueTimerAlsa>> QueueTimerAlsaExt for O {}

impl fmt::Display for QueueTimerAlsa {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("QueueTimerAlsa")
    }
}

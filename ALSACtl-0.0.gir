<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="alsactl"/>
  <c:include name="alsactl.h"/>
  <namespace name="ALSACtl"
             version="0.0"
             shared-library="libalsactl.so.0"
             c:identifier-prefixes="ALSACtl"
             c:symbol-prefixes="alsactl_">
    <class name="Card"
           c:symbol-prefix="card"
           c:type="ALSACtlCard"
           parent="GObject.Object"
           glib:type-name="ALSACtlCard"
           glib:get-type="alsactl_card_get_type"
           glib:type-struct="CardClass">
      <doc xml:space="preserve"
           filename="../src/ctl/card.c"
           line="14">An GObject-derived object to express sound card.
A [class@Card] is a GObject-derived object to express sound card. Applications use the
instance of object to manipulate functionalities on sound card. After the call of
[method@Card.open] for the numeric ID of sound card, the object maintains file descriptor till
object destruction.</doc>
      <source-position filename="../src/ctl/card.h" line="38"/>
      <constructor name="new" c:identifier="alsactl_card_new">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="187">Allocate and return an instance of [class@Card].</doc>
        <source-position filename="../src/ctl/card.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="192">An instance of [class@Card].</doc>
          <type name="Card" c:type="ALSACtlCard*"/>
        </return-value>
      </constructor>
      <virtual-method name="handle_disconnection">
        <doc xml:space="preserve"
             filename="../src/ctl/card.h"
             line="31">Class closure for the [signal@Card::handle-disconnection] signal.</doc>
        <source-position filename="../src/ctl/card.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.h"
                 line="33">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_elem_event">
        <doc xml:space="preserve"
             filename="../src/ctl/card.h"
             line="20">Class closure for the [signal@Card::handle-elem-event] signal.</doc>
        <source-position filename="../src/ctl/card.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.h"
                 line="22">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.h"
                 line="23">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.h"
                 line="24">A set of [flags@ElemEventMask].</doc>
            <type name="ElemEventMask" c:type="ALSACtlElemEventMask"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_elems"
              c:identifier="alsactl_card_add_elems"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="936">Add the user-defined elements and return the list of their identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_ADD` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="950">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="938">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="939">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="elem_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="940">The number of elements going to be added.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="elem_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="941">An instance of object which implements [iface@ElemInfoCommon].</doc>
            <type name="ElemInfoCommon" c:type="ALSACtlElemInfoCommon*"/>
          </parameter>
          <parameter name="entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="942">The list of added element identifiers.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="ElemId"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="command_elem_tlv"
              c:identifier="alsactl_card_command_elem_tlv"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="723">Command the given array of bytes as Type/Length/Value data for element pointed by the identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_TLV_COMMAND` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="737">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="725">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="726">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="container"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="727">The array with qudalets for Type-Length-Value
            data.</doc>
            <array length="2" zero-terminated="0" c:type="guint32* const*">
              <type name="guint32" c:type="guint32*"/>
            </array>
          </parameter>
          <parameter name="container_count"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="729">The number of quadlets in the container.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="alsactl_card_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="1214">Allocate [struct@GLib.Source] structure to handle events from ALSA control character device. In
each iteration of [struct@GLib.MainContext], the `read(2)` system call is executed to dispatch
control event for [signal@Card::handle-elem-event] signal, according to the result of `poll(2)`
system call.</doc>
        <source-position filename="../src/ctl/card.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="1225">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1216">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1217">A [struct@GLib.Source] to handle events from ALSA control character device.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_elem_id_list"
              c:identifier="alsactl_card_get_elem_id_list"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="389">Generate a list of [struct@ElemId] for ALSA control character device associated to the sound
card.

The call of function executes several `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_LIST`
command for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="401">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="391">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="392">The list of entries for [struct@ElemId].</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="ElemId"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_elem_info"
              c:identifier="alsactl_card_get_elem_info"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="509">Get information of element corresponding to given id.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_INFO` command
for ALSA control character device. For enumerated element, it executes the system call for
several times to retrieve all of enumeration labels.</doc>
        <source-position filename="../src/ctl/card.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="522">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="511">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="512">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="elem_info"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="513">An instance of object which implements [iface@ElemInfoCommon].</doc>
            <type name="ElemInfoCommon" c:type="ALSACtlElemInfoCommon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="alsactl_card_get_info" throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="295">Get the information of sound card.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_CARD_INFO` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="306">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="297">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="card_info"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="298">A [class@Card]Info for the sound card.</doc>
            <type name="CardInfo" c:type="ALSACtlCardInfo**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_protocol_version"
              c:identifier="alsactl_card_get_protocol_version"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="265">Get the version of control protocol currently used. The version is expressed as the array with
three elements; major, minor, and micro version in the order. The length of major version is
16 bit, the length of minor and micro version is 8 bit each.</doc>
        <source-position filename="../src/ctl/card.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="276">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="267">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="proto_ver_triplet"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="268">The version of protocol currently
                    used.</doc>
            <array zero-terminated="0" c:type="const guint16**" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="lock_elem"
              c:identifier="alsactl_card_lock_elem"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="429">Lock/Unlock indicated element not to be written by the other processes.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_LOCK` and
`SNDRV_CTL_IOCTL_ELEM_UNLOCK` commands for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="441">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="431">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="432">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="lock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="433">whether to lock or unlock the element.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="alsactl_card_open" throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="199">Open ALSA control character device for the sound card.

The call of function executes `open(2)` system call for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="211">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="201">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="card_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="202">The numeric ID of sound card.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="open_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="203">The flag of `open(2)` system call. O_RDONLY is forced to fulfil internally.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_elem_tlv"
              c:identifier="alsactl_card_read_elem_tlv"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="665">Read Type/Length/Value data from element pointed by the identifier and fulfil the given array of
bytes with the data.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_TLV_READ` command for
ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="680">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="667">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="668">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="container"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="669">The array with qudalets for Type-Length-Value
            data.</doc>
            <array length="2" zero-terminated="0" c:type="guint32* const*">
              <type name="guint32" c:type="guint32*"/>
            </array>
          </parameter>
          <parameter name="container_count"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="671">The number of quadlets in the container.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_elem_value"
              c:identifier="alsactl_card_read_elem_value"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="1084">Read given value from element indicated by the given identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_READ` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="1096">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1086">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1087">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="elem_value"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1088">A derivative of #ALSACtlElemValue.</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_elems"
              c:identifier="alsactl_card_remove_elems"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="1001">Remove user-defined elements pointed by the identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_REMOVE` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="1012">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1003">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1004">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_elems"
              c:identifier="alsactl_card_replace_elems"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="968">Add user-defined elements to replace the existent ones.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_REPLACE` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="982">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="970">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="971">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="elem_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="972">The number of elements going to be added.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="elem_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="973">An instance of object which implements [iface@ElemInfoCommon].</doc>
            <type name="ElemInfoCommon" c:type="ALSACtlElemInfoCommon*"/>
          </parameter>
          <parameter name="entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="974">The list of renewed element identifiers.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="ElemId"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="write_elem_tlv"
              c:identifier="alsactl_card_write_elem_tlv"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="609">Write the given array of bytes as Type/Length/Value data for element pointed by the identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_TLV_WRITE` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="622">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="611">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="612">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="container" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="613">The array with qudalets for Type-Length-Value data.</doc>
            <array length="2" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="container_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="614">The number of quadlets in the container.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_elem_value"
              c:identifier="alsactl_card_write_elem_value"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="1039">Write given value to element indicated by the given identifier.

The call of function executes `ioctl(2)` system call with `SNDRV_CTL_IOCTL_ELEM_WRITE` command
for ALSA control character device.</doc>
        <source-position filename="../src/ctl/card.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="1051">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1041">A [class@Card].</doc>
            <type name="Card" c:type="ALSACtlCard*"/>
          </instance-parameter>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1042">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
          <parameter name="elem_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="1043">A derivative of #ALSACtlElemValue.</doc>
            <type name="ElemValue" c:type="const ALSACtlElemValue*"/>
          </parameter>
        </parameters>
      </method>
      <property name="devnode" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="119">The full path to special file of control character device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subscribed" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="130">Whether to be subscribed for event.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="handle-disconnection" when="last">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="162">Emitted when the sound card is not available anymore due to unbinding driver or hot
unplugging. The owner of this object should call [method@GObject.Object.unref] as quickly
as possible to be going to release ALSA control character device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-elem-event" when="last">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="144">Emitted when event occurs for any element.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="elem_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="147">A [struct@ElemId].</doc>
            <type name="ElemId"/>
          </parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/card.c"
                 line="148">A set of [flags@ElemEventMask].</doc>
            <type name="ElemEventMask"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CardClass"
            c:type="ALSACtlCardClass"
            glib:is-gtype-struct-for="Card">
      <source-position filename="../src/ctl/card.h" line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="handle_elem_event">
        <callback name="handle_elem_event">
          <source-position filename="../src/ctl/card.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/ctl/card.h"
                   line="22">A [class@Card].</doc>
              <type name="Card" c:type="ALSACtlCard*"/>
            </parameter>
            <parameter name="elem_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/ctl/card.h"
                   line="23">A [struct@ElemId].</doc>
              <type name="ElemId" c:type="const ALSACtlElemId*"/>
            </parameter>
            <parameter name="events" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/ctl/card.h"
                   line="24">A set of [flags@ElemEventMask].</doc>
              <type name="ElemEventMask" c:type="ALSACtlElemEventMask"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnection">
        <callback name="handle_disconnection">
          <source-position filename="../src/ctl/card.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/ctl/card.h"
                   line="33">A [class@Card].</doc>
              <type name="Card" c:type="ALSACtlCard*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="CardError"
                 glib:type-name="ALSACtlCardError"
                 glib:get-type="alsactl_card_error_get_type"
                 c:type="ALSACtlCardError"
                 glib:error-domain="alsactl-card-error-quark">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="112">A set of error code for [struct@GLib.Error] with `ALSACtl.CardError` domain.</doc>
      <member name="failed"
              value="0"
              c:identifier="ALSACTL_CARD_ERROR_FAILED"
              glib:nick="failed"
              glib:name="ALSACTL_CARD_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="114">The system call failed.</doc>
      </member>
      <member name="disconnected"
              value="1"
              c:identifier="ALSACTL_CARD_ERROR_DISCONNECTED"
              glib:nick="disconnected"
              glib:name="ALSACTL_CARD_ERROR_DISCONNECTED">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="115">The card associated to the instance is in disconnect state.</doc>
      </member>
      <member name="elem_not_found"
              value="2"
              c:identifier="ALSACTL_CARD_ERROR_ELEM_NOT_FOUND"
              glib:nick="elem-not-found"
              glib:name="ALSACTL_CARD_ERROR_ELEM_NOT_FOUND">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="116">The control element not found in the card.</doc>
      </member>
      <member name="elem_not_supported"
              value="3"
              c:identifier="ALSACTL_CARD_ERROR_ELEM_NOT_SUPPORTED"
              glib:nick="elem-not-supported"
              glib:name="ALSACTL_CARD_ERROR_ELEM_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="117">The operation is not supported by the control element.</doc>
      </member>
      <member name="elem_owned"
              value="4"
              c:identifier="ALSACTL_CARD_ERROR_ELEM_OWNED"
              glib:nick="elem-owned"
              glib:name="ALSACTL_CARD_ERROR_ELEM_OWNED">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="118">The control element is owned by the other process.</doc>
      </member>
      <member name="elem_exist"
              value="5"
              c:identifier="ALSACTL_CARD_ERROR_ELEM_EXIST"
              glib:nick="elem-exist"
              glib:name="ALSACTL_CARD_ERROR_ELEM_EXIST">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="119">The control element already exists.</doc>
      </member>
      <function name="quark" c:identifier="alsactl_card_error_quark">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="31">Return the [alias@GLib.Quark] for [struct@GLib.Error] with code in [enum@CardError] enumerations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/card.c"
               line="36">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="CardInfo"
           c:symbol-prefix="card_info"
           c:type="ALSACtlCardInfo"
           parent="GObject.Object"
           glib:type-name="ALSACtlCardInfo"
           glib:get-type="alsactl_card_info_get_type"
           glib:type-struct="CardInfoClass">
      <doc xml:space="preserve"
           filename="../src/ctl/card-info.c"
           line="4">A GObject-derived object to express information of sound card.
A [class@CardInfo] is information of sound card. The call of [method@Card.get_info] returns an
instance of the object.

The object wraps `struct snd_ctl_card_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/card-info.h" line="15"/>
      <property name="card-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="70">The numeric ID of sound card.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="components" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="137">The The string with space-separated components for the sound card.,</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="driver" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="93">The name of driver bound to the sound card.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="82">The string ID of sound card.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="long-name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="115">The long name of sound card.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mixer-name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="126">The name of mixer for the sound card.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card-info.c"
             line="104">The name of sound card.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="CardInfoClass"
            c:type="ALSACtlCardInfoClass"
            glib:is-gtype-struct-for="CardInfo">
      <source-position filename="../src/ctl/card-info.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="ElemAccessFlag"
              glib:type-name="ALSACtlElemAccessFlag"
              glib:get-type="alsactl_elem_access_flag_get_type"
              c:type="ALSACtlElemAccessFlag">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="51">A set of flags for access information of the element.</doc>
      <member name="read"
              value="1"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_READ"
              glib:nick="read"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_READ">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="53">The element supports operation to get its values.</doc>
      </member>
      <member name="write"
              value="2"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_WRITE"
              glib:nick="write"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_WRITE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="54">The element supports operation to change its values.</doc>
      </member>
      <member name="volatile"
              value="4"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_VOLATILE"
              glib:nick="volatile"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_VOLATILE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="55">The state of element is mutable independent of operating system.</doc>
      </member>
      <member name="tlv_read"
              value="16"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_TLV_READ"
              glib:nick="tlv-read"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_TLV_READ">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="56">The element supports operation to get Type-Length-Value data.</doc>
      </member>
      <member name="tlv_write"
              value="32"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_TLV_WRITE"
              glib:nick="tlv-write"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_TLV_WRITE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="57">The element supports operation to change Type-Length-Value data.</doc>
      </member>
      <member name="tlv_command"
              value="64"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_TLV_COMMAND"
              glib:nick="tlv-command"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_TLV_COMMAND">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="58">The element supports operation to use Type-Length-Value data as any command.</doc>
      </member>
      <member name="inactive"
              value="256"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_INACTIVE"
              glib:nick="inactive"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_INACTIVE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="59">The element is not activated yet.</doc>
      </member>
      <member name="lock"
              value="512"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_LOCK"
              glib:nick="lock"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_LOCK">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="60">The element is under locked state from any write operation.</doc>
      </member>
      <member name="owner"
              value="1024"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_OWNER"
              glib:nick="owner"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_OWNER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="61">The element is owned by the process.</doc>
      </member>
      <member name="tlv_callback"
              value="268435456"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_TLV_CALLBACK"
              glib:nick="tlv-callback"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_TLV_CALLBACK">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="62">The element supports specific operation to process Type-Length-Value data.</doc>
      </member>
      <member name="user"
              value="536870912"
              c:identifier="ALSACTL_ELEM_ACCESS_FLAG_USER"
              glib:nick="user"
              glib:name="ALSACTL_ELEM_ACCESS_FLAG_USER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="63">The element is maintained by any user application, instead of kernel driver.</doc>
      </member>
    </bitfield>
    <bitfield name="ElemEventMask"
              glib:type-name="ALSACtlElemEventMask"
              glib:get-type="alsactl_elem_event_mask_get_type"
              c:type="ALSACtlElemEventMask">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="93">A set of flags for the content of event for the element.</doc>
      <member name="value"
              value="1"
              c:identifier="ALSACTL_ELEM_EVENT_MASK_VALUE"
              glib:nick="value"
              glib:name="ALSACTL_ELEM_EVENT_MASK_VALUE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="95">The event notifies any change of value for the element.</doc>
      </member>
      <member name="info"
              value="2"
              c:identifier="ALSACTL_ELEM_EVENT_MASK_INFO"
              glib:nick="info"
              glib:name="ALSACTL_ELEM_EVENT_MASK_INFO">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="96">The event notifies any change of information for the element.</doc>
      </member>
      <member name="add"
              value="4"
              c:identifier="ALSACTL_ELEM_EVENT_MASK_ADD"
              glib:nick="add"
              glib:name="ALSACTL_ELEM_EVENT_MASK_ADD">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="97">The element notifies addition of the element.</doc>
      </member>
      <member name="tlv"
              value="8"
              c:identifier="ALSACTL_ELEM_EVENT_MASK_TLV"
              glib:nick="tlv"
              glib:name="ALSACTL_ELEM_EVENT_MASK_TLV">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="98">The element notifies any change of Type-Length-Value data for the element.</doc>
      </member>
      <member name="remove"
              value="16"
              c:identifier="ALSACTL_ELEM_EVENT_MASK_REMOVE"
              glib:nick="remove"
              glib:name="ALSACTL_ELEM_EVENT_MASK_REMOVE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="99">The element notifies removal of the element.</doc>
      </member>
    </bitfield>
    <record name="ElemId"
            c:type="ALSACtlElemId"
            glib:type-name="ALSACtlElemId"
            glib:get-type="alsactl_elem_id_get_type"
            c:symbol-prefix="elem_id">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-id.c"
           line="4">A boxed object to express the identifier of element.
A [struct@ElemId] is a boxed object to express the identifier of element. It points to a
element by two ways; by the numeric identifier, or by the combination of the type of interface,
the numeric identifier of device, the numeric identifier of subdevice, the name, and the index.

The object wraps `struct snd_ctl_elem_id` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-id.h" line="11"/>
      <constructor name="new_by_name"
                   c:identifier="alsactl_elem_id_new_by_name">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="47">Allocates and return an instance of [struct@ElemId] by the name.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="16"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-id.c"
               line="58">A [struct@ElemId].</doc>
          <type name="ElemId" c:type="ALSACtlElemId*"/>
        </return-value>
        <parameters>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="49">The interface of element, one of ALSACtlElemIfaceType.</doc>
            <type name="ElemIfaceType" c:type="ALSACtlElemIfaceType"/>
          </parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="50">The numeric identifier of device to which the element belongs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="subdevice_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="51">The numeric identifier of subdevice to which the element belongs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="52">The name of element, up to 44 byte (=`SNDRV_CTL_ELEM_ID_NAME_MAXLEN`) including
                 terminator.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="54">The index of element in a set of elements with the same name.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_by_numid"
                   c:identifier="alsactl_elem_id_new_by_numid">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="29">Allocates and return an instance of [struct@ElemId] by the numeric identifier.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-id.c"
               line="35">A [struct@ElemId].</doc>
          <type name="ElemId" c:type="ALSACtlElemId*"/>
        </return-value>
        <parameters>
          <parameter name="numid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="31">The numeric identifier of the element.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="equal" c:identifier="alsactl_elem_id_equal">
        <source-position filename="../src/ctl/elem-id.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-id.c"
               line="158">whether the given object indicates the same element.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="155">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="156">A [struct@ElemId] to compare.</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_id"
              c:identifier="alsactl_elem_id_get_device_id">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="104">Get the numeric identifier of device to which the element belongs.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="106">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="device_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="107">The numeric identifier of device to which the element belongs.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iface" c:identifier="alsactl_elem_id_get_iface">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="91">Get the interface of element.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="93">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="iface"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="94">The interface of element.</doc>
            <type name="ElemIfaceType" c:type="ALSACtlElemIfaceType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index" c:identifier="alsactl_elem_id_get_index">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="141">Get the index of element.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="143">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="144">The index of element.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="alsactl_elem_id_get_name">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="129">Get the name of element.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="131">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="132">The name of element.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_numid" c:identifier="alsactl_elem_id_get_numid">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="79">Get the numeric identifier of element.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="81">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="numid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="82">The numeric identifier of element.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subdevice_id"
              c:identifier="alsactl_elem_id_get_subdevice_id">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-id.c"
             line="116">Get the numeric identifier of element.</doc>
        <source-position filename="../src/ctl/elem-id.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="118">A [struct@ElemId].</doc>
            <type name="ElemId" c:type="const ALSACtlElemId*"/>
          </instance-parameter>
          <parameter name="subdevice_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-id.c"
                 line="119">The numeric identifier of subdevice to which the element belongs.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ElemIfaceType"
                 glib:type-name="ALSACtlElemIfaceType"
                 glib:get-type="alsactl_elem_iface_type_get_type"
                 c:type="ALSACtlElemIfaceType">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="29">A set of enumerations for interface of element.</doc>
      <member name="card"
              value="0"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_CARD"
              glib:nick="card"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_CARD">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="31">The element has effects to whole the sound card.</doc>
      </member>
      <member name="hwdep"
              value="1"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_HWDEP"
              glib:nick="hwdep"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_HWDEP">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="32">The element has effects to hwdep device.</doc>
      </member>
      <member name="mixer"
              value="2"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_MIXER"
              glib:nick="mixer"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_MIXER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="33">The element has effects to mixer device.</doc>
      </member>
      <member name="pcm"
              value="3"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_PCM"
              glib:nick="pcm"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_PCM">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="34">The element has effects to PCM device.</doc>
      </member>
      <member name="rawmidi"
              value="4"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_RAWMIDI"
              glib:nick="rawmidi"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_RAWMIDI">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="35">The element has effects to Rawmidi device.</doc>
      </member>
      <member name="timer"
              value="5"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_TIMER"
              glib:nick="timer"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_TIMER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="36">The element has effects to Timer device.</doc>
      </member>
      <member name="sequencer"
              value="6"
              c:identifier="ALSACTL_ELEM_IFACE_TYPE_SEQUENCER"
              glib:nick="sequencer"
              glib:name="ALSACTL_ELEM_IFACE_TYPE_SEQUENCER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="37">The element has effects to Sequencer device.</doc>
      </member>
    </enumeration>
    <class name="ElemInfoBoolean"
           c:symbol-prefix="elem_info_boolean"
           c:type="ALSACtlElemInfoBoolean"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoBoolean"
           glib:get-type="alsactl_elem_info_boolean_get_type"
           glib:type-struct="ElemInfoBooleanClass">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-boolean.c"
           line="4">An object to express information for boolean type of element.
A [class@GObject.Object] derived object class for boolean type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-boolean.h" line="16"/>
      <implements name="ElemInfoCommon"/>
      <implements name="ElemInfoSingleArray"/>
      <constructor name="new" c:identifier="alsactl_elem_info_boolean_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-boolean.c"
             line="71">Allocate and return an instance of [class@ElemInfoBoolean].</doc>
        <source-position filename="../src/ctl/elem-info-boolean.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-boolean.c"
               line="76">An instance of [class@ElemInfoBoolean].</doc>
          <type name="ElemInfoBoolean" c:type="ALSACtlElemInfoBoolean*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemInfoBooleanClass"
            c:type="ALSACtlElemInfoBooleanClass"
            glib:is-gtype-struct-for="ElemInfoBoolean">
      <source-position filename="../src/ctl/elem-info-boolean.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ElemInfoBytes"
           c:symbol-prefix="elem_info_bytes"
           c:type="ALSACtlElemInfoBytes"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoBytes"
           glib:get-type="alsactl_elem_info_bytes_get_type"
           glib:type-struct="ElemInfoBytesClass">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-bytes.c"
           line="4">An object to express information for bytes type of element.
A [class@GObject.Object] derived object class for bytes type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-bytes.h" line="15"/>
      <implements name="ElemInfoCommon"/>
      <implements name="ElemInfoSingleArray"/>
      <constructor name="new" c:identifier="alsactl_elem_info_bytes_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-bytes.c"
             line="71">Allocate and return an instance of [class@ElemInfoBytes].</doc>
        <source-position filename="../src/ctl/elem-info-bytes.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-bytes.c"
               line="76">An instance of [class@ElemInfoBytes].</doc>
          <type name="ElemInfoBytes" c:type="ALSACtlElemInfoBytes*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemInfoBytesClass"
            c:type="ALSACtlElemInfoBytesClass"
            glib:is-gtype-struct-for="ElemInfoBytes">
      <source-position filename="../src/ctl/elem-info-bytes.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="ElemInfoCommon"
               c:symbol-prefix="elem_info_common"
               c:type="ALSACtlElemInfoCommon"
               version="0.3."
               glib:type-name="ALSACtlElemInfoCommon"
               glib:get-type="alsactl_elem_info_common_get_type"
               glib:type-struct="ElemInfoCommonInterface">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-common.c"
           line="4">An interface to express common features of element information.
A [iface@ElemInfoCommon] should be implemented by any type of element information.</doc>
      <source-position filename="../src/ctl/elem-info-common.h" line="16"/>
      <property name="access"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-common.c"
             line="46">The access permission for the element with [flags@ElemAccessFlag].</doc>
        <type name="ElemAccessFlag"/>
      </property>
      <property name="elem-id" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-common.c"
             line="19">The identifier of element.</doc>
        <type name="ElemId"/>
      </property>
      <property name="elem-type"
                version="0.3."
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-common.c"
             line="32">The type of element, one of [enum@ElemType].</doc>
        <type name="ElemType"/>
      </property>
      <property name="owner" version="0.3." transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-common.c"
             line="60">The value of PID for process to own the element.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </interface>
    <record name="ElemInfoCommonInterface"
            c:type="ALSACtlElemInfoCommonInterface"
            glib:is-gtype-struct-for="ElemInfoCommon">
      <source-position filename="../src/ctl/elem-info-common.h" line="16"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ElemInfoEnumerated"
           c:symbol-prefix="elem_info_enumerated"
           c:type="ALSACtlElemInfoEnumerated"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoEnumerated"
           glib:get-type="alsactl_elem_info_enumerated_get_type"
           glib:type-struct="ElemInfoEnumeratedClass">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-enumerated.c"
           line="4">An object to express information for enumerated type of element.
A [class@GObject.Object] derived object class for enumerated type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-enumerated.h" line="16"/>
      <implements name="ElemInfoCommon"/>
      <implements name="ElemInfoSingleArray"/>
      <constructor name="new" c:identifier="alsactl_elem_info_enumerated_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-enumerated.c"
             line="118">Allocate and return an instance of [class@ElemInfoEnumerated].</doc>
        <source-position filename="../src/ctl/elem-info-enumerated.h"
                         line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-enumerated.c"
               line="123">An instance of [class@ElemInfoEnumerated].</doc>
          <type name="ElemInfoEnumerated" c:type="ALSACtlElemInfoEnumerated*"/>
        </return-value>
      </constructor>
      <property name="labels"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-enumerated.c"
             line="86">The list of indexed labels for the element. There is limitation that:

 - The length of label including terminator should be within 64 bytes.
 - The total length of labels including terminators should be within (64 * 1024) bytes.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemInfoEnumeratedClass"
            c:type="ALSACtlElemInfoEnumeratedClass"
            glib:is-gtype-struct-for="ElemInfoEnumerated">
      <source-position filename="../src/ctl/elem-info-enumerated.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ElemInfoIec60958"
           c:symbol-prefix="elem_info_iec60958"
           c:type="ALSACtlElemInfoIec60958"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoIec60958"
           glib:get-type="alsactl_elem_info_iec60958_get_type"
           glib:type-struct="ElemInfoIec60958Class">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-iec60958.c"
           line="4">An object to express information for iec60958 type of element.
A [class@GObject.Object] derived object class for iec60958 type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-iec60958.h" line="16"/>
      <implements name="ElemInfoCommon"/>
      <constructor name="new" c:identifier="alsactl_elem_info_iec60958_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-iec60958.c"
             line="63">Allocate and return an instance of [class@ElemInfoIec60958].</doc>
        <source-position filename="../src/ctl/elem-info-iec60958.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-iec60958.c"
               line="68">An instance of [class@ElemInfoIec60958].</doc>
          <type name="ElemInfoIec60958" c:type="ALSACtlElemInfoIec60958*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemInfoIec60958Class"
            c:type="ALSACtlElemInfoIec60958Class"
            glib:is-gtype-struct-for="ElemInfoIec60958">
      <source-position filename="../src/ctl/elem-info-iec60958.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ElemInfoInteger"
           c:symbol-prefix="elem_info_integer"
           c:type="ALSACtlElemInfoInteger"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoInteger"
           glib:get-type="alsactl_elem_info_integer_get_type"
           glib:type-struct="ElemInfoIntegerClass">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-integer.c"
           line="4">An object to express information for integer type of element.
A [class@GObject.Object] derived object class for integer type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-integer.h" line="16"/>
      <implements name="ElemInfoCommon"/>
      <implements name="ElemInfoSingleArray"/>
      <constructor name="new" c:identifier="alsactl_elem_info_integer_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer.c"
             line="143">Allocate and return an instance of [class@ElemInfoInteger].</doc>
        <source-position filename="../src/ctl/elem-info-integer.h" line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-integer.c"
               line="148">An instance of [class@ElemInfoInteger].</doc>
          <type name="ElemInfoInteger" c:type="ALSACtlElemInfoInteger*"/>
        </return-value>
      </constructor>
      <property name="value-max"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer.c"
             line="101">The maximum value of element in value array for the element.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="value-min"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer.c"
             line="88">The minimum value of element in value array for the element.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="value-step"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer.c"
             line="114">The step value of element in value array for the element.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <class name="ElemInfoInteger64"
           c:symbol-prefix="elem_info_integer64"
           c:type="ALSACtlElemInfoInteger64"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemInfoInteger64"
           glib:get-type="alsactl_elem_info_integer64_get_type"
           glib:type-struct="ElemInfoInteger64Class">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-integer64.c"
           line="4">An object to express information for integer64 type of element.
A [class@GObject.Object] derived object class for integer64 type of element.

The object wraps `struct snd_ctl_elem_info` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-info-integer64.h" line="16"/>
      <implements name="ElemInfoCommon"/>
      <implements name="ElemInfoSingleArray"/>
      <constructor name="new" c:identifier="alsactl_elem_info_integer64_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer64.c"
             line="143">Allocate and return an instance of [class@ElemInfoInteger64].</doc>
        <source-position filename="../src/ctl/elem-info-integer64.h"
                         line="18"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-info-integer64.c"
               line="148">An instance of [class@ElemInfoInteger64].</doc>
          <type name="ElemInfoInteger64" c:type="ALSACtlElemInfoInteger64*"/>
        </return-value>
      </constructor>
      <property name="value-max"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer64.c"
             line="101">The maximum value of element in value array for the element.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="value-min"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer64.c"
             line="88">The minimum value of element in value array for the element.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="value-step"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-integer64.c"
             line="114">The step value of element in value array for the element.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemInfoInteger64Class"
            c:type="ALSACtlElemInfoInteger64Class"
            glib:is-gtype-struct-for="ElemInfoInteger64">
      <source-position filename="../src/ctl/elem-info-integer64.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ElemInfoIntegerClass"
            c:type="ALSACtlElemInfoIntegerClass"
            glib:is-gtype-struct-for="ElemInfoInteger">
      <source-position filename="../src/ctl/elem-info-integer.h" line="16"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="ElemInfoSingleArray"
               c:symbol-prefix="elem_info_single_array"
               c:type="ALSACtlElemInfoSingleArray"
               version="0.3."
               glib:type-name="ALSACtlElemInfoSingleArray"
               glib:get-type="alsactl_elem_info_single_array_get_type"
               glib:type-struct="ElemInfoSingleArrayInterface">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-info-single-array.c"
           line="4">An interface to express information of element which has single value array.
A [iface@ElemInfoSingleArray] should be implemented by the type of information for element
whieh has single value array.</doc>
      <source-position filename="../src/ctl/elem-info-single-array.h"
                       line="16"/>
      <prerequisite name="ElemInfoCommon"/>
      <property name="value-count"
                version="0.3."
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-info-single-array.c"
             line="21">The count of elements in value array of the element.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </interface>
    <record name="ElemInfoSingleArrayInterface"
            c:type="ALSACtlElemInfoSingleArrayInterface"
            glib:is-gtype-struct-for="ElemInfoSingleArray">
      <source-position filename="../src/ctl/elem-info-single-array.h"
                       line="16"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <enumeration name="ElemType"
                 glib:type-name="ALSACtlElemType"
                 glib:get-type="alsactl_elem_type_get_type"
                 c:type="ALSACtlElemType">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="7">A set of enumerations for type of element.</doc>
      <member name="none"
              value="0"
              c:identifier="ALSACTL_ELEM_TYPE_NONE"
              glib:nick="none"
              glib:name="ALSACTL_ELEM_TYPE_NONE">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="9">Unudentified type.</doc>
      </member>
      <member name="boolean"
              value="1"
              c:identifier="ALSACTL_ELEM_TYPE_BOOLEAN"
              glib:nick="boolean"
              glib:name="ALSACTL_ELEM_TYPE_BOOLEAN">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="10">The element has boolean values.</doc>
      </member>
      <member name="integer"
              value="2"
              c:identifier="ALSACTL_ELEM_TYPE_INTEGER"
              glib:nick="integer"
              glib:name="ALSACTL_ELEM_TYPE_INTEGER">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="11">The element has integer values.</doc>
      </member>
      <member name="enumerated"
              value="3"
              c:identifier="ALSACTL_ELEM_TYPE_ENUMERATED"
              glib:nick="enumerated"
              glib:name="ALSACTL_ELEM_TYPE_ENUMERATED">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="12">The element has values for enumerated labels.</doc>
      </member>
      <member name="bytes"
              value="4"
              c:identifier="ALSACTL_ELEM_TYPE_BYTES"
              glib:nick="bytes"
              glib:name="ALSACTL_ELEM_TYPE_BYTES">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="13">The element has byte values.</doc>
      </member>
      <member name="iec60958"
              value="5"
              c:identifier="ALSACTL_ELEM_TYPE_IEC60958"
              glib:nick="iec60958"
              glib:name="ALSACTL_ELEM_TYPE_IEC60958">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="14">The element has parameters of IEC 60958.</doc>
      </member>
      <member name="integer64"
              value="6"
              c:identifier="ALSACTL_ELEM_TYPE_INTEGER64"
              glib:nick="integer64"
              glib:name="ALSACTL_ELEM_TYPE_INTEGER64">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="15">The element has 64 bit integer values.</doc>
      </member>
    </enumeration>
    <class name="ElemValue"
           c:symbol-prefix="elem_value"
           c:type="ALSACtlElemValue"
           parent="GObject.Object"
           glib:type-name="ALSACtlElemValue"
           glib:get-type="alsactl_elem_value_get_type"
           glib:type-struct="ElemValueClass">
      <doc xml:space="preserve"
           filename="../src/ctl/elem-value.c"
           line="4">A GObject-derived object to express the container of array for values specific to element type.
A [class@ElemValue] includes several types of array for values specific to element type. The
arrays shares the same internal storage, thus the user application should decide the type of
array according to the type of element when accessing to the array. The object is used for the
call of [method@Card.write_elem_value] and [method@Card.read_elem_value].

The object wraps `struct snd_ctl_elem_value` in UAPI of Linux sound subsystem.</doc>
      <source-position filename="../src/ctl/elem-value.h" line="15"/>
      <constructor name="new" c:identifier="alsactl_elem_value_new">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="73">Allocate and return an instance of [class@ElemValue].</doc>
        <source-position filename="../src/ctl/elem-value.h" line="17"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-value.c"
               line="78">An instance of [class@ElemValue].</doc>
          <type name="ElemValue" c:type="ALSACtlElemValue*"/>
        </return-value>
      </constructor>
      <method name="equal" c:identifier="alsactl_elem_value_equal">
        <source-position filename="../src/ctl/elem-value.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/elem-value.c"
               line="441">Whether the given object includes the same values as the instance. The other fields are
         ignored to be compared.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="438">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="const ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="439">A [class@ElemValue] to compare.</doc>
            <type name="ElemValue" c:type="const ALSACtlElemValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bool" c:identifier="alsactl_elem_value_get_bool">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="118">Refer to the array specific to [enum@ElemType].BOOLEAN element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="21"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="120">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="121">The array for boolean values.</doc>
            <array zero-terminated="0"
                   c:type="const gboolean**"
                   fixed-size="128">
              <type name="gboolean" c:type="gboolean"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes" c:identifier="alsactl_elem_value_get_bytes">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="269">Refer to the array specific to [enum@ElemType].BYTES element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="271">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="272">The array for 8 bit unsigned integer
         values.</doc>
            <array zero-terminated="0"
                   c:type="const guint8**"
                   fixed-size="512">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_enum" c:identifier="alsactl_elem_value_get_enum">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="221">Refer to the array specific to [enum@ElemType].ENUMERATED element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="223">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="224">The array for enumeration index
         values.</doc>
            <array zero-terminated="0"
                   c:type="const guint32**"
                   fixed-size="128">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_iec60958_channel_status"
              c:identifier="alsactl_elem_value_get_iec60958_channel_status">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="318">Refer to the array specific to [enum@ElemType].IEC60958 element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="320">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="status"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="321">The array of byte data for channel status
         bits of IEC 60958.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="24">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_iec60958_user_data"
              c:identifier="alsactl_elem_value_get_iec60958_user_data">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="367">Refer to the array specific to [enum@ElemType].IEC60958 element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="369">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="370">The array of byte data for user data bits of
       IEC 60958.</doc>
            <array zero-terminated="0"
                   c:type="const guint8**"
                   fixed-size="147">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="alsactl_elem_value_get_int">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="169">Refer to the array for [enum@ElemType].INTEGER element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="171">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="172">The array for 32 bit signed integer
         values.</doc>
            <array zero-terminated="0"
                   c:type="const gint32**"
                   fixed-size="128">
              <type name="gint32" c:type="gint32"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_int64" c:identifier="alsactl_elem_value_get_int64">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="415">Refer to the array for [enum@ElemType].INTEGER64 element in internal storage.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="417">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="418">The array for 64 bit signed integer values.</doc>
            <array zero-terminated="0" c:type="const gint64**" fixed-size="64">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_bool" c:identifier="alsactl_elem_value_set_bool">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="92">Copy the array into internal data for [enum@ElemType].BOOLEAN element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="19"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="94">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="95">The array for boolean values.</doc>
            <array length="1" zero-terminated="0" c:type="const gboolean*">
              <type name="gboolean" c:type="gboolean"/>
            </array>
          </parameter>
          <parameter name="value_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="96">The number of values up to 128.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bytes" c:identifier="alsactl_elem_value_set_bytes">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="243">Copy the array into internal storage for [enum@ElemType].BYTES element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="245">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="246">The array for 8 bit unsigned integer values.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="value_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="247">The number of values up to 512.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enum" c:identifier="alsactl_elem_value_set_enum">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="195">Copy the array into internal storage for [enum@ElemType].ENUMERATED element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="197">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="198">The array for enumeration index values.</doc>
            <array length="1" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="value_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="199">The number of values up to 128.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iec60958_channel_status"
              c:identifier="alsactl_elem_value_set_iec60958_channel_status">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="291">Copy the channel status bits into internal storage for [enum@ElemType].IEC60958 element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="293">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="294">The array of byte data for channel status bits of IEC 60958.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="295">The number of bytes in channel_status argument, up to 24.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iec60958_user_data"
              c:identifier="alsactl_elem_value_set_iec60958_user_data">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="340">Copy the user data bits into internal storage for [enum@ElemType].IEC60958 element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="342">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="343">The array of byte data for user data bits of IEC 60958.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="344">The number of bytes in data argument, up to 147.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="alsactl_elem_value_set_int">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="143">Copy the array into internal storage for [enum@ElemType].INTEGER element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="145">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="146">The array for 32 bit signed integer values.</doc>
            <array length="1" zero-terminated="0" c:type="const gint32*">
              <type name="gint32" c:type="gint32"/>
            </array>
          </parameter>
          <parameter name="value_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="147">The number of values up to 128.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int64" c:identifier="alsactl_elem_value_set_int64">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="389">Copy the array into internal storage for [enum@ElemType].INTEGER64 element.</doc>
        <source-position filename="../src/ctl/elem-value.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="391">A [class@ElemValue].</doc>
            <type name="ElemValue" c:type="ALSACtlElemValue*"/>
          </instance-parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="392">The array for 64 bit signed integer values.</doc>
            <array length="1" zero-terminated="0" c:type="const gint64*">
              <type name="gint64" c:type="gint64"/>
            </array>
          </parameter>
          <parameter name="value_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/ctl/elem-value.c"
                 line="393">The number of values up to 64.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="elem-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/elem-value.c"
             line="53">The identifier of element.</doc>
        <type name="ElemId"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ElemValueClass"
            c:type="ALSACtlElemValueClass"
            glib:is-gtype-struct-for="ElemValue">
      <source-position filename="../src/ctl/elem-value.h" line="15"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="EventType"
                 glib:type-name="ALSACtlEventType"
                 glib:get-type="alsactl_event_type_get_type"
                 c:type="ALSACtlEventType">
      <doc xml:space="preserve"
           filename="../src/ctl/alsactl-enum-types.h"
           line="82">A set of enumerations for the type of event.</doc>
      <member name="elem"
              value="0"
              c:identifier="ALSACTL_EVENT_TYPE_ELEM"
              glib:nick="elem"
              glib:name="ALSACTL_EVENT_TYPE_ELEM">
        <doc xml:space="preserve"
             filename="../src/ctl/alsactl-enum-types.h"
             line="84">The event is related to any element.</doc>
      </member>
    </enumeration>
    <function name="card_error_quark"
              c:identifier="alsactl_card_error_quark"
              moved-to="CardError.quark">
      <doc xml:space="preserve"
           filename="../src/ctl/card.c"
           line="31">Return the [alias@GLib.Quark] for [struct@GLib.Error] with code in [enum@CardError] enumerations.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/card.c"
             line="36">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_card_id_list"
              c:identifier="alsactl_get_card_id_list"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/ctl/query.c"
           line="6">Get the list of numeric ID for available sound cards.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/ctl/query.h" line="9"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/query.c"
             line="16">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="entries"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="8">The list of numeric ID for sound cards.</doc>
          <array length="1" zero-terminated="0" c:type="guint**">
            <type name="guint" c:type="guint*"/>
          </array>
        </parameter>
        <parameter name="entry_count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="9">The number of entries.</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_card_sysname"
              c:identifier="alsactl_get_card_sysname"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/ctl/query.c"
           line="35">Allocate sysname for the sound card and return it when it exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/ctl/query.h" line="12"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/query.c"
             line="45">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="card_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="37">The numeric ID of sound card.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="sysname"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="38">The string for sysname of the sound card.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_control_devnode"
              c:identifier="alsactl_get_control_devnode"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/ctl/query.c"
           line="91">Allocate string of devnode for control device of the sound card and return it if exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/ctl/query.h" line="16"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/query.c"
             line="101">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="card_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="93">The numeric ID of sound card.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="devnode"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="94">The string for devnode of control device for the sound card.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_control_sysname"
              c:identifier="alsactl_get_control_sysname"
              throws="1">
      <doc xml:space="preserve"
           filename="../src/ctl/query.c"
           line="63">Allocate sysname of control device for the sound card and return it if exists.

Nodes under sound subsystem in sysfs are used to gather the information.</doc>
      <source-position filename="../src/ctl/query.h" line="14"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/ctl/query.c"
             line="73">%TRUE when the overall operation finishes successfully, else %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="card_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="65">The numeridcal ID of sound card.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="sysname"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/ctl/query.c"
               line="66">The string for sysname of control device for the sound card.</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="sigs_marshal_VOID__BOXED_FLAGS"
              c:identifier="alsactl_sigs_marshal_VOID__BOXED_FLAGS">
      <source-position filename="../src/ctl/alsactl-sigs-marshal.h" line="10"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>

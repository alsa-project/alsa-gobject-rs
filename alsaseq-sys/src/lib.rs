// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

extern crate libc;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate alsatimer_sys as alsatimer;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type ALSASeqClientType = c_int;
pub const ALSASEQ_CLIENT_TYPE_NONE: ALSASeqClientType = 0;
pub const ALSASEQ_CLIENT_TYPE_USER: ALSASeqClientType = 1;
pub const ALSASEQ_CLIENT_TYPE_KERNEL: ALSASeqClientType = 2;

pub type ALSASeqEventLengthMode = c_int;
pub const ALSASEQ_EVENT_LENGTH_MODE_FIXED: ALSASeqEventLengthMode = 0;
pub const ALSASEQ_EVENT_LENGTH_MODE_VARIABLE: ALSASeqEventLengthMode = 4;
pub const ALSASEQ_EVENT_LENGTH_MODE_POINTER: ALSASeqEventLengthMode = 8;

pub type ALSASeqEventPriorityMode = c_int;
pub const ALSASEQ_EVENT_PRIORITY_MODE_NORMAL: ALSASeqEventPriorityMode = 0;
pub const ALSASEQ_EVENT_PRIORITY_MODE_HIGH: ALSASeqEventPriorityMode = 16;

pub type ALSASeqEventTimeMode = c_int;
pub const ALSASEQ_EVENT_TIME_MODE_ABS: ALSASeqEventTimeMode = 0;
pub const ALSASEQ_EVENT_TIME_MODE_REL: ALSASeqEventTimeMode = 2;

pub type ALSASeqEventTimestampMode = c_int;
pub const ALSASEQ_EVENT_TIMESTAMP_MODE_TICK: ALSASeqEventTimestampMode = 0;
pub const ALSASEQ_EVENT_TIMESTAMP_MODE_REAL: ALSASeqEventTimestampMode = 1;

pub type ALSASeqEventType = c_int;
pub const ALSASEQ_EVENT_TYPE_SYSTEM: ALSASeqEventType = 0;
pub const ALSASEQ_EVENT_TYPE_RESULT: ALSASeqEventType = 1;
pub const ALSASEQ_EVENT_TYPE_NOTE: ALSASeqEventType = 5;
pub const ALSASEQ_EVENT_TYPE_NOTEON: ALSASeqEventType = 6;
pub const ALSASEQ_EVENT_TYPE_NOTEOFF: ALSASeqEventType = 7;
pub const ALSASEQ_EVENT_TYPE_KEYPRESS: ALSASeqEventType = 8;
pub const ALSASEQ_EVENT_TYPE_CONTROLLER: ALSASeqEventType = 10;
pub const ALSASEQ_EVENT_TYPE_PGMCHANGE: ALSASeqEventType = 11;
pub const ALSASEQ_EVENT_TYPE_CHANPRESS: ALSASeqEventType = 12;
pub const ALSASEQ_EVENT_TYPE_PITCHBEND: ALSASeqEventType = 13;
pub const ALSASEQ_EVENT_TYPE_CONTROL14: ALSASeqEventType = 14;
pub const ALSASEQ_EVENT_TYPE_NONREGPARAM: ALSASeqEventType = 15;
pub const ALSASEQ_EVENT_TYPE_REGPARAM: ALSASeqEventType = 16;
pub const ALSASEQ_EVENT_TYPE_SONGPOS: ALSASeqEventType = 20;
pub const ALSASEQ_EVENT_TYPE_SONGSEL: ALSASeqEventType = 21;
pub const ALSASEQ_EVENT_TYPE_QFRAME: ALSASeqEventType = 22;
pub const ALSASEQ_EVENT_TYPE_TIMESIGN: ALSASeqEventType = 23;
pub const ALSASEQ_EVENT_TYPE_KEYSIGN: ALSASeqEventType = 24;
pub const ALSASEQ_EVENT_TYPE_START: ALSASeqEventType = 30;
pub const ALSASEQ_EVENT_TYPE_CONTINUE: ALSASeqEventType = 31;
pub const ALSASEQ_EVENT_TYPE_STOP: ALSASeqEventType = 32;
pub const ALSASEQ_EVENT_TYPE_SETPOS_TICK: ALSASeqEventType = 33;
pub const ALSASEQ_EVENT_TYPE_SETPOS_TIME: ALSASeqEventType = 34;
pub const ALSASEQ_EVENT_TYPE_TEMPO: ALSASeqEventType = 35;
pub const ALSASEQ_EVENT_TYPE_CLOCK: ALSASeqEventType = 36;
pub const ALSASEQ_EVENT_TYPE_TICK: ALSASeqEventType = 37;
pub const ALSASEQ_EVENT_TYPE_QUEUE_SKEW: ALSASeqEventType = 38;
pub const ALSASEQ_EVENT_TYPE_TUNE_REQUEST: ALSASeqEventType = 40;
pub const ALSASEQ_EVENT_TYPE_RESET: ALSASeqEventType = 41;
pub const ALSASEQ_EVENT_TYPE_SENSING: ALSASeqEventType = 42;
pub const ALSASEQ_EVENT_TYPE_ECHO: ALSASeqEventType = 50;
pub const ALSASEQ_EVENT_TYPE_OSS: ALSASeqEventType = 51;
pub const ALSASEQ_EVENT_TYPE_CLIENT_START: ALSASeqEventType = 60;
pub const ALSASEQ_EVENT_TYPE_CLIENT_EXIT: ALSASeqEventType = 61;
pub const ALSASEQ_EVENT_TYPE_CLIENT_CHANGE: ALSASeqEventType = 62;
pub const ALSASEQ_EVENT_TYPE_PORT_START: ALSASeqEventType = 63;
pub const ALSASEQ_EVENT_TYPE_PORT_EXIT: ALSASeqEventType = 64;
pub const ALSASEQ_EVENT_TYPE_PORT_CHANGE: ALSASeqEventType = 65;
pub const ALSASEQ_EVENT_TYPE_PORT_SUBSCRIBED: ALSASeqEventType = 66;
pub const ALSASEQ_EVENT_TYPE_PORT_UNSUBSCRIBED: ALSASeqEventType = 67;
pub const ALSASEQ_EVENT_TYPE_USR0: ALSASeqEventType = 90;
pub const ALSASEQ_EVENT_TYPE_USR1: ALSASeqEventType = 91;
pub const ALSASEQ_EVENT_TYPE_USR2: ALSASeqEventType = 92;
pub const ALSASEQ_EVENT_TYPE_USR3: ALSASeqEventType = 93;
pub const ALSASEQ_EVENT_TYPE_USR4: ALSASeqEventType = 94;
pub const ALSASEQ_EVENT_TYPE_USR5: ALSASeqEventType = 95;
pub const ALSASEQ_EVENT_TYPE_USR6: ALSASeqEventType = 96;
pub const ALSASEQ_EVENT_TYPE_USR7: ALSASeqEventType = 97;
pub const ALSASEQ_EVENT_TYPE_USR8: ALSASeqEventType = 98;
pub const ALSASEQ_EVENT_TYPE_USR9: ALSASeqEventType = 99;
pub const ALSASEQ_EVENT_TYPE_SYSEX: ALSASeqEventType = 130;
pub const ALSASEQ_EVENT_TYPE_BOUNCE: ALSASeqEventType = 131;
pub const ALSASEQ_EVENT_TYPE_USR_VAR0: ALSASeqEventType = 135;
pub const ALSASEQ_EVENT_TYPE_USR_VAR1: ALSASeqEventType = 136;
pub const ALSASEQ_EVENT_TYPE_USR_VAR2: ALSASeqEventType = 137;
pub const ALSASEQ_EVENT_TYPE_USR_VAR3: ALSASeqEventType = 138;
pub const ALSASEQ_EVENT_TYPE_USR_VAR4: ALSASeqEventType = 139;
pub const ALSASEQ_EVENT_TYPE_NONE: ALSASeqEventType = 255;

pub type ALSASeqQuerySubscribeType = c_int;
pub const ALSASEQ_QUERY_SUBSCRIBE_TYPE_READ: ALSASeqQuerySubscribeType = 0;
pub const ALSASEQ_QUERY_SUBSCRIBE_TYPE_WRITE: ALSASeqQuerySubscribeType = 1;

pub type ALSASeqQueueTimerType = c_int;
pub const ALSASEQ_QUEUE_TIMER_TYPE_ALSA: ALSASeqQueueTimerType = 0;

pub type ALSASeqSpecificAddress = c_int;
pub const ALSASEQ_SPECIFIC_ADDRESS_UNKNOWN: ALSASeqSpecificAddress = 253;
pub const ALSASEQ_SPECIFIC_ADDRESS_SUBSCRIBERS: ALSASeqSpecificAddress = 254;
pub const ALSASEQ_SPECIFIC_ADDRESS_BROADCAST: ALSASeqSpecificAddress = 255;

pub type ALSASeqSpecificClientId = c_int;
pub const ALSASEQ_SPECIFIC_CLIENT_ID_SYSTEM: ALSASeqSpecificClientId = 0;
pub const ALSASEQ_SPECIFIC_CLIENT_ID_DUMMY: ALSASeqSpecificClientId = 14;
pub const ALSASEQ_SPECIFIC_CLIENT_ID_OSS: ALSASeqSpecificClientId = 15;

pub type ALSASeqSpecificPortId = c_int;
pub const ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_TIMER: ALSASeqSpecificPortId = 0;
pub const ALSASEQ_SPECIFIC_PORT_ID_SYSTEM_ANNOUNCE: ALSASeqSpecificPortId = 1;

pub type ALSASeqSpecificQueueId = c_int;
pub const ALSASEQ_SPECIFIC_QUEUE_ID_DIRECT: ALSASeqSpecificQueueId = 253;

pub type ALSASeqUserClientError = c_int;
pub const ALSASEQ_USER_CLIENT_ERROR_FAILED: ALSASeqUserClientError = 0;
pub const ALSASEQ_USER_CLIENT_ERROR_PORT_PERMISSION: ALSASeqUserClientError = 1;
pub const ALSASEQ_USER_CLIENT_ERROR_QUEUE_PERMISSION: ALSASeqUserClientError = 2;

// Flags
pub type ALSASeqFilterAttrFlag = c_uint;
pub const ALSASEQ_FILTER_ATTR_FLAG_BROADCAST: ALSASeqFilterAttrFlag = 1;
pub const ALSASEQ_FILTER_ATTR_FLAG_MULTICAST: ALSASeqFilterAttrFlag = 2;
pub const ALSASEQ_FILTER_ATTR_FLAG_BOUNCE: ALSASeqFilterAttrFlag = 4;

pub type ALSASeqPortAttrFlag = c_uint;
pub const ALSASEQ_PORT_ATTR_FLAG_SPECIFIC: ALSASeqPortAttrFlag = 1;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_GENERIC: ALSASeqPortAttrFlag = 2;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_GM: ALSASeqPortAttrFlag = 4;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_GS: ALSASeqPortAttrFlag = 8;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_XG: ALSASeqPortAttrFlag = 16;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_MT32: ALSASeqPortAttrFlag = 32;
pub const ALSASEQ_PORT_ATTR_FLAG_MIDI_GM2: ALSASeqPortAttrFlag = 64;
pub const ALSASEQ_PORT_ATTR_FLAG_HARDWARE: ALSASeqPortAttrFlag = 65536;
pub const ALSASEQ_PORT_ATTR_FLAG_SOFTWARE: ALSASeqPortAttrFlag = 131072;
pub const ALSASEQ_PORT_ATTR_FLAG_SYNTHESIZER: ALSASeqPortAttrFlag = 262144;
pub const ALSASEQ_PORT_ATTR_FLAG_PORT: ALSASeqPortAttrFlag = 524288;
pub const ALSASEQ_PORT_ATTR_FLAG_APPLICATION: ALSASeqPortAttrFlag = 1048576;

pub type ALSASeqPortCapFlag = c_uint;
pub const ALSASEQ_PORT_CAP_FLAG_READ: ALSASeqPortCapFlag = 1;
pub const ALSASEQ_PORT_CAP_FLAG_WRITE: ALSASeqPortCapFlag = 2;
pub const ALSASEQ_PORT_CAP_FLAG_DUPLEX: ALSASeqPortCapFlag = 16;
pub const ALSASEQ_PORT_CAP_FLAG_SUBS_READ: ALSASeqPortCapFlag = 32;
pub const ALSASEQ_PORT_CAP_FLAG_SUBS_WRITE: ALSASeqPortCapFlag = 64;
pub const ALSASEQ_PORT_CAP_FLAG_NO_EXPORT: ALSASeqPortCapFlag = 128;

pub type ALSASeqPortSubscribeFlag = c_uint;
pub const ALSASEQ_PORT_SUBSCRIBE_FLAG_EXCLUSIVE: ALSASeqPortSubscribeFlag = 1;
pub const ALSASEQ_PORT_SUBSCRIBE_FLAG_TIMESTAMP: ALSASeqPortSubscribeFlag = 2;
pub const ALSASEQ_PORT_SUBSCRIBE_FLAG_TIME_REAL: ALSASeqPortSubscribeFlag = 4;

pub type ALSASeqRemoveFilterFlag = c_uint;
pub const ALSASEQ_REMOVE_FILTER_FLAG_INPUT: ALSASeqRemoveFilterFlag = 1;
pub const ALSASEQ_REMOVE_FILTER_FLAG_OUTPUT: ALSASeqRemoveFilterFlag = 2;

// Unions
#[repr(C)]
pub struct ALSASeqTstamp(c_void);

impl ::std::fmt::Debug for ALSASeqTstamp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqTstamp @ {:?}", self as *const _))
         .finish()
    }
}

// Records
#[repr(C)]
pub struct ALSASeqAddr(c_void);

impl ::std::fmt::Debug for ALSASeqAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqAddr @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqClientInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqClientInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqClientInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqClientInfoPrivate(c_void);

pub type ALSASeqClientInfoPrivate = *mut _ALSASeqClientInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqClientPoolClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqClientPoolClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqClientPoolClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqClientPoolPrivate(c_void);

pub type ALSASeqClientPoolPrivate = *mut _ALSASeqClientPoolPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqEventCntrClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqEventCntrClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventCntrClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqEventCntrPrivate(c_void);

pub type ALSASeqEventCntrPrivate = *mut _ALSASeqEventCntrPrivate;

#[repr(C)]
pub struct ALSASeqEventDataConnect(c_void);

impl ::std::fmt::Debug for ALSASeqEventDataConnect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventDataConnect @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct ALSASeqEventDataCtl(c_void);

impl ::std::fmt::Debug for ALSASeqEventDataCtl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventDataCtl @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct ALSASeqEventDataNote(c_void);

impl ::std::fmt::Debug for ALSASeqEventDataNote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventDataNote @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct ALSASeqEventDataQueue(c_void);

impl ::std::fmt::Debug for ALSASeqEventDataQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventDataQueue @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct ALSASeqEventDataResult(c_void);

impl ::std::fmt::Debug for ALSASeqEventDataResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventDataResult @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqPortInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqPortInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqPortInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqPortInfoPrivate(c_void);

pub type ALSASeqPortInfoPrivate = *mut _ALSASeqPortInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqQueueInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqQueueInfoPrivate(c_void);

pub type ALSASeqQueueInfoPrivate = *mut _ALSASeqQueueInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueStatusClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqQueueStatusClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueStatusClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqQueueStatusPrivate(c_void);

pub type ALSASeqQueueStatusPrivate = *mut _ALSASeqQueueStatusPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueTempoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqQueueTempoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueTempoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqQueueTempoPrivate(c_void);

pub type ALSASeqQueueTempoPrivate = *mut _ALSASeqQueueTempoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueTimerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqQueueTimerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueTimerClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct ALSASeqQueueTimerDataAlsa {
    _truncated_record_marker: c_void,
    // /*Ignored*/field device_id has incomplete type
}

impl ::std::fmt::Debug for ALSASeqQueueTimerDataAlsa {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueTimerDataAlsa @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqQueueTimerPrivate(c_void);

pub type ALSASeqQueueTimerPrivate = *mut _ALSASeqQueueTimerPrivate;

#[repr(C)]
pub struct ALSASeqRemoveFilter(c_void);

impl ::std::fmt::Debug for ALSASeqRemoveFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqRemoveFilter @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqSubscribeDataClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqSubscribeDataClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqSubscribeDataClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqSubscribeDataPrivate(c_void);

pub type ALSASeqSubscribeDataPrivate = *mut _ALSASeqSubscribeDataPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqSystemInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ALSASeqSystemInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqSystemInfoClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqSystemInfoPrivate(c_void);

pub type ALSASeqSystemInfoPrivate = *mut _ALSASeqSystemInfoPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqUserClientClass {
    pub parent_class: gobject::GObjectClass,
    pub handle_event: Option<unsafe extern "C" fn(*mut ALSASeqUserClient, *const ALSASeqEventCntr)>,
}

impl ::std::fmt::Debug for ALSASeqUserClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqUserClientClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .field("handle_event", &self.handle_event)
         .finish()
    }
}

#[repr(C)]
pub struct _ALSASeqUserClientPrivate(c_void);

pub type ALSASeqUserClientPrivate = *mut _ALSASeqUserClientPrivate;

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqClientInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqClientInfoPrivate,
}

impl ::std::fmt::Debug for ALSASeqClientInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqClientInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqClientPool {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqClientPoolPrivate,
}

impl ::std::fmt::Debug for ALSASeqClientPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqClientPool @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqEventCntr {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqEventCntrPrivate,
}

impl ::std::fmt::Debug for ALSASeqEventCntr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqEventCntr @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqPortInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqPortInfoPrivate,
}

impl ::std::fmt::Debug for ALSASeqPortInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqPortInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqQueueInfoPrivate,
}

impl ::std::fmt::Debug for ALSASeqQueueInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueStatus {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqQueueStatusPrivate,
}

impl ::std::fmt::Debug for ALSASeqQueueStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueStatus @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueTempo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqQueueTempoPrivate,
}

impl ::std::fmt::Debug for ALSASeqQueueTempo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueTempo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqQueueTimer {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqQueueTimerPrivate,
}

impl ::std::fmt::Debug for ALSASeqQueueTimer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqQueueTimer @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqSubscribeData {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqSubscribeData,
}

impl ::std::fmt::Debug for ALSASeqSubscribeData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqSubscribeData @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqSystemInfo {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqSystemInfoPrivate,
}

impl ::std::fmt::Debug for ALSASeqSystemInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqSystemInfo @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ALSASeqUserClient {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut ALSASeqUserClientPrivate,
}

impl ::std::fmt::Debug for ALSASeqUserClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ALSASeqUserClient @ {:?}", self as *const _))
         .field("parent_instance", &self.parent_instance)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[link(name = "alsaseq")]
extern "C" {

    //=========================================================================
    // ALSASeqClientType
    //=========================================================================
    pub fn alsaseq_client_type_get_type() -> GType;

    //=========================================================================
    // ALSASeqEventLengthMode
    //=========================================================================
    pub fn alsaseq_event_length_mode_get_type() -> GType;

    //=========================================================================
    // ALSASeqEventPriorityMode
    //=========================================================================
    pub fn alsaseq_event_priority_mode_get_type() -> GType;

    //=========================================================================
    // ALSASeqEventTimeMode
    //=========================================================================
    pub fn alsaseq_event_time_mode_get_type() -> GType;

    //=========================================================================
    // ALSASeqEventTimestampMode
    //=========================================================================
    pub fn alsaseq_event_timestamp_mode_get_type() -> GType;

    //=========================================================================
    // ALSASeqEventType
    //=========================================================================
    pub fn alsaseq_event_type_get_type() -> GType;

    //=========================================================================
    // ALSASeqQuerySubscribeType
    //=========================================================================
    pub fn alsaseq_query_subscribe_type_get_type() -> GType;

    //=========================================================================
    // ALSASeqQueueTimerType
    //=========================================================================
    pub fn alsaseq_queue_timer_type_get_type() -> GType;

    //=========================================================================
    // ALSASeqSpecificAddress
    //=========================================================================
    pub fn alsaseq_specific_address_get_type() -> GType;

    //=========================================================================
    // ALSASeqSpecificClientId
    //=========================================================================
    pub fn alsaseq_specific_client_id_get_type() -> GType;

    //=========================================================================
    // ALSASeqSpecificPortId
    //=========================================================================
    pub fn alsaseq_specific_port_id_get_type() -> GType;

    //=========================================================================
    // ALSASeqSpecificQueueId
    //=========================================================================
    pub fn alsaseq_specific_queue_id_get_type() -> GType;

    //=========================================================================
    // ALSASeqUserClientError
    //=========================================================================
    pub fn alsaseq_user_client_error_get_type() -> GType;
    pub fn alsaseq_user_client_error_quark() -> glib::GQuark;

    //=========================================================================
    // ALSASeqFilterAttrFlag
    //=========================================================================
    pub fn alsaseq_filter_attr_flag_get_type() -> GType;

    //=========================================================================
    // ALSASeqPortAttrFlag
    //=========================================================================
    pub fn alsaseq_port_attr_flag_get_type() -> GType;

    //=========================================================================
    // ALSASeqPortCapFlag
    //=========================================================================
    pub fn alsaseq_port_cap_flag_get_type() -> GType;

    //=========================================================================
    // ALSASeqPortSubscribeFlag
    //=========================================================================
    pub fn alsaseq_port_subscribe_flag_get_type() -> GType;

    //=========================================================================
    // ALSASeqRemoveFilterFlag
    //=========================================================================
    pub fn alsaseq_remove_filter_flag_get_type() -> GType;

    //=========================================================================
    // ALSASeqTstamp
    //=========================================================================
    pub fn alsaseq_tstamp_get_type() -> GType;
    pub fn alsaseq_tstamp_get_real_time(self_: *const ALSASeqTstamp, real_time: *mut *const [u32; 2]);
    pub fn alsaseq_tstamp_get_tick_time(self_: *const ALSASeqTstamp, tick_time: *mut u32);
    pub fn alsaseq_tstamp_set_real_time(self_: *mut ALSASeqTstamp, real_time: *const [u32; 2]);
    pub fn alsaseq_tstamp_set_tick_time(self_: *mut ALSASeqTstamp, tick_time: u32);

    //=========================================================================
    // ALSASeqAddr
    //=========================================================================
    pub fn alsaseq_addr_get_type() -> GType;
    pub fn alsaseq_addr_new(client_id: u8, port_id: u8) -> *mut ALSASeqAddr;
    pub fn alsaseq_addr_equal(self_: *const ALSASeqAddr, target: *const ALSASeqAddr) -> gboolean;
    pub fn alsaseq_addr_get_client_id(self_: *const ALSASeqAddr, client_id: *mut u8);
    pub fn alsaseq_addr_get_port_id(self_: *const ALSASeqAddr, port_id: *mut u8);

    //=========================================================================
    // ALSASeqEventDataConnect
    //=========================================================================
    pub fn alsaseq_event_data_connect_get_type() -> GType;
    pub fn alsaseq_event_data_connect_get_dst(self_: *const ALSASeqEventDataConnect, dst: *mut *const ALSASeqAddr);
    pub fn alsaseq_event_data_connect_get_src(self_: *const ALSASeqEventDataConnect, src: *mut *const ALSASeqAddr);
    pub fn alsaseq_event_data_connect_set_dst(self_: *mut ALSASeqEventDataConnect, dst: *const ALSASeqAddr);
    pub fn alsaseq_event_data_connect_set_src(self_: *mut ALSASeqEventDataConnect, src: *const ALSASeqAddr);

    //=========================================================================
    // ALSASeqEventDataCtl
    //=========================================================================
    pub fn alsaseq_event_data_ctl_get_type() -> GType;
    pub fn alsaseq_event_data_ctl_get_channel(self_: *const ALSASeqEventDataCtl, channel: *mut u8);
    pub fn alsaseq_event_data_ctl_get_param(self_: *const ALSASeqEventDataCtl, param: *mut c_uint);
    pub fn alsaseq_event_data_ctl_get_value(self_: *const ALSASeqEventDataCtl, value: *mut c_int);
    pub fn alsaseq_event_data_ctl_set_channel(self_: *mut ALSASeqEventDataCtl, channel: u8);
    pub fn alsaseq_event_data_ctl_set_param(self_: *mut ALSASeqEventDataCtl, param: c_uint);
    pub fn alsaseq_event_data_ctl_set_value(self_: *mut ALSASeqEventDataCtl, value: c_int);

    //=========================================================================
    // ALSASeqEventDataNote
    //=========================================================================
    pub fn alsaseq_event_data_note_get_type() -> GType;
    pub fn alsaseq_event_data_note_get_channel(self_: *const ALSASeqEventDataNote, channel: *mut u8);
    pub fn alsaseq_event_data_note_get_duration(self_: *const ALSASeqEventDataNote, duration: *mut u8);
    pub fn alsaseq_event_data_note_get_note(self_: *const ALSASeqEventDataNote, note: *mut u8);
    pub fn alsaseq_event_data_note_get_off_velocity(self_: *const ALSASeqEventDataNote, off_velocity: *mut u8);
    pub fn alsaseq_event_data_note_get_velocity(self_: *const ALSASeqEventDataNote, velocity: *mut u8);
    pub fn alsaseq_event_data_note_set_channel(self_: *mut ALSASeqEventDataNote, channel: u8);
    pub fn alsaseq_event_data_note_set_duration(self_: *mut ALSASeqEventDataNote, duration: u8);
    pub fn alsaseq_event_data_note_set_note(self_: *mut ALSASeqEventDataNote, note: u8);
    pub fn alsaseq_event_data_note_set_off_velocity(self_: *mut ALSASeqEventDataNote, off_velocity: u8);
    pub fn alsaseq_event_data_note_set_velocity(self_: *mut ALSASeqEventDataNote, velocity: u8);

    //=========================================================================
    // ALSASeqEventDataQueue
    //=========================================================================
    pub fn alsaseq_event_data_queue_get_type() -> GType;
    pub fn alsaseq_event_data_queue_get_byte_param(self_: *const ALSASeqEventDataQueue, bytes: *mut *const [u8; 8]);
    pub fn alsaseq_event_data_queue_get_position_param(self_: *const ALSASeqEventDataQueue, position: *mut c_uint);
    pub fn alsaseq_event_data_queue_get_quadlet_param(self_: *const ALSASeqEventDataQueue, quadlets: *mut *const [u32; 2]);
    pub fn alsaseq_event_data_queue_get_queue_id(self_: *const ALSASeqEventDataQueue, queue_id: *mut u8);
    pub fn alsaseq_event_data_queue_get_skew_param(self_: *const ALSASeqEventDataQueue, skew: *mut *const [c_uint; 2]);
    pub fn alsaseq_event_data_queue_get_tstamp_param(self_: *const ALSASeqEventDataQueue, tstamp: *mut *const ALSASeqTstamp);
    pub fn alsaseq_event_data_queue_get_value_param(self_: *const ALSASeqEventDataQueue, value: *mut c_int);
    pub fn alsaseq_event_data_queue_set_byte_param(self_: *mut ALSASeqEventDataQueue, bytes: *const [u8; 8]);
    pub fn alsaseq_event_data_queue_set_position_param(self_: *mut ALSASeqEventDataQueue, position: c_uint);
    pub fn alsaseq_event_data_queue_set_quadlet_param(self_: *mut ALSASeqEventDataQueue, quadlets: *const [u32; 2]);
    pub fn alsaseq_event_data_queue_set_queue_id(self_: *mut ALSASeqEventDataQueue, queue_id: u8);
    pub fn alsaseq_event_data_queue_set_skew_param(self_: *mut ALSASeqEventDataQueue, skew: *const [c_uint; 2]);
    pub fn alsaseq_event_data_queue_set_tstamp_param(self_: *mut ALSASeqEventDataQueue, tstamp: *const ALSASeqTstamp);
    pub fn alsaseq_event_data_queue_set_value_param(self_: *mut ALSASeqEventDataQueue, value: c_int);

    //=========================================================================
    // ALSASeqEventDataResult
    //=========================================================================
    pub fn alsaseq_event_data_result_get_type() -> GType;
    pub fn alsaseq_event_data_result_get_event(self_: *const ALSASeqEventDataResult, event_type: *mut ALSASeqEventType);
    pub fn alsaseq_event_data_result_get_result(self_: *const ALSASeqEventDataResult, result: *mut c_int);
    pub fn alsaseq_event_data_result_set_event(self_: *mut ALSASeqEventDataResult, event_type: ALSASeqEventType);
    pub fn alsaseq_event_data_result_set_result(self_: *mut ALSASeqEventDataResult, result: c_int);

    //=========================================================================
    // ALSASeqQueueTimerDataAlsa
    //=========================================================================
    pub fn alsaseq_queue_timer_data_alsa_get_type() -> GType;
    pub fn alsaseq_queue_timer_data_alsa_get_device_id(self_: *const ALSASeqQueueTimerDataAlsa, device_id: *mut *const alsatimer::ALSATimerDeviceId);
    pub fn alsaseq_queue_timer_data_alsa_get_resolution(self_: *const ALSASeqQueueTimerDataAlsa, resolution: *mut c_uint);
    pub fn alsaseq_queue_timer_data_alsa_set_device_id(self_: *mut ALSASeqQueueTimerDataAlsa, device_id: *const alsatimer::ALSATimerDeviceId);
    pub fn alsaseq_queue_timer_data_alsa_set_resolution(self_: *mut ALSASeqQueueTimerDataAlsa, resolution: c_uint);

    //=========================================================================
    // ALSASeqRemoveFilter
    //=========================================================================
    pub fn alsaseq_remove_filter_get_type() -> GType;
    pub fn alsaseq_remove_filter_new_with_dest_addr(inout: ALSASeqRemoveFilterFlag, queue_id: u8, dest: *mut ALSASeqAddr, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_event_type(inout: ALSASeqRemoveFilterFlag, queue_id: u8, ev_type: ALSASeqEventType, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_note(inout: ALSASeqRemoveFilterFlag, queue_id: u8, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_note_channel(inout: ALSASeqRemoveFilterFlag, queue_id: u8, channel: u8, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_real_time(inout: ALSASeqRemoveFilterFlag, queue_id: u8, tv_sec: i32, tv_nsec: u32, after: gboolean, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_tag(inout: ALSASeqRemoveFilterFlag, queue_id: u8, tag: i8, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;
    pub fn alsaseq_remove_filter_new_with_tick_time(inout: ALSASeqRemoveFilterFlag, queue_id: u8, tick_time: i32, after: gboolean, error: *mut *mut glib::GError) -> *mut ALSASeqRemoveFilter;

    //=========================================================================
    // ALSASeqClientInfo
    //=========================================================================
    pub fn alsaseq_client_info_get_type() -> GType;
    pub fn alsaseq_client_info_new() -> *mut ALSASeqClientInfo;
    pub fn alsaseq_client_info_get_event_filter(self_: *mut ALSASeqClientInfo, event_types: *mut *mut ALSASeqEventType, event_type_count: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_client_info_set_event_filter(self_: *mut ALSASeqClientInfo, event_types: *const ALSASeqEventType, event_type_count: size_t, error: *mut *mut glib::GError);

    //=========================================================================
    // ALSASeqClientPool
    //=========================================================================
    pub fn alsaseq_client_pool_get_type() -> GType;
    pub fn alsaseq_client_pool_new() -> *mut ALSASeqClientPool;

    //=========================================================================
    // ALSASeqEventCntr
    //=========================================================================
    pub fn alsaseq_event_cntr_get_type() -> GType;
    pub fn alsaseq_event_cntr_new(count: c_uint, error: *mut *mut glib::GError) -> *mut ALSASeqEventCntr;
    pub fn alsaseq_event_cntr_calculate_pool_consumption(self_: *mut ALSASeqEventCntr, count: size_t, cells: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_count_events(self_: *mut ALSASeqEventCntr, count: *mut size_t);
    pub fn alsaseq_event_cntr_get_addr_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_blob_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const u8, size: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_byte_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const [u8; 12], error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_connect_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqEventDataConnect, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_ctl_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqEventDataCtl, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_dst(self_: *mut ALSASeqEventCntr, index: size_t, dst: *mut *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_event_type(self_: *mut ALSASeqEventCntr, index: size_t, ev_type: *mut ALSASeqEventType, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_length_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: *mut ALSASeqEventLengthMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_note_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqEventDataNote, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_priority_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: *mut ALSASeqEventPriorityMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_quadlet_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const [u32; 3], error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_queue_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqEventDataQueue, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_queue_id(self_: *mut ALSASeqEventCntr, index: size_t, queue_id: *mut u8, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_result_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqEventDataResult, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_src(self_: *mut ALSASeqEventCntr, index: size_t, src: *mut *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_tag(self_: *mut ALSASeqEventCntr, index: size_t, tag: *mut i8, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_time_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: *mut ALSASeqEventTimeMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_tstamp(self_: *mut ALSASeqEventCntr, index: size_t, tstamp: *mut *const ALSASeqTstamp, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_tstamp_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *mut *const ALSASeqTstamp, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_get_tstamp_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: *mut ALSASeqEventTimestampMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_addr_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_blob_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const u8, size: size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_byte_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const [u8; 12], error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_connect_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqEventDataConnect, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_ctl_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqEventDataCtl, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_dst(self_: *mut ALSASeqEventCntr, index: size_t, dst: *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_event_type(self_: *mut ALSASeqEventCntr, index: size_t, ev_type: ALSASeqEventType, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_note_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqEventDataNote, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_priority_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: ALSASeqEventPriorityMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_quadlet_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const [u32; 3], error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_queue_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqEventDataQueue, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_queue_id(self_: *mut ALSASeqEventCntr, index: size_t, queue_id: u8, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_result_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqEventDataResult, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_src(self_: *mut ALSASeqEventCntr, index: size_t, src: *const ALSASeqAddr, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_tag(self_: *mut ALSASeqEventCntr, index: size_t, tag: i8, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_time_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: ALSASeqEventTimeMode, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_tstamp(self_: *mut ALSASeqEventCntr, index: size_t, tstamp: *const ALSASeqTstamp, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_tstamp_data(self_: *mut ALSASeqEventCntr, index: size_t, data: *const ALSASeqTstamp, error: *mut *mut glib::GError);
    pub fn alsaseq_event_cntr_set_tstamp_mode(self_: *mut ALSASeqEventCntr, index: size_t, mode: ALSASeqEventTimestampMode, error: *mut *mut glib::GError);

    //=========================================================================
    // ALSASeqPortInfo
    //=========================================================================
    pub fn alsaseq_port_info_get_type() -> GType;
    pub fn alsaseq_port_info_new() -> *mut ALSASeqPortInfo;

    //=========================================================================
    // ALSASeqQueueInfo
    //=========================================================================
    pub fn alsaseq_queue_info_get_type() -> GType;
    pub fn alsaseq_queue_info_new() -> *mut ALSASeqQueueInfo;

    //=========================================================================
    // ALSASeqQueueStatus
    //=========================================================================
    pub fn alsaseq_queue_status_get_type() -> GType;
    pub fn alsaseq_queue_status_new() -> *mut ALSASeqQueueStatus;
    pub fn alsaseq_queue_status_get_real_time(self_: *mut ALSASeqQueueStatus, real_time: *mut *const [u32; 2]);
    pub fn alsaseq_queue_status_get_tick_time(self_: *mut ALSASeqQueueStatus, tick_time: *mut c_uint);

    //=========================================================================
    // ALSASeqQueueTempo
    //=========================================================================
    pub fn alsaseq_queue_tempo_get_type() -> GType;
    pub fn alsaseq_queue_tempo_new() -> *mut ALSASeqQueueTempo;
    pub fn alsaseq_queue_tempo_get_skew(self_: *mut ALSASeqQueueTempo, skew: *mut *const [u32; 2]);
    pub fn alsaseq_queue_tempo_set_skew(self_: *mut ALSASeqQueueTempo, skew: *const [u32; 2]);

    //=========================================================================
    // ALSASeqQueueTimer
    //=========================================================================
    pub fn alsaseq_queue_timer_get_type() -> GType;
    pub fn alsaseq_queue_timer_new() -> *mut ALSASeqQueueTimer;
    pub fn alsaseq_queue_timer_get_alsa_data(self_: *mut ALSASeqQueueTimer, data: *mut *const ALSASeqQueueTimerDataAlsa);
    pub fn alsaseq_queue_timer_set_alsa_data(self_: *mut ALSASeqQueueTimer, data: *const ALSASeqQueueTimerDataAlsa);

    //=========================================================================
    // ALSASeqSubscribeData
    //=========================================================================
    pub fn alsaseq_subscribe_data_get_type() -> GType;
    pub fn alsaseq_subscribe_data_new() -> *mut ALSASeqSubscribeData;

    //=========================================================================
    // ALSASeqSystemInfo
    //=========================================================================
    pub fn alsaseq_system_info_get_type() -> GType;

    //=========================================================================
    // ALSASeqUserClient
    //=========================================================================
    pub fn alsaseq_user_client_get_type() -> GType;
    pub fn alsaseq_user_client_new() -> *mut ALSASeqUserClient;
    pub fn alsaseq_user_client_create_port(self_: *mut ALSASeqUserClient, port_info: *const *mut ALSASeqPortInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_create_port_at(self_: *mut ALSASeqUserClient, port_info: *const *mut ALSASeqPortInfo, port_id: u8, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_create_queue(self_: *mut ALSASeqUserClient, queue_info: *const *mut ALSASeqQueueInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_create_source(self_: *mut ALSASeqUserClient, gsrc: *mut *mut glib::GSource, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_delete_port(self_: *mut ALSASeqUserClient, port_id: u8, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_delete_queue(self_: *mut ALSASeqUserClient, queue_id: u8, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_info(self_: *mut ALSASeqUserClient, client_info: *const *mut ALSASeqClientInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_pool(self_: *mut ALSASeqUserClient, client_pool: *const *mut ALSASeqClientPool, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_protocol_version(self_: *mut ALSASeqUserClient, proto_ver_triplet: *mut *const [u16; 3], error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_queue_tempo(self_: *mut ALSASeqUserClient, queue_id: u8, queue_tempo: *mut *mut ALSASeqQueueTempo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_queue_timer(self_: *mut ALSASeqUserClient, queue_id: u8, queue_timer: *mut *mut ALSASeqQueueTimer, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_get_queue_usage(self_: *mut ALSASeqUserClient, queue_id: u8, use_: *mut gboolean, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_open(self_: *mut ALSASeqUserClient, open_flag: c_int, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_operate_subscription(self_: *mut ALSASeqUserClient, subs_data: *mut ALSASeqSubscribeData, establish: gboolean, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_remove_events(self_: *mut ALSASeqUserClient, filter: *mut ALSASeqRemoveFilter, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_schedule_event(self_: *mut ALSASeqUserClient, ev_cntr: *mut ALSASeqEventCntr, count: size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_set_info(self_: *mut ALSASeqUserClient, client_info: *mut ALSASeqClientInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_set_pool(self_: *mut ALSASeqUserClient, client_pool: *mut ALSASeqClientPool, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_set_queue_tempo(self_: *mut ALSASeqUserClient, queue_id: u8, queue_tempo: *mut ALSASeqQueueTempo, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_set_queue_timer(self_: *mut ALSASeqUserClient, queue_id: u8, queue_timer: *mut ALSASeqQueueTimer, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_set_queue_usage(self_: *mut ALSASeqUserClient, queue_id: u8, use_: gboolean, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_update_port(self_: *mut ALSASeqUserClient, port_info: *mut ALSASeqPortInfo, port_id: u8, error: *mut *mut glib::GError);
    pub fn alsaseq_user_client_update_queue(self_: *mut ALSASeqUserClient, queue_info: *mut ALSASeqQueueInfo, error: *mut *mut glib::GError);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn alsaseq_get_client_id_list(entries: *mut *mut u8, entry_count: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_get_client_info(client_id: u8, client_info: *mut *mut ALSASeqClientInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_get_client_pool(client_id: u8, client_pool: *mut *mut ALSASeqClientPool, error: *mut *mut glib::GError);
    pub fn alsaseq_get_port_id_list(client_id: u8, entries: *mut *mut u8, entry_count: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_get_port_info(client_id: u8, port_id: u8, port_info: *mut *mut ALSASeqPortInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_get_queue_id_list(entries: *mut *mut u8, entry_count: *mut size_t, error: *mut *mut glib::GError);
    pub fn alsaseq_get_queue_info_by_id(queue_id: u8, queue_info: *mut *mut ALSASeqQueueInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_get_queue_info_by_name(name: *const c_char, queue_info: *mut *mut ALSASeqQueueInfo, error: *mut *mut glib::GError);
    pub fn alsaseq_get_queue_status(queue_id: u8, queue_status: *const *mut ALSASeqQueueStatus, error: *mut *mut glib::GError);
    pub fn alsaseq_get_seq_devnode(devnode: *mut *mut c_char, error: *mut *mut glib::GError);
    pub fn alsaseq_get_seq_sysname(sysname: *mut *mut c_char, error: *mut *mut glib::GError);
    pub fn alsaseq_get_subscription_list(addr: *const ALSASeqAddr, query_type: ALSASeqQuerySubscribeType, entries: *mut *mut glib::GList, error: *mut *mut glib::GError);
    pub fn alsaseq_get_system_info(system_info: *mut *mut ALSASeqSystemInfo, error: *mut *mut glib::GError);

}
